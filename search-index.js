var searchIndex = {};
searchIndex['kernel'] = {"items":[[5,"env","kernel","",null,{"inputs":[],"output":{"name":"environment"}}],[5,"idle_loop","","Idle loop (active while idle)",null,{"inputs":[],"output":null}],[5,"event_loop","","Event loop",null,{"inputs":[],"output":null}],[5,"init","","Initialize kernel",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"kernel","","Take regs for kernel calls and exceptions",null,{"inputs":[{"name":"usize"},{"name":"regs"}],"output":null}],[0,"common","","Common std-like functionality",null,null],[0,"debug","kernel::common","Debug",null,null],[5,"d","kernel::common::debug","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"db","","",null,{"inputs":[{"name":"u8"}],"output":null}],[5,"dbh","","",null,{"inputs":[{"name":"u8"}],"output":null}],[5,"dh","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"dd","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"ds","","",null,{"inputs":[{"name":"isize"}],"output":null}],[5,"dc","","",null,{"inputs":[{"name":"char"}],"output":null}],[5,"dl","","",null,{"inputs":[],"output":null}],[0,"event","kernel::common","Event input",null,null],[3,"Event","kernel::common::event","An event",null,null],[12,"code","","",0,null],[12,"a","","",0,null],[12,"b","","",0,null],[12,"c","","",0,null],[3,"MouseEvent","","A event related to the mouse",null,null],[12,"x","","The x coordinate of the mouse",1,null],[12,"y","","The y coordinate of the mouse",1,null],[12,"left_button","","Was the left button pressed?",1,null],[12,"middle_button","","Was the middle button pressed?",1,null],[12,"right_button","","Was the right button pressed?",1,null],[3,"KeyEvent","","A key event (such as a pressed key)",null,null],[12,"character","","The charecter of the key",2,null],[12,"scancode","","The scancode of the key",2,null],[12,"pressed","","Was it pressed?",2,null],[3,"QuitEvent","","",null,null],[4,"EventOption","","An optional event",null,null],[13,"Mouse","","A mouse event",3,null],[13,"Key","","A key event",3,null],[13,"Quit","","A quit request event",3,null],[13,"Unknown","","An unknown event",3,null],[13,"None","","No event",3,null],[17,"EVENT_NONE","","",null,null],[17,"EVENT_MOUSE","","",null,null],[17,"EVENT_KEY","","",null,null],[17,"EVENT_QUIT","","",null,null],[17,"K_ESC","","Escape key",null,null],[17,"K_BKSP","","Backspace key",null,null],[17,"K_TAB","","Tab key",null,null],[17,"K_CTRL","","Control key",null,null],[17,"K_ALT","","Alt key",null,null],[17,"K_F1","","F1 key",null,null],[17,"K_F2","","F2 key",null,null],[17,"K_F3","","F3 key",null,null],[17,"K_F4","","F4 key",null,null],[17,"K_F5","","F5 key",null,null],[17,"K_F6","","F6 key",null,null],[17,"K_F7","","F7 key",null,null],[17,"K_F8","","F8 key",null,null],[17,"K_F9","","F9 key",null,null],[17,"K_F10","","F10 key",null,null],[17,"K_HOME","","Home key",null,null],[17,"K_UP","","Up key",null,null],[17,"K_PGUP","","Page up key",null,null],[17,"K_LEFT","","Left key",null,null],[17,"K_RIGHT","","Right key",null,null],[17,"K_END","","End key",null,null],[17,"K_DOWN","","Down key",null,null],[17,"K_PGDN","","Page down key",null,null],[17,"K_DEL","","Delete key",null,null],[17,"K_F11","","F11 key",null,null],[17,"K_F12","","F12 key",null,null],[17,"K_LEFT_SHIFT","","Left shift",null,null],[17,"K_RIGHT_SHIFT","","Right shift",null,null],[11,"fmt","","",3,{"inputs":[{"name":"eventoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"eventoption"}],"output":{"name":"eventoption"}}],[11,"fmt","","",0,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"new","","Create a null event",0,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"to_option","","Convert the event ot an optional event",0,{"inputs":[{"name":"event"}],"output":{"name":"eventoption"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"mouseevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"mouseevent"}],"output":{"name":"mouseevent"}}],[11,"to_event","","Convert to an `Event`",1,{"inputs":[{"name":"mouseevent"}],"output":{"name":"event"}}],[11,"from_event","","Convert an `Event` to a `MouseEvent`",1,{"inputs":[{"name":"mouseevent"},{"name":"event"}],"output":{"name":"mouseevent"}}],[11,"fmt","","",2,{"inputs":[{"name":"keyevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"keyevent"}],"output":{"name":"keyevent"}}],[11,"to_event","","Convert to an `Event`",2,{"inputs":[{"name":"keyevent"}],"output":{"name":"event"}}],[11,"from_event","","Convert from an `Event`",2,{"inputs":[{"name":"keyevent"},{"name":"event"}],"output":{"name":"keyevent"}}],[11,"fmt","","",4,{"inputs":[{"name":"quitevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"quitevent"}],"output":{"name":"quitevent"}}],[11,"to_event","","",4,{"inputs":[{"name":"quitevent"}],"output":{"name":"event"}}],[11,"from_event","","",4,{"inputs":[{"name":"quitevent"},{"name":"event"}],"output":{"name":"quitevent"}}],[0,"slice","kernel::common","Slice-related traits",null,null],[0,"get_slice","kernel::common::slice","",null,null],[5,"bound","kernel::common::slice::get_slice","",null,{"inputs":[{"name":"usize"},{"name":"u"}],"output":{"name":"range"}}],[8,"GetSlice","","Bounded slice abstraction",null,null],[10,"get_slice","","",5,{"inputs":[{"name":"getslice"},{"name":"u"}],"output":{"name":"self"}}],[10,"get_slice_mut","","",5,{"inputs":[{"name":"getslice"},{"name":"u"}],"output":{"name":"self"}}],[8,"AsOption","kernel::common::slice","",null,null],[10,"as_option","","",6,{"inputs":[{"name":"asoption"}],"output":{"name":"option"}}],[11,"as_option","core::option","",7,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[0,"parse_path","kernel::common","A module for parsing paths",null,null],[5,"parse_path","kernel::common::parse_path","Parse the path",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"parse_ip","kernel::common","A module for parsing IP related string",null,null],[5,"parse_port","kernel::common::parse_ip","Get the port from a string (ip)",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"parse_host","","Get the host from a string (ip)",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[0,"random","kernel::common","A module for pseudorandom generator",null,null],[5,"rand","kernel::common::random","Generate pseudo random number",null,{"inputs":[],"output":{"name":"usize"}}],[5,"srand","","Set the seed",null,{"inputs":[{"name":"usize"}],"output":null}],[7,"seed","","",null,null],[0,"time","kernel::common","A module for time",null,null],[3,"Duration","kernel::common::time","A duration",null,null],[12,"secs","","The seconds",8,null],[12,"nanos","","The nano seconds",8,null],[17,"NANOS_PER_MICRO","","",null,null],[17,"NANOS_PER_MILLI","","",null,null],[17,"NANOS_PER_SEC","","",null,null],[11,"clone","","",8,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Create a new duration",8,{"inputs":[{"name":"duration"},{"name":"i64"},{"name":"i32"}],"output":{"name":"self"}}],[11,"monotonic","","Get the current duration",8,{"inputs":[{"name":"duration"}],"output":{"name":"self"}}],[11,"realtime","","Get the realtime",8,{"inputs":[{"name":"duration"}],"output":{"name":"self"}}],[11,"sleep","","Sleep the duration",8,{"inputs":[{"name":"duration"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",8,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"option"}}],[0,"to_num","kernel::common","String to number\nTypes convertable to integers",null,null],[8,"ToNum","kernel::common::to_num","Parse the string to a integer using a given radix",null,null],[10,"to_num_radix","","",9,{"inputs":[{"name":"tonum"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"to_num_radix_signed","","",9,{"inputs":[{"name":"tonum"},{"name":"usize"}],"output":{"name":"isize"}}],[10,"to_num","","",9,{"inputs":[{"name":"tonum"}],"output":{"name":"usize"}}],[10,"to_num_signed","","",9,{"inputs":[{"name":"tonum"}],"output":{"name":"isize"}}],[0,"macros","kernel","",null,null],[0,"alloc_system","","Allocation",null,null],[5,"__rust_allocate","kernel::alloc_system","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_usable_size","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"acpi","kernel","ACPI",null,null],[3,"Acpi","kernel::acpi","",null,null],[12,"rsdt","","",10,null],[12,"fadt","","",10,null],[12,"dsdt","","",10,null],[12,"ssdt","","",10,null],[12,"madt","","",10,null],[0,"aml","","",null,null],[5,"parse_string","kernel::acpi::aml","",null,null],[5,"parse_num","","",null,null],[5,"parse_length","","",null,null],[5,"parse_name","","",null,null],[5,"parse_int","","",null,null],[5,"parse_package","","",null,null],[5,"parse_device","","",null,null],[5,"parse_scope","","",null,null],[5,"parse","","",null,null],[17,"ZERO_OP","","",null,null],[17,"ONE_OP","","",null,null],[17,"NAME_OP","","",null,null],[17,"BYTE_PREFIX","","",null,null],[17,"WORD_PREFIX","","",null,null],[17,"DWORD_PREFIX","","",null,null],[17,"STRING_PREFIX","","",null,null],[17,"QWORD_PREFIX","","",null,null],[17,"SCOPE_OP","","",null,null],[17,"BUFFER_OP","","",null,null],[17,"PACKAGE_OP","","",null,null],[17,"METHOD_OP","","",null,null],[17,"DUAL_NAME_PREFIX","","",null,null],[17,"MULTI_NAME_PREFIX","","",null,null],[17,"EXT_OP_PREFIX","","",null,null],[17,"ROOT_PREFIX","","",null,null],[17,"PARENT_PREFIX","","",null,null],[17,"MUTEX_OP","","",null,null],[17,"OP_REGION_OP","","",null,null],[17,"FIELD_OP","","",null,null],[17,"DEVICE_OP","","",null,null],[17,"PROCESSOR_OP","","",null,null],[0,"dsdt","kernel::acpi","",null,null],[3,"DSDT","kernel::acpi::dsdt","",null,null],[12,"header","","",11,null],[12,"data","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"dsdt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"dsdt"}],"output":{"name":"dsdt"}}],[11,"new","","",11,{"inputs":[{"name":"dsdt"},{"name":"sdtheader"}],"output":{"name":"option"}}],[0,"fadt","kernel::acpi","",null,null],[3,"GenericAddressStructure","kernel::acpi::fadt","",null,null],[12,"address_space","","",12,null],[12,"bit_width","","",12,null],[12,"bit_offset","","",12,null],[12,"access_size","","",12,null],[12,"address","","",12,null],[3,"FADT","","",null,null],[12,"header","","",13,null],[12,"firmware_ctrl","","",13,null],[12,"dsdt","","",13,null],[12,"reserved","","",13,null],[12,"preferred_power_managament","","",13,null],[12,"sci_interrupt","","",13,null],[12,"smi_command_port","","",13,null],[12,"acpi_enable","","",13,null],[12,"acpi_disable","","",13,null],[12,"s4_bios_req","","",13,null],[12,"pstate_control","","",13,null],[12,"pm1a_event_block","","",13,null],[12,"pm1b_event_block","","",13,null],[12,"pm1a_control_block","","",13,null],[12,"pm1b_control_block","","",13,null],[12,"pm2_control_block","","",13,null],[12,"pm_timer_block","","",13,null],[12,"gpe0_block","","",13,null],[12,"gpe1_block","","",13,null],[12,"pm1_event_length","","",13,null],[12,"pm1_control_length","","",13,null],[12,"pm2_control_length","","",13,null],[12,"pm_timer_length","","",13,null],[12,"gpe0_ength","","",13,null],[12,"gpe1_length","","",13,null],[12,"gpe1_base","","",13,null],[12,"c_state_control","","",13,null],[12,"worst_c2_latency","","",13,null],[12,"worst_c3_latency","","",13,null],[12,"flush_size","","",13,null],[12,"flush_stride","","",13,null],[12,"duty_offset","","",13,null],[12,"duty_width","","",13,null],[12,"day_alarm","","",13,null],[12,"month_alarm","","",13,null],[12,"century","","",13,null],[12,"boot_architecture_flags","","",13,null],[12,"reserved2","","",13,null],[12,"flags","","",13,null],[12,"reset_reg","","",13,null],[12,"reset_value","","",13,null],[12,"reserved3","","",13,null],[12,"x_firmware_control","","",13,null],[12,"x_dsdt","","",13,null],[12,"x_pm1a_event_block","","",13,null],[12,"x_pm1b_event_block","","",13,null],[12,"x_pm1a_control_block","","",13,null],[12,"x_pm1b_control_block","","",13,null],[12,"x_pm2_control_block","","",13,null],[12,"x_pm_timer_block","","",13,null],[12,"x_gpe0_block","","",13,null],[12,"x_gpe1_block","","",13,null],[11,"default","","",12,{"inputs":[{"name":"genericaddressstructure"}],"output":{"name":"genericaddressstructure"}}],[11,"fmt","","",12,{"inputs":[{"name":"genericaddressstructure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"genericaddressstructure"}],"output":{"name":"genericaddressstructure"}}],[11,"default","","",13,{"inputs":[{"name":"fadt"}],"output":{"name":"fadt"}}],[11,"fmt","","",13,{"inputs":[{"name":"fadt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"fadt"}],"output":{"name":"fadt"}}],[11,"new","","",13,{"inputs":[{"name":"fadt"},{"name":"sdtheader"}],"output":{"name":"option"}}],[0,"madt","kernel::acpi","",null,null],[3,"LocalApic","kernel::acpi::madt","",null,null],[12,"entry_type","","",14,null],[12,"entry_len","","",14,null],[12,"processor","","",14,null],[12,"id","","",14,null],[12,"flags","","",14,null],[3,"IoApic","","",null,null],[12,"entry_type","","",15,null],[12,"entry_len","","",15,null],[12,"id","","",15,null],[12,"reserved","","",15,null],[12,"address","","",15,null],[12,"gsi_base","","",15,null],[3,"IntSourceOverride","","",null,null],[12,"entry_type","","",16,null],[12,"entry_len","","",16,null],[12,"bus_source","","",16,null],[12,"irq_source","","",16,null],[12,"gsi","","",16,null],[12,"flags","","",16,null],[3,"MADT","","",null,null],[12,"header","","",17,null],[12,"local_apic_address","","",17,null],[12,"flags","","",17,null],[12,"local_apics","","",17,null],[12,"io_apics","","",17,null],[12,"int_source_overrides","","",17,null],[17,"ENTRY_LOCAL_APIC","","",null,null],[17,"ENTRY_IO_APIC","","",null,null],[17,"ENTRY_INT_SOURCE_OVERRIDE","","",null,null],[11,"default","","",14,{"inputs":[{"name":"localapic"}],"output":{"name":"localapic"}}],[11,"fmt","","",14,{"inputs":[{"name":"localapic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"localapic"}],"output":{"name":"localapic"}}],[11,"default","","",15,{"inputs":[{"name":"ioapic"}],"output":{"name":"ioapic"}}],[11,"fmt","","",15,{"inputs":[{"name":"ioapic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"ioapic"}],"output":{"name":"ioapic"}}],[11,"default","","",16,{"inputs":[{"name":"intsourceoverride"}],"output":{"name":"intsourceoverride"}}],[11,"fmt","","",16,{"inputs":[{"name":"intsourceoverride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"intsourceoverride"}],"output":{"name":"intsourceoverride"}}],[11,"fmt","","",17,{"inputs":[{"name":"madt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"madt"}],"output":{"name":"madt"}}],[11,"new","","",17,{"inputs":[{"name":"madt"},{"name":"sdtheader"}],"output":{"name":"option"}}],[0,"rsdt","kernel::acpi","",null,null],[3,"RSDP","kernel::acpi::rsdt","",null,null],[12,"signature","","",18,null],[12,"checksum","","",18,null],[12,"oemid","","",18,null],[12,"revision","","",18,null],[12,"addr","","",18,null],[3,"RSDT","","",null,null],[12,"header","","",19,null],[12,"addrs","","",19,null],[17,"SIGNATURE","","",null,null],[11,"default","","",18,{"inputs":[{"name":"rsdp"}],"output":{"name":"rsdp"}}],[11,"fmt","","",18,{"inputs":[{"name":"rsdp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"rsdp"}],"output":{"name":"rsdp"}}],[11,"new","","",18,{"inputs":[{"name":"rsdp"}],"output":{"name":"result"}}],[11,"valid","","",18,{"inputs":[{"name":"rsdp"}],"output":{"name":"bool"}}],[11,"default","","",19,{"inputs":[{"name":"rsdt"}],"output":{"name":"rsdt"}}],[11,"fmt","","",19,{"inputs":[{"name":"rsdt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"rsdt"}],"output":{"name":"rsdt"}}],[11,"new","","",19,{"inputs":[{"name":"rsdt"}],"output":{"name":"result"}}],[0,"sdt","kernel::acpi","",null,null],[3,"SDTHeader","kernel::acpi::sdt","",null,null],[12,"signature","","",20,null],[12,"length","","",20,null],[12,"revision","","",20,null],[12,"checksum","","",20,null],[12,"oemid","","",20,null],[12,"oemtableid","","",20,null],[12,"oemrevision","","",20,null],[12,"creatorid","","",20,null],[12,"creatorrevision","","",20,null],[11,"default","","",20,{"inputs":[{"name":"sdtheader"}],"output":{"name":"sdtheader"}}],[11,"fmt","","",20,{"inputs":[{"name":"sdtheader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"sdtheader"}],"output":{"name":"sdtheader"}}],[11,"valid","","",20,{"inputs":[{"name":"sdtheader"},{"name":"str"}],"output":{"name":"bool"}}],[11,"data","","",20,null],[0,"ssdt","kernel::acpi","",null,null],[3,"SSDT","kernel::acpi::ssdt","",null,null],[12,"header","","",21,null],[12,"data","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"ssdt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"ssdt"}],"output":{"name":"ssdt"}}],[11,"new","","",21,{"inputs":[{"name":"ssdt"},{"name":"sdtheader"}],"output":{"name":"option"}}],[11,"default","kernel::acpi","",10,{"inputs":[{"name":"acpi"}],"output":{"name":"acpi"}}],[11,"fmt","","",10,{"inputs":[{"name":"acpi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"acpi"}],"output":{"name":"acpi"}}],[11,"new","","",10,{"inputs":[{"name":"acpi"}],"output":{"name":"option"}}],[11,"scheme","","",10,{"inputs":[{"name":"acpi"}],"output":{"name":"str"}}],[11,"open","","",10,{"inputs":[{"name":"acpi"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[0,"arch","kernel","Architecture dependant",null,null],[0,"context","kernel::arch","",null,null],[3,"ContextManager","kernel::arch::context","",null,null],[12,"inner","","",22,null],[12,"enabled","","",22,null],[12,"i","","",22,null],[12,"next_pid","","",22,null],[3,"ContextMemory","","",null,null],[12,"physical_address","","",23,null],[12,"virtual_address","","",23,null],[12,"virtual_size","","",23,null],[12,"writeable","","",23,null],[12,"allocated","","",23,null],[3,"ContextFile","","",null,null],[12,"fd","","",24,null],[12,"resource","","",24,null],[3,"ContextStatus","","",null,null],[12,"pid","","",25,null],[12,"status","","",25,null],[3,"Context","","",null,null],[12,"pid","","",26,null],[12,"ppid","","The PID of the parent",26,null],[12,"name","","The name of the context",26,null],[12,"interrupted","","Indicates that the context was interrupted, used for prioritizing active contexts",26,null],[12,"exited","","Indicates that the context exited",26,null],[12,"slices","","The number of time slices left",26,null],[12,"slice_total","","The total of all used slices",26,null],[12,"kernel_stack","","",26,null],[12,"sp","","The current kernel stack pointer",26,null],[12,"flags","","The current kernel flags",26,null],[12,"fx","","The location used to save and load SSE and FPU registers",26,null],[12,"stack","","The context stack",26,null],[12,"loadable","","Indicates that registers can be loaded (they must be saved first)",26,null],[12,"cwd","","Program working directory, cloned for threads, copied or created for processes. Modified by chdir",26,null],[12,"memory","","Program memory, cloned for threads, copied or created for processes. Modified by memory allocation",26,null],[12,"files","","Program files, cloned for threads, copied or created for processes. Modified by file operations",26,null],[12,"statuses","","Exit statuses of children",26,null],[5,"context_switch","","Switch context",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"context_clone","","Clone context",null,null],[5,"context_userspace","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"context_box","","Reads a Boxed function and executes it",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"CONTEXT_STACK_SIZE","","",null,null],[17,"CONTEXT_STACK_ADDR","","",null,null],[17,"CONTEXT_SLICES","","",null,null],[11,"new","","",22,{"inputs":[{"name":"contextmanager"}],"output":{"name":"contextmanager"}}],[11,"current","","",22,{"inputs":[{"name":"contextmanager"}],"output":{"name":"option"}}],[11,"current_mut","","",22,{"inputs":[{"name":"contextmanager"}],"output":{"name":"option"}}],[11,"iter","","",22,{"inputs":[{"name":"contextmanager"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"contextmanager"}],"output":{"name":"itermut"}}],[11,"get","","",22,{"inputs":[{"name":"contextmanager"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","",22,{"inputs":[{"name":"contextmanager"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","",22,{"inputs":[{"name":"contextmanager"}],"output":{"name":"usize"}}],[11,"push","","",22,{"inputs":[{"name":"contextmanager"},{"name":"box"}],"output":null}],[11,"clean","","",22,{"inputs":[{"name":"contextmanager"}],"output":null}],[11,"map","","",23,{"inputs":[{"name":"contextmemory"}],"output":null}],[11,"unmap","","",23,{"inputs":[{"name":"contextmemory"}],"output":null}],[11,"drop","","",23,{"inputs":[{"name":"contextmemory"}],"output":null}],[11,"next_pid","","",26,{"inputs":[{"name":"context"}],"output":{"name":"usize"}}],[11,"root","","",26,{"inputs":[{"name":"context"}],"output":{"name":"box"}}],[11,"new","","",26,{"inputs":[{"name":"context"},{"name":"string"},{"name":"usize"},{"name":"vec"}],"output":{"name":"box"}}],[11,"spawn","","",26,{"inputs":[{"name":"context"},{"name":"string"},{"name":"box"}],"output":{"name":"usize"}}],[11,"canonicalize","","",26,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"string"}}],[11,"next_mem","","Get the next available memory map address",26,{"inputs":[{"name":"context"}],"output":{"name":"usize"}}],[11,"translate","","Translate to physical if a ptr is inside of the mapped memory",26,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mem","","Get a memory map from a pointer",26,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mem_mut","","Get a mutable memory map from a pointer",26,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clean_mem","","Cleanup empty memory",26,{"inputs":[{"name":"context"}],"output":null}],[11,"next_fd","","Get the next available file descriptor",26,{"inputs":[{"name":"context"}],"output":{"name":"usize"}}],[11,"get_file","","Get a resource from a file descriptor",26,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_file_mut","","Get a mutable resource from a file descriptor",26,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","",26,{"inputs":[{"name":"context"},{"name":"usize"}],"output":null}],[11,"map","","",26,{"inputs":[{"name":"context"}],"output":null}],[11,"unmap","","",26,{"inputs":[{"name":"context"}],"output":null}],[11,"switch_to","","",26,{"inputs":[{"name":"context"},{"name":"context"}],"output":null}],[11,"drop","","",26,{"inputs":[{"name":"context"}],"output":null}],[0,"elf","kernel::arch","ELF executables",null,null],[3,"ElfHeader","kernel::arch::elf","An ELF header",null,null],[12,"magic","","The \"magic number\" (4 bytes)",27,null],[12,"class","","64 or 32 bit?",27,null],[12,"endian","","Little (1) or big endianness (2)?",27,null],[12,"ver","","The ELF version (set to 1 for default)",27,null],[12,"abi","","Operating system ABI (0x03 for Linux)",27,null],[12,"pad","","Unused",27,null],[12,"_type","","Specify whether the object is relocatable, executable, shared, or core (in order).",27,null],[12,"machine","","Instruction set archcitecture",27,null],[12,"ver_2","","Second version",27,null],[12,"entry","","The ELF entry",27,null],[12,"ph_off","","The program header table offset",27,null],[12,"sh_off","","The section header table offset",27,null],[12,"flags","","The flags set",27,null],[12,"h_len","","The header table length",27,null],[12,"ph_ent_len","","The program header table entry length",27,null],[12,"ph_len","","The program head table length",27,null],[12,"sh_ent_len","","The section header table entry length",27,null],[12,"sh_len","","The section header table length",27,null],[12,"sh_str_index","","The section header table string index",27,null],[3,"ElfSegment","","An ELF segment",null,null],[12,"_type","","",28,null],[12,"off","","",28,null],[12,"vaddr","","",28,null],[12,"paddr","","",28,null],[12,"file_len","","",28,null],[12,"mem_len","","",28,null],[12,"flags","","",28,null],[12,"align","","",28,null],[3,"ElfSection","","An ELF section",null,null],[12,"name","","",29,null],[12,"_type","","",29,null],[12,"flags","","",29,null],[12,"addr","","",29,null],[12,"off","","",29,null],[12,"len","","",29,null],[12,"link","","",29,null],[12,"info","","",29,null],[12,"addr_align","","",29,null],[12,"ent_len","","",29,null],[3,"ElfSymbol","","An ELF symbol",null,null],[12,"name","","",30,null],[12,"value","","",30,null],[12,"size","","",30,null],[12,"info","","",30,null],[12,"other","","",30,null],[12,"sh_index","","",30,null],[3,"Elf","","An ELF executable",null,null],[12,"data","","",31,null],[0,"arch","","",null,null],[3,"ElfHeader","kernel::arch::elf::arch","An ELF header",null,null],[12,"magic","","The \"magic number\" (4 bytes)",27,null],[12,"class","","64 or 32 bit?",27,null],[12,"endian","","Little (1) or big endianness (2)?",27,null],[12,"ver","","The ELF version (set to 1 for default)",27,null],[12,"abi","","Operating system ABI (0x03 for Linux)",27,null],[12,"pad","","Unused",27,null],[12,"_type","","Specify whether the object is relocatable, executable, shared, or core (in order).",27,null],[12,"machine","","Instruction set archcitecture",27,null],[12,"ver_2","","Second version",27,null],[12,"entry","","The ELF entry",27,null],[12,"ph_off","","The program header table offset",27,null],[12,"sh_off","","The section header table offset",27,null],[12,"flags","","The flags set",27,null],[12,"h_len","","The header table length",27,null],[12,"ph_ent_len","","The program header table entry length",27,null],[12,"ph_len","","The program head table length",27,null],[12,"sh_ent_len","","The section header table entry length",27,null],[12,"sh_len","","The section header table length",27,null],[12,"sh_str_index","","The section header table string index",27,null],[3,"ElfSegment","","An ELF segment",null,null],[12,"_type","","",28,null],[12,"off","","",28,null],[12,"vaddr","","",28,null],[12,"paddr","","",28,null],[12,"file_len","","",28,null],[12,"mem_len","","",28,null],[12,"flags","","",28,null],[12,"align","","",28,null],[3,"ElfSection","","An ELF section",null,null],[12,"name","","",29,null],[12,"_type","","",29,null],[12,"flags","","",29,null],[12,"addr","","",29,null],[12,"off","","",29,null],[12,"len","","",29,null],[12,"link","","",29,null],[12,"info","","",29,null],[12,"addr_align","","",29,null],[12,"ent_len","","",29,null],[3,"ElfSymbol","","An ELF symbol",null,null],[12,"name","","",30,null],[12,"value","","",30,null],[12,"size","","",30,null],[12,"info","","",30,null],[12,"other","","",30,null],[12,"sh_index","","",30,null],[6,"ElfAddr","","",null,null],[6,"ElfHalf","","",null,null],[6,"ElfOff","","",null,null],[6,"ElfWord","","",null,null],[17,"ELF_CLASS","","",null,null],[6,"ElfAddr","kernel::arch::elf","",null,null],[6,"ElfHalf","","",null,null],[6,"ElfOff","","",null,null],[6,"ElfWord","","",null,null],[17,"ELF_CLASS","","",null,null],[11,"new","","Create a new empty ELF executable",31,{"inputs":[{"name":"elf"}],"output":{"name":"self"}}],[11,"from_data","","Create a ELF executable from data",31,{"inputs":[{"name":"elf"},{"name":"usize"}],"output":{"name":"self"}}],[11,"d","","Debug",31,{"inputs":[{"name":"elf"}],"output":null}],[11,"load_segment","","",31,{"inputs":[{"name":"elf"}],"output":{"name":"vec"}}],[11,"entry","","Get the entry field of the header",31,{"inputs":[{"name":"elf"}],"output":{"name":"usize"}}],[11,"symbol","","ELF symbol",31,{"inputs":[{"name":"elf"},{"name":"str"}],"output":{"name":"usize"}}],[11,"drop","","",31,{"inputs":[{"name":"elf"}],"output":null}],[0,"intex","kernel::arch","",null,null],[3,"Intex","kernel::arch::intex","An Intex, interrupt exclusion during value usage",null,null],[12,"value","","",32,null],[3,"IntexGuard","","A Intex guard (returned by .lock())",null,null],[12,"inner","","",33,null],[12,"data","","",33,null],[3,"StaticIntexGuard","","A Static Intex guard (returned by .static_lock())",null,null],[7,"intex_count","","",null,null],[11,"static_lock","","",32,{"inputs":[{"name":"intex"}],"output":{"name":"staticintexguard"}}],[11,"new","","Create a new Intex with value `value`.",32,{"inputs":[{"name":"intex"},{"name":"t"}],"output":{"name":"self"}}],[11,"lock","","Lock the Intex",32,{"inputs":[{"name":"intex"}],"output":{"name":"intexguard"}}],[11,"new","","",33,{"inputs":[{"name":"intexguard"},{"name":"unsafecell"}],"output":{"name":"self"}}],[11,"deref","","",33,{"inputs":[{"name":"intexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"intexguard"}],"output":{"name":"t"}}],[11,"new","","",34,{"inputs":[{"name":"staticintexguard"}],"output":{"name":"self"}}],[11,"drop","","",34,{"inputs":[{"name":"staticintexguard"}],"output":null}],[0,"memory","kernel::arch","",null,null],[3,"Memory","kernel::arch::memory","A wrapper around raw pointers",null,null],[12,"ptr","","",35,null],[3,"MemoryMapEntry","","A memory map entry",null,null],[12,"base","","",36,null],[12,"len","","",36,null],[12,"class","","",36,null],[12,"acpi","","",36,null],[5,"cluster","","Get the data (address) of a given cluster",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"set_cluster","","Set the address of a cluster",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":null}],[5,"address_to_cluster","","Convert an adress to the cluster number",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"cluster_to_address","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"cluster_init","","Initialize clusters",null,{"inputs":[],"output":null}],[5,"alloc","","Allocate memory",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"alloc_aligned","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"alloc_type","","",null,null],[5,"alloc_size","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"unalloc","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"unalloc_type","","",null,null],[5,"realloc","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"realloc_inplace","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"memory_used","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"memory_free","","",null,{"inputs":[],"output":{"name":"usize"}}],[17,"CLUSTER_ADDRESS","","",null,null],[17,"CLUSTER_COUNT","","",null,null],[17,"CLUSTER_SIZE","","",null,null],[17,"MEMORY_MAP","","",null,null],[11,"new","","Create an empty",35,{"inputs":[{"name":"memory"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new_align","","",35,{"inputs":[{"name":"memory"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"renew","","Renew the memory",35,{"inputs":[{"name":"memory"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"size","","Get the size in bytes",35,{"inputs":[{"name":"memory"}],"output":{"name":"usize"}}],[11,"length","","Get the length in T elements",35,{"inputs":[{"name":"memory"}],"output":{"name":"usize"}}],[11,"address","","Get the address",35,{"inputs":[{"name":"memory"}],"output":{"name":"usize"}}],[11,"read","","Read the memory",35,{"inputs":[{"name":"memory"},{"name":"usize"}],"output":{"name":"t"}}],[11,"load","","Load the memory",35,{"inputs":[{"name":"memory"},{"name":"usize"}],"output":{"name":"t"}}],[11,"write","","Overwrite the memory",35,{"inputs":[{"name":"memory"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"store","","Store the memory",35,{"inputs":[{"name":"memory"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"into_raw","","Convert into a raw pointer",35,null],[11,"drop","","",35,{"inputs":[{"name":"memory"}],"output":null}],[11,"index","","",35,{"inputs":[{"name":"memory"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",35,{"inputs":[{"name":"memory"},{"name":"usize"}],"output":{"name":"t"}}],[0,"paging","kernel::arch","",null,null],[3,"Pager","kernel::arch::paging","",null,null],[12,"directory","","",37,null],[12,"flags","","",37,null],[3,"PageDirectory","","",null,null],[12,"entries","","",38,null],[3,"PageTable","","",null,null],[12,"entries","","",39,null],[3,"Page","","A memory page",null,null],[12,"virtual_address","","The virtual address",40,null],[0,"arch","","",null,null],[3,"Pager","kernel::arch::paging::arch","",null,null],[12,"directory","","",37,null],[12,"flags","","",37,null],[3,"PageDirectory","","",null,null],[12,"entries","","",38,null],[3,"PageTable","","",null,null],[12,"entries","","",39,null],[3,"Page","","A memory page",null,null],[12,"virtual_address","","The virtual address",40,null],[17,"PF_PRESENT","","",null,null],[17,"PF_WRITE","","",null,null],[17,"PF_USER","","",null,null],[17,"PF_WRITE_THROUGH","","",null,null],[17,"PF_CACHE_DISABLE","","",null,null],[17,"PF_ACCESSED","","",null,null],[17,"PF_DIRTY","","",null,null],[17,"PF_SIZE","","",null,null],[17,"PF_GLOBAL","","",null,null],[17,"PF_ALLOC","","",null,null],[17,"PF_EXEC","","",null,null],[17,"PF_STACK","","",null,null],[17,"PF_ALL","","",null,null],[17,"PF_NONE","","",null,null],[17,"PAGE_TABLE_SIZE","","",null,null],[17,"PAGE_ENTRY_SIZE","","",null,null],[17,"PAGE_SIZE","","",null,null],[17,"PAGE_DIRECTORY","","",null,null],[17,"PAGE_TABLES","","",null,null],[17,"PAGE_END","","",null,null],[11,"new","kernel::arch::paging","Create a new Pager for x86\n# Safety\n- Allocates and initializes a new page directory\n- *Will fail if memory allocation fails*",37,{"inputs":[{"name":"pager"},{"name":"usize"}],"output":{"name":"pager"}}],[11,"enable","","Use this Pager for memory operations\n# Safety\n- Sets CR3 to the page directory location, ensuring that flags are removed\n- *Will fail if memory allocation failed in Pager::new()*",37,{"inputs":[{"name":"pager"}],"output":null}],[11,"map","","Map a virtual address to a physical address\n# Safety\n- Calls PageDirectory::map() using a raw pointer\n- *Will fail if memory allocation failed in Pager::new()*",37,{"inputs":[{"name":"pager"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unmap","","Unmap a virtual address\n# Safety\n- Calls PageDirectory::unmap() using a raw pointer\n- *Will fail if memory allocation failed in Pager::new()*",37,{"inputs":[{"name":"pager"},{"name":"usize"}],"output":null}],[11,"drop","","Drop the Pager\n# Safety\n- Calls drop on a raw pointer\n- *Will fail if memory allocation failed in Pager::new()*\n- *CR3 should be set to a different pager before dropping*",37,{"inputs":[{"name":"pager"}],"output":null}],[11,"new","","Create a new and empty PageDirectory",38,{"inputs":[{"name":"pagedirectory"}],"output":{"name":"pagedirectory"}}],[11,"map","","Map a virtual address to a physical address\n# Safety\n- Calls PageTable::map() using a raw pointer\n- *Will fail if memory allocation failed*",38,{"inputs":[{"name":"pagedirectory"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unmap","","Unmap a virtual address\n# Safety\n- Calls PageTable::unmap() using a raw pointer\n- *Will fail if memory allocation failed*",38,{"inputs":[{"name":"pagedirectory"},{"name":"usize"}],"output":null}],[11,"drop","","",38,{"inputs":[{"name":"pagedirectory"}],"output":null}],[11,"new","","Create a new and empty PageTable",39,{"inputs":[{"name":"pagetable"}],"output":{"name":"pagetable"}}],[11,"map","","",39,{"inputs":[{"name":"pagetable"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unmap","","",39,{"inputs":[{"name":"pagetable"},{"name":"usize"}],"output":null}],[11,"drop","","",39,{"inputs":[{"name":"pagetable"}],"output":null}],[11,"init","","Initialize the memory page",40,{"inputs":[{"name":"page"}],"output":null}],[11,"new","","Create a new memory page from a virtual address",40,{"inputs":[{"name":"page"},{"name":"usize"}],"output":{"name":"self"}}],[11,"entry_address","","Get the entry address",40,{"inputs":[{"name":"page"}],"output":{"name":"usize"}}],[11,"flush","","Flush the memory page",40,{"inputs":[{"name":"page"}],"output":null}],[11,"phys_addr","","Get the current physical address",40,{"inputs":[{"name":"page"}],"output":{"name":"usize"}}],[11,"virt_addr","","Get the current virtual address",40,{"inputs":[{"name":"page"}],"output":{"name":"usize"}}],[11,"map","","Map the memory page to a given physical memory address",40,{"inputs":[{"name":"page"},{"name":"usize"}],"output":null}],[11,"map_user_read","","Map the memory page to a given physical memory address, and allow userspace read access",40,{"inputs":[{"name":"page"},{"name":"usize"}],"output":null}],[11,"map_user_write","","Map the memory page to a given physical memory address, and allow userspace read/write access",40,{"inputs":[{"name":"page"},{"name":"usize"}],"output":null}],[11,"map_identity","","Map to the virtual address",40,{"inputs":[{"name":"page"}],"output":null}],[11,"unmap","","Unmap the memory page",40,{"inputs":[{"name":"page"}],"output":null}],[17,"PF_PRESENT","","",null,null],[17,"PF_WRITE","","",null,null],[17,"PF_USER","","",null,null],[17,"PF_WRITE_THROUGH","","",null,null],[17,"PF_CACHE_DISABLE","","",null,null],[17,"PF_ACCESSED","","",null,null],[17,"PF_DIRTY","","",null,null],[17,"PF_SIZE","","",null,null],[17,"PF_GLOBAL","","",null,null],[17,"PF_ALLOC","","",null,null],[17,"PF_EXEC","","",null,null],[17,"PF_STACK","","",null,null],[17,"PF_ALL","","",null,null],[17,"PF_NONE","","",null,null],[17,"PAGE_TABLE_SIZE","","",null,null],[17,"PAGE_ENTRY_SIZE","","",null,null],[17,"PAGE_SIZE","","",null,null],[17,"PAGE_DIRECTORY","","",null,null],[17,"PAGE_TABLES","","",null,null],[17,"PAGE_END","","",null,null],[0,"regs","kernel::arch","",null,null],[3,"Regs","kernel::arch::regs","",null,null],[12,"ax","","",41,null],[12,"bx","","",41,null],[12,"cx","","",41,null],[12,"dx","","",41,null],[12,"di","","",41,null],[12,"si","","",41,null],[12,"bp","","",41,null],[12,"ip","","",41,null],[12,"cs","","",41,null],[12,"flags","","",41,null],[12,"sp","","",41,null],[12,"ss","","",41,null],[0,"arch","","",null,null],[3,"Regs","kernel::arch::regs::arch","",null,null],[12,"ax","","",41,null],[12,"bx","","",41,null],[12,"cx","","",41,null],[12,"dx","","",41,null],[12,"di","","",41,null],[12,"si","","",41,null],[12,"bp","","",41,null],[12,"ip","","",41,null],[12,"cs","","",41,null],[12,"flags","","",41,null],[12,"sp","","",41,null],[12,"ss","","",41,null],[11,"default","kernel::arch::regs","",41,{"inputs":[{"name":"regs"}],"output":{"name":"regs"}}],[11,"clone","","",41,{"inputs":[{"name":"regs"}],"output":{"name":"regs"}}],[0,"tss","kernel::arch","",null,null],[3,"TSS","kernel::arch::tss","",null,null],[12,"prev_tss","","",42,null],[12,"sp0","","",42,null],[12,"ss0","","",42,null],[12,"sp1","","",42,null],[12,"ss1","","",42,null],[12,"sp2","","",42,null],[12,"ss2","","",42,null],[12,"cr3","","",42,null],[12,"ip","","",42,null],[12,"flags","","",42,null],[12,"ax","","",42,null],[12,"cx","","",42,null],[12,"dx","","",42,null],[12,"bx","","",42,null],[12,"sp","","",42,null],[12,"bp","","",42,null],[12,"si","","",42,null],[12,"di","","",42,null],[12,"es","","",42,null],[12,"cs","","",42,null],[12,"ss","","",42,null],[12,"ds","","",42,null],[12,"fs","","",42,null],[12,"gs","","",42,null],[12,"ldt","","",42,null],[12,"trap","","",42,null],[12,"iomap_base","","",42,null],[0,"arch","","",null,null],[3,"TSS","kernel::arch::tss::arch","",null,null],[12,"prev_tss","","",42,null],[12,"sp0","","",42,null],[12,"ss0","","",42,null],[12,"sp1","","",42,null],[12,"ss1","","",42,null],[12,"sp2","","",42,null],[12,"ss2","","",42,null],[12,"cr3","","",42,null],[12,"ip","","",42,null],[12,"flags","","",42,null],[12,"ax","","",42,null],[12,"cx","","",42,null],[12,"dx","","",42,null],[12,"bx","","",42,null],[12,"sp","","",42,null],[12,"bp","","",42,null],[12,"si","","",42,null],[12,"di","","",42,null],[12,"es","","",42,null],[12,"cs","","",42,null],[12,"ss","","",42,null],[12,"ds","","",42,null],[12,"fs","","",42,null],[12,"gs","","",42,null],[12,"ldt","","",42,null],[12,"trap","","",42,null],[12,"iomap_base","","",42,null],[0,"disk","kernel","Disk drivers",null,null],[0,"ahci","kernel::disk","",null,null],[3,"Ahci","kernel::disk::ahci","",null,null],[3,"AhciDisk","","",null,null],[12,"port","","",43,null],[12,"port_index","","",43,null],[0,"fis","","",null,null],[3,"FisRegH2D","kernel::disk::ahci::fis","",null,null],[12,"fis_type","","",44,null],[12,"pm","","",44,null],[12,"command","","",44,null],[12,"featurel","","",44,null],[12,"lba0","","",44,null],[12,"lba1","","",44,null],[12,"lba2","","",44,null],[12,"device","","",44,null],[12,"lba3","","",44,null],[12,"lba4","","",44,null],[12,"lba5","","",44,null],[12,"featureh","","",44,null],[12,"countl","","",44,null],[12,"counth","","",44,null],[12,"icc","","",44,null],[12,"control","","",44,null],[12,"rsv1","","",44,null],[3,"FisRegD2H","","",null,null],[12,"fis_type","","",45,null],[12,"pm","","",45,null],[12,"status","","",45,null],[12,"error","","",45,null],[12,"lba0","","",45,null],[12,"lba1","","",45,null],[12,"lba2","","",45,null],[12,"device","","",45,null],[12,"lba3","","",45,null],[12,"lba4","","",45,null],[12,"lba5","","",45,null],[12,"rsv2","","",45,null],[12,"countl","","",45,null],[12,"counth","","",45,null],[12,"rsv3","","",45,null],[12,"rsv4","","",45,null],[3,"FisData","","",null,null],[12,"fis_type","","",46,null],[12,"pm","","",46,null],[12,"rsv1","","",46,null],[12,"data","","",46,null],[3,"FisPioSetup","","",null,null],[12,"fis_type","","",47,null],[12,"pm","","",47,null],[12,"status","","",47,null],[12,"error","","",47,null],[12,"lba0","","",47,null],[12,"lba1","","",47,null],[12,"lba2","","",47,null],[12,"device","","",47,null],[12,"lba3","","",47,null],[12,"lba4","","",47,null],[12,"lba5","","",47,null],[12,"rsv2","","",47,null],[12,"countl","","",47,null],[12,"counth","","",47,null],[12,"rsv3","","",47,null],[12,"e_status","","",47,null],[12,"tc","","",47,null],[12,"rsv4","","",47,null],[3,"FisDmaSetup","","",null,null],[12,"fis_type","","",48,null],[12,"pm","","",48,null],[12,"rsv1","","",48,null],[12,"dma_buffer_id","","",48,null],[12,"rsv3","","",48,null],[12,"dma_buffer_offset","","",48,null],[12,"transfer_count","","",48,null],[12,"rsv6","","",48,null],[17,"FIS_TYPE_REG_H2D","","",null,null],[17,"FIS_TYPE_REG_D2H","","",null,null],[17,"FIS_TYPE_DMA_ACT","","",null,null],[17,"FIS_TYPE_DMA_SETUP","","",null,null],[17,"FIS_TYPE_DATA","","",null,null],[17,"FIS_TYPE_BIST","","",null,null],[17,"FIS_TYPE_PIO_SETUP","","",null,null],[17,"FIS_TYPE_DEV_BITS","","",null,null],[0,"hba","kernel::disk::ahci","",null,null],[3,"HbaPort","kernel::disk::ahci::hba","",null,null],[12,"clb","","",49,null],[12,"fb","","",49,null],[12,"is","","",49,null],[12,"ie","","",49,null],[12,"cmd","","",49,null],[12,"rsv0","","",49,null],[12,"tfd","","",49,null],[12,"sig","","",49,null],[12,"ssts","","",49,null],[12,"sctl","","",49,null],[12,"serr","","",49,null],[12,"sact","","",49,null],[12,"ci","","",49,null],[12,"sntf","","",49,null],[12,"fbs","","",49,null],[12,"rsv1","","",49,null],[12,"vendor","","",49,null],[3,"HbaMem","","",null,null],[12,"cap","","",50,null],[12,"ghc","","",50,null],[12,"is","","",50,null],[12,"pi","","",50,null],[12,"vs","","",50,null],[12,"ccc_ctl","","",50,null],[12,"ccc_pts","","",50,null],[12,"em_loc","","",50,null],[12,"em_ctl","","",50,null],[12,"cap2","","",50,null],[12,"bohc","","",50,null],[12,"rsv","","",50,null],[12,"vendor","","",50,null],[12,"ports","","",50,null],[3,"HbaPrdtEntry","","",null,null],[12,"dba","","",51,null],[12,"rsv0","","",51,null],[12,"dbc","","",51,null],[3,"HbaCmdTable","","",null,null],[12,"cfis","","",52,null],[12,"acmd","","",52,null],[12,"rsv","","",52,null],[12,"prdt_entry","","",52,null],[3,"HbaCmdHeader","","",null,null],[12,"cfl","","",53,null],[12,"pm","","",53,null],[12,"prdtl","","",53,null],[12,"prdbc","","",53,null],[12,"ctba","","",53,null],[12,"rsv1","","",53,null],[4,"HbaPortType","","",null,null],[13,"None","","",54,null],[13,"Unknown","","",54,null],[13,"SATA","","",54,null],[13,"SATAPI","","",54,null],[13,"PM","","",54,null],[13,"SEMB","","",54,null],[17,"ATA_CMD_READ_DMA_EXT","","",null,null],[17,"ATA_CMD_WRITE_DMA_EXT","","",null,null],[17,"ATA_DEV_BUSY","","",null,null],[17,"ATA_DEV_DRQ","","",null,null],[17,"HBA_PORT_CMD_CR","","",null,null],[17,"HBA_PORT_CMD_FR","","",null,null],[17,"HBA_PORT_CMD_FRE","","",null,null],[17,"HBA_PORT_CMD_ST","","",null,null],[17,"HBA_PORT_IS_TFES","","",null,null],[17,"HBA_SSTS_PRESENT","","",null,null],[17,"HBA_SIG_ATA","","",null,null],[17,"HBA_SIG_ATAPI","","",null,null],[17,"HBA_SIG_PM","","",null,null],[17,"HBA_SIG_SEMB","","",null,null],[11,"fmt","","",54,{"inputs":[{"name":"hbaporttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"probe","","",49,{"inputs":[{"name":"hbaport"}],"output":{"name":"hbaporttype"}}],[11,"init","","",49,{"inputs":[{"name":"hbaport"}],"output":null}],[11,"start","","",49,{"inputs":[{"name":"hbaport"}],"output":null}],[11,"stop","","",49,{"inputs":[{"name":"hbaport"}],"output":null}],[11,"slot","","",49,{"inputs":[{"name":"hbaport"}],"output":{"name":"option"}}],[11,"ata_dma","","",49,{"inputs":[{"name":"hbaport"},{"name":"u64"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"disks","kernel::disk::ahci","",55,{"inputs":[{"name":"ahci"},{"name":"pciconfig"}],"output":{"name":"vec"}}],[11,"new","","",43,{"inputs":[{"name":"ahcidisk"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name","","",43,{"inputs":[{"name":"ahcidisk"}],"output":{"name":"string"}}],[11,"read","","",43,null],[11,"write","","",43,null],[0,"ide","kernel::disk","",null,null],[3,"Extent","kernel::disk::ide","An disk extent",null,null],[12,"block","","",56,null],[12,"length","","",56,null],[3,"Prd","","Physical Region Descriptor",null,null],[12,"addr","","",57,null],[12,"size","","",57,null],[12,"rsv","","",57,null],[12,"eot","","",57,null],[3,"Prdt","","",null,null],[12,"reg","","",58,null],[12,"mem","","",58,null],[3,"Ide","","",null,null],[3,"IdeDisk","","A disk (data storage)",null,null],[12,"cmd","","",59,null],[12,"sts","","",59,null],[12,"prdt","","",59,null],[12,"base","","",59,null],[12,"ctrl","","",59,null],[12,"irq","","",59,null],[12,"master","","",59,null],[17,"CMD_DIR","","Direction of DMA, set if moving from disk to memory, not set if moving from memory to disk",null,null],[17,"CMD_ACT","","DMA should process PRDT",null,null],[17,"STS_INT","","DMA interrupt occured",null,null],[17,"STS_ERR","","DMA error occured",null,null],[17,"STS_ACT","","DMA is processing PRDT",null,null],[17,"PRD_EOT","","PRDT End of Table",null,null],[17,"ATA_SR_BSY","","",null,null],[17,"ATA_SR_DRDY","","",null,null],[17,"ATA_SR_DF","","",null,null],[17,"ATA_SR_DSC","","",null,null],[17,"ATA_SR_DRQ","","",null,null],[17,"ATA_SR_CORR","","",null,null],[17,"ATA_SR_IDX","","",null,null],[17,"ATA_SR_ERR","","",null,null],[17,"ATA_ER_BBK","","",null,null],[17,"ATA_ER_UNC","","",null,null],[17,"ATA_ER_MC","","",null,null],[17,"ATA_ER_IDNF","","",null,null],[17,"ATA_ER_MCR","","",null,null],[17,"ATA_ER_ABRT","","",null,null],[17,"ATA_ER_TK0NF","","",null,null],[17,"ATA_ER_AMNF","","",null,null],[17,"ATA_CMD_READ_PIO","","",null,null],[17,"ATA_CMD_READ_PIO_EXT","","",null,null],[17,"ATA_CMD_READ_DMA","","",null,null],[17,"ATA_CMD_READ_DMA_EXT","","",null,null],[17,"ATA_CMD_WRITE_PIO","","",null,null],[17,"ATA_CMD_WRITE_PIO_EXT","","",null,null],[17,"ATA_CMD_WRITE_DMA","","",null,null],[17,"ATA_CMD_WRITE_DMA_EXT","","",null,null],[17,"ATA_CMD_CACHE_FLUSH","","",null,null],[17,"ATA_CMD_CACHE_FLUSH_EXT","","",null,null],[17,"ATA_CMD_PACKET","","",null,null],[17,"ATA_CMD_IDENTIFY_PACKET","","",null,null],[17,"ATA_CMD_IDENTIFY","","",null,null],[17,"ATA_IDENT_DEVICETYPE","","",null,null],[17,"ATA_IDENT_CYLINDERS","","",null,null],[17,"ATA_IDENT_HEADS","","",null,null],[17,"ATA_IDENT_SECTORS","","",null,null],[17,"ATA_IDENT_SERIAL","","",null,null],[17,"ATA_IDENT_MODEL","","",null,null],[17,"ATA_IDENT_CAPABILITIES","","",null,null],[17,"ATA_IDENT_FIELDVALID","","",null,null],[17,"ATA_IDENT_MAX_LBA","","",null,null],[17,"ATA_IDENT_COMMANDSETS","","",null,null],[17,"ATA_IDENT_MAX_LBA_EXT","","",null,null],[17,"ATA_MASTER","","",null,null],[17,"ATA_SLAVE","","",null,null],[17,"IDE_ATA","","",null,null],[17,"IDE_ATAPI","","",null,null],[17,"ATA_REG_DATA","","",null,null],[17,"ATA_REG_ERROR","","",null,null],[17,"ATA_REG_FEATURES","","",null,null],[17,"ATA_REG_SECCOUNT0","","",null,null],[17,"ATA_REG_LBA0","","",null,null],[17,"ATA_REG_LBA1","","",null,null],[17,"ATA_REG_LBA2","","",null,null],[17,"ATA_REG_HDDEVSEL","","",null,null],[17,"ATA_REG_COMMAND","","",null,null],[17,"ATA_REG_STATUS","","",null,null],[17,"ATA_REG_SECCOUNT1","","",null,null],[17,"ATA_REG_LBA3","","",null,null],[17,"ATA_REG_LBA4","","",null,null],[17,"ATA_REG_LBA5","","",null,null],[17,"ATA_REG_CONTROL","","",null,null],[17,"ATA_REG_ALTSTATUS","","",null,null],[17,"ATA_REG_DEVADDRESS","","",null,null],[11,"clone","","",56,{"inputs":[{"name":"extent"}],"output":{"name":"extent"}}],[11,"empty","","",56,{"inputs":[{"name":"extent"}],"output":{"name":"bool"}}],[11,"new","","",58,{"inputs":[{"name":"prdt"},{"name":"u16"}],"output":{"name":"self"}}],[11,"drop","","",58,{"inputs":[{"name":"prdt"}],"output":null}],[11,"disks","","",60,{"inputs":[{"name":"ide"},{"name":"pciconfig"}],"output":{"name":"vec"}}],[11,"new","","",59,{"inputs":[{"name":"idedisk"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u8"},{"name":"bool"}],"output":{"name":"option"}}],[11,"ide_read","","",59,{"inputs":[{"name":"idedisk"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"ide_write","","",59,{"inputs":[{"name":"idedisk"},{"name":"u16"},{"name":"u8"}],"output":null}],[11,"ide_poll","","",59,{"inputs":[{"name":"idedisk"},{"name":"bool"}],"output":{"name":"u8"}}],[11,"identify","","Identify",59,{"inputs":[{"name":"idedisk"}],"output":{"name":"bool"}}],[11,"ata_pio_small","","",59,{"inputs":[{"name":"idedisk"},{"name":"u64"},{"name":"u16"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ata_pio","","",59,{"inputs":[{"name":"idedisk"},{"name":"u64"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ata_dma_small","","",59,{"inputs":[{"name":"idedisk"},{"name":"u64"},{"name":"u16"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ata_dma","","",59,{"inputs":[{"name":"idedisk"},{"name":"u64"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"name","","",59,{"inputs":[{"name":"idedisk"}],"output":{"name":"string"}}],[11,"read","","",59,null],[11,"write","","",59,null],[8,"Disk","kernel::disk","",null,null],[10,"name","","",61,{"inputs":[{"name":"disk"}],"output":{"name":"string"}}],[10,"read","","",61,null],[10,"write","","",61,null],[0,"drivers","kernel","Various drivers",null,null],[0,"pci","kernel::drivers","PCI",null,null],[5,"pci_init","kernel::drivers::pci","Initialize PCI session",null,{"inputs":[{"name":"environment"}],"output":null}],[0,"config","","",null,null],[3,"PciConfig","kernel::drivers::pci::config","A PCI configuration",null,null],[12,"bus","","",62,null],[12,"slot","","",62,null],[12,"func","","",62,null],[12,"addr","","",62,null],[12,"data","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"pciconfig"}],"output":{"name":"pciconfig"}}],[11,"new","","Create a new configuration",62,{"inputs":[{"name":"pciconfig"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"address","","",62,{"inputs":[{"name":"pciconfig"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"read","","Read",62,{"inputs":[{"name":"pciconfig"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"write","","Write",62,{"inputs":[{"name":"pciconfig"},{"name":"u8"},{"name":"u32"}],"output":null}],[11,"flag","","",62,{"inputs":[{"name":"pciconfig"},{"name":"u8"},{"name":"u32"},{"name":"bool"}],"output":null}],[0,"common","kernel::drivers::pci","",null,null],[0,"config","kernel::drivers::pci::common","Common PCI constants from the PCI spec",null,null],[17,"PCI_CONFIG_ADDRESS","kernel::drivers::pci::common::config","Legacy PCI Configuration Space Access registers",null,null],[17,"PCI_CONFIG_DATA","","",null,null],[17,"PCI_CONFIG_ADDRESS_ENABLE","","",null,null],[17,"PCI_BUS_OFFSET","","",null,null],[17,"PCI_SLOT_OFFSET","","",null,null],[17,"PCI_FUNC_OFFSET","","",null,null],[17,"PCI_CFG_VENDOR_ID","","PCI Configuration Space registers (256 bytes window)\nIn theory 32 bit aligned access only.\nIn practice, however, things seem to be working even with unaligned access.",null,null],[17,"PCI_CFG_DEVICE_ID","","",null,null],[17,"PCI_CFG_COMMAND","","",null,null],[17,"PCI_CFG_STATUS","","",null,null],[17,"PCI_CFG_REVISION_ID","","",null,null],[17,"PCI_CFG_PROG_INTERFACE","","",null,null],[17,"PCI_CFG_SUBCLASS","","",null,null],[17,"PCI_CFG_BASECLASS","","",null,null],[17,"PCI_CFG_CACHELINE_SIZE","","",null,null],[17,"PCI_CFG_LATENCY_TIMER","","",null,null],[17,"PCI_CFG_HEADER_TYPE","","",null,null],[17,"PCI_CFG_BIST","","",null,null],[17,"PCI_CFG_BAR_1","","",null,null],[17,"PCI_CFG_BAR_2","","",null,null],[17,"PCI_CFG_BAR_3","","",null,null],[17,"PCI_CFG_BAR_4","","",null,null],[17,"PCI_CFG_BAR_5","","",null,null],[17,"PCI_CFG_BAR_6","","",null,null],[17,"PCI_CFG_CARDBUS_CIS_PTR","","",null,null],[17,"PCI_CFG_SUBSYSTEM_VENDOR_ID","","",null,null],[17,"PCI_CFG_SUBSYSTEM_ID","","",null,null],[17,"PCI_CFG_CAPABILITIES_PTR","","",null,null],[17,"PCI_CFG_INTERRUPT_LINE","","",null,null],[17,"CI_CFG_INTERRUPT_PIN","","",null,null],[0,"class","kernel::drivers::pci::common","",null,null],[17,"NONE","kernel::drivers::pci::common::class","PCI Class Codes",null,null],[17,"MASS_STORAGE","","",null,null],[17,"NETWORK","","",null,null],[17,"DISPLAY","","",null,null],[17,"MULTIMEDIA","","",null,null],[17,"MEMORY","","",null,null],[17,"BRIDGE_DEVICE","","",null,null],[17,"COMMUNICATION","","",null,null],[17,"SYSTEM_PERIPHERALS","","",null,null],[17,"INPUT","","",null,null],[17,"DOCKING_STATION","","",null,null],[17,"PROCESSOR","","",null,null],[17,"SERIAL_BUS","","",null,null],[17,"WIRELESS","","",null,null],[17,"INTELLIGENT_IO","","",null,null],[17,"SATTELITE_COMMUNICATION","","",null,null],[17,"ENCRYPTION","","",null,null],[17,"DATA_ACQUISITION","","",null,null],[17,"OTHER","","",null,null],[0,"subclass","kernel::drivers::pci::common","",null,null],[17,"SCSI","kernel::drivers::pci::common::subclass","PCI Mass Storage Subclass Codes",null,null],[17,"IDE","","",null,null],[17,"FLOPPY","","",null,null],[17,"IPI","","",null,null],[17,"RAID","","",null,null],[17,"ATA","","",null,null],[17,"SATA","","",null,null],[17,"SAS","","",null,null],[17,"NVM","","",null,null],[17,"ETHERNET","","PCI Network Subclass Codes",null,null],[17,"INFINIBAND","","",null,null],[17,"FABRIC","","",null,null],[17,"VGA","","PCI Display Subclass Codes",null,null],[17,"XGA","","",null,null],[17,"FIREWIRE","","PCI Serial Bus Subclass Codes",null,null],[17,"USB","","",null,null],[0,"programming_interface","kernel::drivers::pci::common","",null,null],[17,"AHCI","kernel::drivers::pci::common::programming_interface","PCI SATA Programming Interface",null,null],[17,"UHCI","","PCI USB Programming Interface",null,null],[17,"OHCI","","",null,null],[17,"EHCI","","",null,null],[17,"XHCI","","",null,null],[0,"vendorid","kernel::drivers::pci::common","",null,null],[17,"INTEL","kernel::drivers::pci::common::vendorid","",null,null],[17,"REALTEK","","",null,null],[17,"REDHAT","","",null,null],[17,"ILLEGAL","","",null,null],[0,"deviceid","kernel::drivers::pci::common","",null,null],[17,"RTL8139","kernel::drivers::pci::common::deviceid","",null,null],[17,"GBE_82540EM","","",null,null],[17,"AC97_82801AA","","",null,null],[17,"AC97_ICH4","","",null,null],[17,"INTELHDA_ICH6","","",null,null],[0,"init","kernel::drivers::pci","",null,null],[5,"pci_device","kernel::drivers::pci::init","PCI device",null,{"inputs":[{"name":"environment"},{"name":"pciconfig"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u16"},{"name":"u16"}],"output":null}],[5,"pci_init","","Initialize PCI session",null,{"inputs":[{"name":"environment"}],"output":null}],[0,"ps2","kernel::drivers","PS2",null,null],[3,"Ps2","kernel::drivers::ps2","PS2",null,null],[12,"data","","The data",63,null],[12,"cmd","","The command",63,null],[12,"lshift","","Left shift?",63,null],[12,"rshift","","Right shift?",63,null],[12,"caps_lock","","Caps lock?",63,null],[12,"caps_lock_toggle","","Caps lock toggle",63,null],[12,"altgr","","AltGr?",63,null],[12,"mouse_packet","","The mouse packet",63,null],[12,"mouse_i","","Mouse packet index",63,null],[12,"mouse_x","","Mouse point x",63,null],[12,"mouse_y","","Mouse point y",63,null],[12,"layout","","Layout for keyboard\nDefault: English",63,null],[11,"new","","Create new PS2 data",63,{"inputs":[{"name":"ps2"}],"output":{"name":"box"}}],[11,"wait0","","",63,{"inputs":[{"name":"ps2"}],"output":null}],[11,"wait1","","",63,{"inputs":[{"name":"ps2"}],"output":null}],[11,"keyboard_init","","",63,{"inputs":[{"name":"ps2"}],"output":null}],[11,"keyboard_interrupt","","Keyboard interrupt",63,{"inputs":[{"name":"ps2"}],"output":{"name":"option"}}],[11,"mouse_cmd","","",63,{"inputs":[{"name":"ps2"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"mouse_init","","Initialize mouse",63,{"inputs":[{"name":"ps2"}],"output":null}],[11,"mouse_interrupt","","Mouse interrupt",63,{"inputs":[{"name":"ps2"}],"output":{"name":"option"}}],[11,"change_layout","","Function to change the layout of the keyboard",63,{"inputs":[{"name":"ps2"},{"name":"usize"}],"output":null}],[11,"on_irq","","",63,{"inputs":[{"name":"ps2"},{"name":"u8"}],"output":null}],[11,"on_poll","","",63,{"inputs":[{"name":"ps2"}],"output":null}],[0,"rtc","kernel::drivers","RTC",null,null],[3,"Rtc","kernel::drivers::rtc","RTC",null,null],[12,"addr","","",64,null],[12,"data","","",64,null],[5,"cvt_bcd","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"new","","Create new empty RTC",64,{"inputs":[{"name":"rtc"}],"output":{"name":"self"}}],[11,"read","","Read",64,{"inputs":[{"name":"rtc"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wait","","Wait",64,{"inputs":[{"name":"rtc"}],"output":null}],[11,"time","","Get time",64,{"inputs":[{"name":"rtc"}],"output":{"name":"duration"}}],[0,"serial","kernel::drivers","Serial",null,null],[3,"SerialInfo","kernel::drivers::serial","",null,null],[12,"ports","","",65,null],[3,"Serial","","Serial",null,null],[12,"data","","",66,null],[12,"status","","",66,null],[12,"irq","","",66,null],[12,"escape","","",66,null],[12,"cursor_control","","",66,null],[17,"SERIALINFO","","",null,null],[11,"new","","Create new",66,{"inputs":[{"name":"serial"},{"name":"u16"},{"name":"u8"}],"output":{"name":"box"}}],[11,"on_irq","","",66,{"inputs":[{"name":"serial"},{"name":"u8"}],"output":null}],[0,"kb_layouts","kernel::drivers","Layouts",null,null],[0,"layouts","kernel::drivers::kb_layouts","",null,null],[4,"Layout","kernel::drivers::kb_layouts::layouts","Public keyboard layouts\nThe layout can be:\n*   English\n*   French\n*   German",null,null],[13,"English","","",67,null],[13,"French","","",67,null],[13,"German","","",67,null],[5,"get_scancode_from_layout","","Function to get the scancode from the current layout",null,null],[5,"get_special_keys_from_layout","","",null,null],[5,"char_for_scancode","","Function to return the character associated with the scancode, and the layout",null,{"inputs":[{"name":"u8"},{"name":"bool"},{"name":"bool"},{"name":"layout"}],"output":{"name":"char"}}],[7,"SCANCODES_EN","","Scancodes for English keyboards",null,null],[7,"SCANCODES_EXTRA_EN","","Special keys, not present on every keyboard",null,null],[7,"SCANCODES_FR","","Scancodes for French keyboards",null,null],[7,"SCANCODES_EXTRA_FR","","Special keys, not present on every keyboard",null,null],[7,"SCANCODES_DE","","Scancodes for German keyboards",null,null],[7,"SCANCODES_EXTRA_DE","","Special keys, not present on every keyboard",null,null],[0,"env","kernel","Environment",null,null],[3,"Environment","kernel::env","The kernel environment",null,null],[12,"contexts","","Contexts",68,null],[12,"clock_realtime","","Clock realtime (default)",68,null],[12,"clock_monotonic","","Monotonic clock",68,null],[12,"console","","Default console",68,null],[12,"events","","Pending events",68,null],[12,"schemes","","Schemes",68,null],[12,"interrupts","","Interrupt stats",68,null],[0,"console","","The Kernel Console",null,null],[3,"Console","kernel::env::console","",null,null],[12,"display","","",69,null],[12,"point","","",69,null],[12,"foreground","","",69,null],[12,"background","","",69,null],[12,"instant","","",69,null],[12,"draw","","",69,null],[12,"redraw","","",69,null],[12,"command","","",69,null],[12,"escape","","",69,null],[12,"escape_sequence","","",69,null],[12,"sequence","","",69,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[11,"new","","",69,{"inputs":[{"name":"console"}],"output":{"name":"console"}}],[11,"code","","",69,{"inputs":[{"name":"console"},{"name":"char"}],"output":null}],[11,"character","","",69,{"inputs":[{"name":"console"},{"name":"char"}],"output":null}],[11,"write","","",69,null],[0,"scheme","kernel::env","New scheme module",null,null],[3,"SchemeInner","kernel::env::scheme","",null,null],[12,"name","","",70,null],[12,"context","","",70,null],[12,"next_id","","",70,null],[12,"todo","","",70,null],[12,"done","","",70,null],[3,"SchemeResource","","",null,null],[12,"inner","","",71,null],[12,"file_id","","",71,null],[3,"SchemeServerResource","","",null,null],[12,"inner","","",72,null],[3,"Scheme","","Scheme has to be wrapped",null,null],[12,"name","","",73,null],[12,"inner","","",73,null],[11,"new","","",70,null],[11,"call","","",70,{"inputs":[{"name":"schemeinner"},{"name":"weak"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",70,{"inputs":[{"name":"schemeinner"}],"output":null}],[11,"call","","",71,{"inputs":[{"name":"schemeresource"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"dup","","Duplicate the resource",71,{"inputs":[{"name":"schemeresource"}],"output":{"name":"result"}}],[11,"url","","Return the url of this resource",71,{"inputs":[{"name":"schemeresource"}],"output":{"name":"url"}}],[11,"read","","Read data to buffer",71,null],[11,"write","","Write to resource",71,null],[11,"seek","","Seek",71,{"inputs":[{"name":"schemeresource"},{"name":"resourceseek"}],"output":{"name":"result"}}],[11,"sync","","Sync the resource",71,{"inputs":[{"name":"schemeresource"}],"output":{"name":"result"}}],[11,"truncate","","",71,{"inputs":[{"name":"schemeresource"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",71,{"inputs":[{"name":"schemeresource"}],"output":null}],[11,"dup","","Duplicate the resource",72,{"inputs":[{"name":"schemeserverresource"}],"output":{"name":"result"}}],[11,"url","","Return the url of this resource",72,{"inputs":[{"name":"schemeserverresource"}],"output":{"name":"url"}}],[11,"read","","Read data to buffer",72,null],[11,"write","","Write to resource",72,null],[11,"seek","","Seek",72,{"inputs":[{"name":"schemeserverresource"},{"name":"resourceseek"}],"output":{"name":"result"}}],[11,"sync","","Sync the resource",72,{"inputs":[{"name":"schemeserverresource"}],"output":{"name":"result"}}],[11,"truncate","","",72,{"inputs":[{"name":"schemeserverresource"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new","","",73,{"inputs":[{"name":"scheme"},{"name":"string"}],"output":{"name":"result"}}],[11,"call","","",73,{"inputs":[{"name":"scheme"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"on_irq","","",73,{"inputs":[{"name":"scheme"},{"name":"u8"}],"output":null}],[11,"on_poll","","",73,{"inputs":[{"name":"scheme"}],"output":null}],[11,"scheme","","",73,{"inputs":[{"name":"scheme"}],"output":{"name":"str"}}],[11,"open","","",73,{"inputs":[{"name":"scheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unlink","","",73,{"inputs":[{"name":"scheme"},{"name":"url"}],"output":{"name":"result"}}],[11,"new","kernel::env","",68,{"inputs":[{"name":"environment"}],"output":{"name":"box"}}],[11,"on_irq","","",68,{"inputs":[{"name":"environment"},{"name":"u8"}],"output":null}],[11,"on_poll","","",68,{"inputs":[{"name":"environment"}],"output":null}],[11,"open","","Open a new resource",68,{"inputs":[{"name":"environment"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unlink","","Unlink a resource",68,{"inputs":[{"name":"environment"},{"name":"url"}],"output":{"name":"result"}}],[0,"fs","kernel","Filesystems",null,null],[0,"redoxfs","kernel::fs","",null,null],[3,"FileSystem","kernel::fs::redoxfs","A file system",null,null],[12,"disk","","",74,null],[12,"header","","",74,null],[12,"nodes","","",74,null],[0,"header","","",null,null],[3,"Header","kernel::fs::redoxfs::header","The header of the fs",null,null],[12,"signature","","",75,null],[12,"version","","",75,null],[12,"free_space","","",75,null],[12,"padding","","",75,null],[12,"extents","","",75,null],[11,"valid","","",75,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[0,"node","kernel::fs::redoxfs","",null,null],[3,"NodeData","kernel::fs::redoxfs::node","Data for a node",null,null],[12,"name","","",76,null],[12,"extents","","",76,null],[3,"Node","","A file node",null,null],[12,"block","","",77,null],[12,"name","","",77,null],[12,"extents","","",77,null],[11,"new","","Create a new file node from an address and some data",77,{"inputs":[{"name":"node"},{"name":"u64"},{"name":"nodedata"}],"output":{"name":"self"}}],[11,"data","","",77,{"inputs":[{"name":"node"}],"output":{"name":"nodedata"}}],[11,"clone","","",77,{"inputs":[{"name":"node"}],"output":{"name":"self"}}],[11,"from_disk","kernel::fs::redoxfs","Create a file system from a disk",74,{"inputs":[{"name":"filesystem"},{"name":"box"}],"output":{"name":"option"}}],[11,"node","","Get node with a given filename",74,{"inputs":[{"name":"filesystem"},{"name":"str"}],"output":{"name":"option"}}],[11,"list","","List nodes in a given directory",74,{"inputs":[{"name":"filesystem"},{"name":"str"}],"output":{"name":"vec"}}],[0,"graphics","kernel","Various graphical methods",null,null],[0,"color","kernel::graphics","Color struct",null,null],[3,"Color","kernel::graphics::color","A color",null,null],[12,"data","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"new","","Create a new color from RGB",78,{"inputs":[{"name":"color"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[0,"size","kernel::graphics","Size struct",null,null],[3,"Size","kernel::graphics::size","A size",null,null],[12,"width","","",79,null],[12,"height","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"size"}],"output":{"name":"size"}}],[11,"new","","Create a new size",79,{"inputs":[{"name":"size"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"add","","",79,{"inputs":[{"name":"size"},{"name":"size"}],"output":{"name":"output"}}],[11,"sub","","",79,{"inputs":[{"name":"size"},{"name":"size"}],"output":{"name":"output"}}],[0,"point","kernel::graphics","Point struct",null,null],[3,"Point","kernel::graphics::point","A point",null,null],[12,"x","","",80,null],[12,"y","","",80,null],[11,"clone","","",80,{"inputs":[{"name":"point"}],"output":{"name":"point"}}],[11,"new","","Create a new point",80,{"inputs":[{"name":"point"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"add","","",80,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"output"}}],[11,"sub","","",80,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"output"}}],[0,"display","kernel::graphics","Display struct",null,null],[3,"VBEModeInfo","kernel::graphics::display","The info of the VBE mode",null,null],[12,"attributes","","",81,null],[12,"win_a","","",81,null],[12,"win_b","","",81,null],[12,"granularity","","",81,null],[12,"winsize","","",81,null],[12,"segment_a","","",81,null],[12,"segment_b","","",81,null],[12,"winfuncptr","","",81,null],[12,"bytesperscanline","","",81,null],[12,"xresolution","","",81,null],[12,"yresolution","","",81,null],[12,"xcharsize","","",81,null],[12,"ycharsize","","",81,null],[12,"numberofplanes","","",81,null],[12,"bitsperpixel","","",81,null],[12,"numberofbanks","","",81,null],[12,"memorymodel","","",81,null],[12,"banksize","","",81,null],[12,"numberofimagepages","","",81,null],[12,"unused","","",81,null],[12,"redmasksize","","",81,null],[12,"redfieldposition","","",81,null],[12,"greenmasksize","","",81,null],[12,"greenfieldposition","","",81,null],[12,"bluemasksize","","",81,null],[12,"bluefieldposition","","",81,null],[12,"rsvdmasksize","","",81,null],[12,"rsvdfieldposition","","",81,null],[12,"directcolormodeinfo","","",81,null],[12,"physbaseptr","","",81,null],[12,"offscreenmemoryoffset","","",81,null],[12,"offscreenmemsize","","",81,null],[3,"Display","","A display",null,null],[12,"offscreen","","",82,null],[12,"onscreen","","",82,null],[12,"size","","",82,null],[12,"bytesperrow","","",82,null],[12,"width","","",82,null],[12,"height","","",82,null],[12,"root","","",82,null],[17,"VBEMODEINFO","","",null,null],[11,"clone","","",81,{"inputs":[{"name":"vbemodeinfo"}],"output":{"name":"vbemodeinfo"}}],[11,"root","","",82,{"inputs":[{"name":"display"}],"output":{"name":"option"}}],[11,"new","","Create a new display",82,{"inputs":[{"name":"display"},{"name":"usize"},{"name":"usize"}],"output":{"name":"box"}}],[11,"set_run","","",82,{"inputs":[{"name":"display"},{"name":"u32"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"copy_run","","",82,{"inputs":[{"name":"display"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"set","","Set the color",82,{"inputs":[{"name":"display"},{"name":"color"}],"output":null}],[11,"scroll","","Scroll the display",82,{"inputs":[{"name":"display"},{"name":"usize"}],"output":null}],[11,"flip","","Flip the display",82,{"inputs":[{"name":"display"}],"output":null}],[11,"rect","","Draw a rectangle",82,{"inputs":[{"name":"display"},{"name":"point"},{"name":"size"},{"name":"color"}],"output":null}],[11,"pixel","","Set the color of a pixel",82,{"inputs":[{"name":"display"},{"name":"point"},{"name":"color"}],"output":null}],[11,"char","","Draw a char",82,{"inputs":[{"name":"display"},{"name":"point"},{"name":"char"},{"name":"color"}],"output":null}],[11,"drop","","",82,{"inputs":[{"name":"display"}],"output":null}],[7,"FONT","kernel::graphics","",null,null],[0,"panic","kernel","Panic",null,null],[3,"DebugStream","kernel::panic","",null,null],[5,"panic_fmt","","",null,{"inputs":[{"name":"arguments"},{"name":"str"},{"name":"u32"}],"output":null}],[11,"write_str","","",83,{"inputs":[{"name":"debugstream"},{"name":"str"}],"output":{"name":"result"}}],[0,"schemes","kernel","Schemes",null,null],[3,"Url","kernel::schemes","An URL, see wiki",null,null],[12,"string","","",84,null],[3,"VecResource","","A vector resource",null,null],[12,"url","","",85,null],[12,"vec","","",85,null],[12,"seek","","",85,null],[4,"ResourceSeek","","Resource seek",null,null],[13,"Start","","Start point",86,null],[13,"Current","","Current point",86,null],[13,"End","","End point",86,null],[0,"context","","Context scheme",null,null],[3,"ContextScheme","kernel::schemes::context","",null,null],[11,"scheme","","",87,{"inputs":[{"name":"contextscheme"}],"output":{"name":"str"}}],[11,"open","","",87,{"inputs":[{"name":"contextscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[0,"debug","kernel::schemes","Debug scheme",null,null],[3,"DebugResource","kernel::schemes::debug","A debug resource",null,null],[12,"command","","",88,null],[12,"line_toggle","","",88,null],[3,"DebugScheme","","",null,null],[11,"dup","","",88,{"inputs":[{"name":"debugresource"}],"output":{"name":"result"}}],[11,"url","","",88,{"inputs":[{"name":"debugresource"}],"output":{"name":"url"}}],[11,"read","","",88,null],[11,"write","","",88,null],[11,"sync","","",88,{"inputs":[{"name":"debugresource"}],"output":{"name":"result"}}],[11,"new","","",89,{"inputs":[{"name":"debugscheme"}],"output":{"name":"box"}}],[11,"scheme","","",89,{"inputs":[{"name":"debugscheme"}],"output":{"name":"str"}}],[11,"open","","",89,{"inputs":[{"name":"debugscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[0,"display","kernel::schemes","Display Scheme",null,null],[3,"DisplayScheme","kernel::schemes::display","",null,null],[3,"DisplayResource","","A display resource",null,null],[12,"display","","The display",90,null],[12,"seek","","Seek",90,null],[11,"url","","Return the URL for display resource",90,{"inputs":[{"name":"displayresource"}],"output":{"name":"url"}}],[11,"read","","",90,null],[11,"write","","",90,null],[11,"seek","","",90,{"inputs":[{"name":"displayresource"},{"name":"resourceseek"}],"output":{"name":"result"}}],[11,"sync","","",90,{"inputs":[{"name":"displayresource"}],"output":{"name":"result"}}],[11,"scheme","","",91,{"inputs":[{"name":"displayscheme"}],"output":{"name":"str"}}],[11,"open","","",91,{"inputs":[{"name":"displayscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[0,"file","kernel::schemes","File scheme",null,null],[3,"FileResource","kernel::schemes::file","A file resource",null,null],[12,"scheme","","",92,null],[12,"node","","",92,null],[12,"vec","","",92,null],[12,"seek","","",92,null],[12,"dirty","","",92,null],[3,"FileScheme","","A file scheme (pci + fs)",null,null],[12,"fs","","",93,null],[11,"dup","","",92,{"inputs":[{"name":"fileresource"}],"output":{"name":"result"}}],[11,"url","","",92,{"inputs":[{"name":"fileresource"}],"output":{"name":"url"}}],[11,"read","","",92,null],[11,"write","","",92,null],[11,"seek","","",92,{"inputs":[{"name":"fileresource"},{"name":"resourceseek"}],"output":{"name":"result"}}],[11,"sync","","",92,{"inputs":[{"name":"fileresource"}],"output":{"name":"result"}}],[11,"truncate","","",92,{"inputs":[{"name":"fileresource"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",92,{"inputs":[{"name":"fileresource"}],"output":null}],[11,"new","","Create a new file scheme from an array of Disks",93,{"inputs":[{"name":"filescheme"},{"name":"vec"}],"output":{"name":"option"}}],[11,"on_irq","","",93,{"inputs":[{"name":"filescheme"},{"name":"u8"}],"output":null}],[11,"on_poll","","",93,{"inputs":[{"name":"filescheme"}],"output":null}],[11,"scheme","","",93,{"inputs":[{"name":"filescheme"}],"output":{"name":"str"}}],[11,"open","","",93,{"inputs":[{"name":"filescheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unlink","","",93,{"inputs":[{"name":"filescheme"},{"name":"url"}],"output":{"name":"result"}}],[0,"interrupt","kernel::schemes","Interrupt scheme",null,null],[3,"InterruptScheme","kernel::schemes::interrupt","",null,null],[7,"IRQ_NAME","","",null,null],[11,"scheme","","",94,{"inputs":[{"name":"interruptscheme"}],"output":{"name":"str"}}],[11,"open","","",94,{"inputs":[{"name":"interruptscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[0,"memory","kernel::schemes","Memory scheme",null,null],[3,"MemoryScheme","kernel::schemes::memory","A memory scheme",null,null],[11,"scheme","","",95,{"inputs":[{"name":"memoryscheme"}],"output":{"name":"str"}}],[11,"open","","",95,{"inputs":[{"name":"memoryscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[0,"pipe","kernel::schemes","Pipes",null,null],[3,"PipeRead","kernel::schemes::pipe","Read side of a pipe",null,null],[12,"vec","","",96,null],[12,"eof_toggle","","",96,null],[3,"PipeWrite","","Read side of a pipe",null,null],[12,"vec","","",97,null],[11,"new","","",96,{"inputs":[{"name":"piperead"}],"output":{"name":"self"}}],[11,"dup","","",96,{"inputs":[{"name":"piperead"}],"output":{"name":"result"}}],[11,"url","","",96,{"inputs":[{"name":"piperead"}],"output":{"name":"url"}}],[11,"read","","",96,null],[11,"new","","",97,{"inputs":[{"name":"pipewrite"},{"name":"piperead"}],"output":{"name":"self"}}],[11,"dup","","",97,{"inputs":[{"name":"pipewrite"}],"output":{"name":"result"}}],[11,"url","","",97,{"inputs":[{"name":"pipewrite"}],"output":{"name":"url"}}],[11,"write","","",97,null],[0,"test","kernel::schemes","Tests",null,null],[3,"TestScheme","kernel::schemes::test","",null,null],[5,"meta_test_woah_fail","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"meta_test_woah","","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"tests","","",null,null],[0,"get_slice","kernel::schemes::test::tests","",null,null],[5,"test","kernel::schemes::test::tests::get_slice","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"scheme","kernel::schemes::test","",98,{"inputs":[{"name":"testscheme"}],"output":{"name":"str"}}],[11,"open","","",98,{"inputs":[{"name":"testscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[6,"Result","kernel::schemes","",null,null],[8,"KScheme","","",null,null],[11,"on_irq","","",99,{"inputs":[{"name":"kscheme"},{"name":"u8"}],"output":null}],[11,"on_poll","","",99,{"inputs":[{"name":"kscheme"}],"output":null}],[11,"scheme","","",99,{"inputs":[{"name":"kscheme"}],"output":{"name":"str"}}],[11,"open","","",99,{"inputs":[{"name":"kscheme"},{"name":"url"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unlink","","",99,{"inputs":[{"name":"kscheme"},{"name":"url"}],"output":{"name":"result"}}],[8,"Resource","","A system resource",null,null],[11,"dup","","Duplicate the resource",100,{"inputs":[{"name":"resource"}],"output":{"name":"result"}}],[10,"url","","Return the url of this resource",100,{"inputs":[{"name":"resource"}],"output":{"name":"url"}}],[11,"read","","Read data to buffer",100,null],[11,"write","","Write to resource",100,null],[11,"seek","","Seek",100,{"inputs":[{"name":"resource"},{"name":"resourceseek"}],"output":{"name":"result"}}],[11,"sync","","Sync the resource",100,{"inputs":[{"name":"resource"}],"output":{"name":"result"}}],[11,"truncate","","",100,{"inputs":[{"name":"resource"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_to_end","","",100,{"inputs":[{"name":"resource"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"resourceseek"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"resourceseek"}],"output":{"name":"resourceseek"}}],[11,"new","","Create a new empty URL",84,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[11,"from_str","","Create an URL from a string literal",84,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_string","","Create an URL from `String`",84,{"inputs":[{"name":"url"},{"name":"string"}],"output":{"name":"self"}}],[11,"to_string","","Convert to string",84,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"len","","Get the length of this URL",84,{"inputs":[{"name":"url"}],"output":{"name":"usize"}}],[11,"open","","Open this URL (returns a resource)",84,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"create","","Create this URL (returns a resource)",84,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"scheme","","Return the scheme of this url",84,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"reference","","Get the reference (after the ':') of the url",84,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"clone","","",84,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[11,"new","","",85,{"inputs":[{"name":"vecresource"},{"name":"url"},{"name":"vec"}],"output":{"name":"self"}}],[11,"inner","","",85,{"inputs":[{"name":"vecresource"}],"output":{"name":"vec"}}],[11,"dup","","",85,{"inputs":[{"name":"vecresource"}],"output":{"name":"result"}}],[11,"url","","",85,{"inputs":[{"name":"vecresource"}],"output":{"name":"url"}}],[11,"read","","",85,null],[11,"write","","",85,null],[11,"seek","","",85,{"inputs":[{"name":"vecresource"},{"name":"resourceseek"}],"output":{"name":"result"}}],[11,"sync","","",85,{"inputs":[{"name":"vecresource"}],"output":{"name":"result"}}],[11,"truncate","","",85,{"inputs":[{"name":"vecresource"},{"name":"usize"}],"output":{"name":"result"}}],[0,"syscall","kernel","System calls",null,null],[0,"execute","kernel::syscall","",null,null],[5,"execute_inner","kernel::syscall::execute","",null,{"inputs":[{"name":"url"},{"name":"vec"}],"output":{"name":"result"}}],[5,"execute_outer","","",null,null],[5,"execute","","Execute an executable",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"handle","kernel::syscall","",null,null],[5,"c_string_to_slice","kernel::syscall::handle","Helper function for handling C strings, please do not copy it or make it pub or change it",null,null],[5,"c_array_to_slice","","Helper function for handling C strings, please do not copy it or make it pub or change it",null,null],[5,"do_sys_debug","","",null,null],[5,"do_sys_brk","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_chdir","","",null,null],[5,"do_sys_clone","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_close","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_clock_gettime","","",null,null],[5,"do_sys_dup","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_execve","","",null,null],[5,"do_sys_exit","","Exit context",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"do_sys_fpath","","",null,null],[5,"do_sys_fsync","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_ftruncate","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_getpid","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"do_sys_lseek","","",null,{"inputs":[{"name":"usize"},{"name":"isize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_mkdir","","",null,null],[5,"do_sys_nanosleep","","",null,null],[5,"do_sys_open","","",null,null],[5,"do_sys_pipe2","","",null,null],[5,"do_sys_read","","",null,null],[5,"do_sys_unlink","","",null,null],[5,"do_sys_waitpid","","",null,null],[5,"do_sys_write","","",null,null],[5,"do_sys_alloc","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_realloc","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_realloc_inplace","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"do_sys_unalloc","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"syscall_handle","","",null,{"inputs":[{"name":"regs"}],"output":null}],[0,"usb","kernel","USB input/output",null,null],[4,"Packet","kernel::usb","",null,null],[13,"Setup","","",101,null],[13,"In","","",101,null],[13,"Out","","",101,null],[4,"Pipe","","",null,null],[13,"Control","","",102,null],[13,"Interrupt","","",102,null],[13,"Isochronous","","",102,null],[13,"Bulk","","",102,null],[0,"desc","","",null,null],[3,"DeviceDescriptor","kernel::usb::desc","",null,null],[12,"length","","",103,null],[12,"descriptor_type","","",103,null],[12,"usb_version","","",103,null],[12,"class","","",103,null],[12,"sub_class","","",103,null],[12,"protocol","","",103,null],[12,"max_packet_size","","",103,null],[12,"vendor","","",103,null],[12,"product","","",103,null],[12,"release","","",103,null],[12,"manufacturer_string","","",103,null],[12,"product_string","","",103,null],[12,"serial_string","","",103,null],[12,"configurations","","",103,null],[3,"ConfigDescriptor","","",null,null],[12,"length","","",104,null],[12,"descriptor_type","","",104,null],[12,"total_length","","",104,null],[12,"interfaces","","",104,null],[12,"number","","",104,null],[12,"string","","",104,null],[12,"attributes","","",104,null],[12,"max_power","","",104,null],[3,"StringDescriptor","","",null,null],[12,"length","","",105,null],[12,"descriptor_type","","",105,null],[12,"data","","",105,null],[3,"InterfaceDescriptor","","",null,null],[12,"length","","",106,null],[12,"descriptor_type","","",106,null],[12,"number","","",106,null],[12,"alternate","","",106,null],[12,"endpoints","","",106,null],[12,"class","","",106,null],[12,"sub_class","","",106,null],[12,"protocol","","",106,null],[12,"string","","",106,null],[3,"EndpointDescriptor","","",null,null],[12,"length","","",107,null],[12,"descriptor_type","","",107,null],[12,"address","","",107,null],[12,"attributes","","",107,null],[12,"max_packet_size","","",107,null],[12,"interval","","",107,null],[3,"HIDDescriptor","","",null,null],[12,"length","","",108,null],[12,"descriptor_type","","",108,null],[12,"hid_version","","",108,null],[12,"country_code","","",108,null],[12,"descriptors","","",108,null],[12,"sub_descriptor_type","","",108,null],[12,"sub_descriptor_length","","",108,null],[17,"DESC_DEV","","",null,null],[17,"DESC_CFG","","",null,null],[17,"DESC_STR","","",null,null],[17,"DESC_INT","","",null,null],[17,"DESC_END","","",null,null],[17,"DESC_HID","","",null,null],[11,"default","","",103,{"inputs":[{"name":"devicedescriptor"}],"output":{"name":"devicedescriptor"}}],[11,"fmt","","",103,{"inputs":[{"name":"devicedescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"devicedescriptor"}],"output":{"name":"devicedescriptor"}}],[11,"default","","",104,{"inputs":[{"name":"configdescriptor"}],"output":{"name":"configdescriptor"}}],[11,"fmt","","",104,{"inputs":[{"name":"configdescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"configdescriptor"}],"output":{"name":"configdescriptor"}}],[11,"default","","",105,{"inputs":[{"name":"stringdescriptor"}],"output":{"name":"stringdescriptor"}}],[11,"fmt","","",105,{"inputs":[{"name":"stringdescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"stringdescriptor"}],"output":{"name":"stringdescriptor"}}],[11,"str","","",105,{"inputs":[{"name":"stringdescriptor"}],"output":{"name":"str"}}],[11,"default","","",106,{"inputs":[{"name":"interfacedescriptor"}],"output":{"name":"interfacedescriptor"}}],[11,"fmt","","",106,{"inputs":[{"name":"interfacedescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"interfacedescriptor"}],"output":{"name":"interfacedescriptor"}}],[11,"default","","",107,{"inputs":[{"name":"endpointdescriptor"}],"output":{"name":"endpointdescriptor"}}],[11,"fmt","","",107,{"inputs":[{"name":"endpointdescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"endpointdescriptor"}],"output":{"name":"endpointdescriptor"}}],[11,"default","","",108,{"inputs":[{"name":"hiddescriptor"}],"output":{"name":"hiddescriptor"}}],[11,"fmt","","",108,{"inputs":[{"name":"hiddescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"hiddescriptor"}],"output":{"name":"hiddescriptor"}}],[0,"ehci","kernel::usb","",null,null],[3,"Qtd","kernel::usb::ehci","",null,null],[12,"next","","",109,null],[12,"next_alt","","",109,null],[12,"token","","",109,null],[12,"buffers","","",109,null],[3,"QueueHead","","",null,null],[12,"next","","",110,null],[12,"characteristics","","",110,null],[12,"capabilities","","",110,null],[12,"qtd_ptr","","",110,null],[12,"qtd","","",110,null],[3,"Ehci","","",null,null],[12,"pci","","",111,null],[12,"base","","",111,null],[12,"irq","","",111,null],[11,"default","","",109,{"inputs":[{"name":"qtd"}],"output":{"name":"qtd"}}],[11,"fmt","","",109,{"inputs":[{"name":"qtd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"qtd"}],"output":{"name":"qtd"}}],[11,"on_irq","","",111,{"inputs":[{"name":"ehci"},{"name":"u8"}],"output":null}],[11,"new","","",111,{"inputs":[{"name":"ehci"},{"name":"pciconfig"}],"output":{"name":"box"}}],[11,"init","","",111,{"inputs":[{"name":"ehci"}],"output":null}],[11,"msg","","",111,null],[0,"hci","kernel::usb","",null,null],[8,"Hci","kernel::usb::hci","",null,null],[10,"msg","","",112,null],[11,"descriptor","","",112,{"inputs":[{"name":"hci"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"device","","",112,{"inputs":[{"name":"hci"},{"name":"u8"}],"output":null}],[0,"ohci","kernel::usb","",null,null],[3,"Gtd","kernel::usb::ohci","",null,null],[12,"flags","","",113,null],[12,"buffer","","",113,null],[12,"next","","",113,null],[12,"end","","",113,null],[3,"Ed","","",null,null],[12,"flags","","",114,null],[12,"tail","","",114,null],[12,"head","","",114,null],[12,"next","","",114,null],[3,"OhciRegs","","",null,null],[12,"revision","","",115,null],[12,"control","","",115,null],[12,"cmd_sts","","",115,null],[12,"int_sts","","",115,null],[12,"int_en","","",115,null],[12,"int_dis","","",115,null],[12,"hcca","","",115,null],[12,"period_current","","",115,null],[12,"control_head","","",115,null],[12,"control_current","","",115,null],[12,"bulk_head","","",115,null],[12,"bulk_current","","",115,null],[12,"done_head","","",115,null],[12,"fm_interval","","",115,null],[12,"fm_remain","","",115,null],[12,"fm_num","","",115,null],[12,"periodic_start","","",115,null],[12,"ls_thresh","","",115,null],[12,"rh_desc_a","","",115,null],[12,"rh_desc_b","","",115,null],[12,"rh_sts","","",115,null],[12,"port_sts","","",115,null],[3,"OhciHcca","","",null,null],[12,"interrupt_table","","",116,null],[12,"frame_number","","",116,null],[12,"padding","","",116,null],[12,"done_head","","",116,null],[12,"reserved","","",116,null],[3,"Ohci","","",null,null],[12,"regs","","",117,null],[12,"hcca","","",117,null],[12,"irq","","",117,null],[17,"CTRL_CBSR","","",null,null],[17,"CTRL_PLE","","",null,null],[17,"CTRL_IE","","",null,null],[17,"CTRL_CLE","","",null,null],[17,"CTRL_BLE","","",null,null],[17,"CTRL_HCFS","","",null,null],[17,"CTRL_IR","","",null,null],[17,"CTRL_RWC","","",null,null],[17,"CTRL_RWE","","",null,null],[17,"CMD_STS_HCR","","",null,null],[17,"CMD_STS_CLF","","",null,null],[17,"CMD_STS_BLF","","",null,null],[17,"CMD_STS_OCR","","",null,null],[17,"PORT_STS_CCS","","",null,null],[17,"PORT_STS_PES","","",null,null],[17,"PORT_STS_PSS","","",null,null],[17,"PORT_STS_POCI","","",null,null],[17,"PORT_STS_PPS","","",null,null],[17,"PORT_STS_LSDA","","",null,null],[17,"PORT_STS_CSC","","",null,null],[17,"PORT_STS_PESC","","",null,null],[17,"PORT_STS_PSSC","","",null,null],[17,"PORT_STS_OCIC","","",null,null],[17,"PORT_STS_PRSC","","",null,null],[11,"default","","",113,{"inputs":[{"name":"gtd"}],"output":{"name":"gtd"}}],[11,"fmt","","",113,{"inputs":[{"name":"gtd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"gtd"}],"output":{"name":"gtd"}}],[11,"default","","",114,{"inputs":[{"name":"ed"}],"output":{"name":"ed"}}],[11,"fmt","","",114,{"inputs":[{"name":"ed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"ed"}],"output":{"name":"ed"}}],[11,"on_irq","","",117,{"inputs":[{"name":"ohci"},{"name":"u8"}],"output":null}],[11,"on_poll","","",117,{"inputs":[{"name":"ohci"}],"output":null}],[11,"new","","",117,{"inputs":[{"name":"ohci"},{"name":"pciconfig"}],"output":{"name":"box"}}],[11,"init","","",117,{"inputs":[{"name":"ohci"}],"output":null}],[11,"msg","","",117,null],[0,"setup","kernel::usb","",null,null],[3,"Setup","kernel::usb::setup","",null,null],[12,"request_type","","",118,null],[12,"request","","",118,null],[12,"value","","",118,null],[12,"index","","",118,null],[12,"len","","",118,null],[11,"default","","",118,{"inputs":[{"name":"setup"}],"output":{"name":"setup"}}],[11,"fmt","","",118,{"inputs":[{"name":"setup"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"setup"}],"output":{"name":"setup"}}],[11,"get_status","","",118,{"inputs":[{"name":"setup"}],"output":{"name":"setup"}}],[11,"clear_feature","","",118,{"inputs":[{"name":"setup"},{"name":"u16"}],"output":{"name":"setup"}}],[11,"set_feature","","",118,{"inputs":[{"name":"setup"},{"name":"u16"}],"output":{"name":"setup"}}],[11,"set_address","","",118,{"inputs":[{"name":"setup"},{"name":"u8"}],"output":{"name":"setup"}}],[11,"get_descriptor","","",118,{"inputs":[{"name":"setup"},{"name":"u8"},{"name":"u8"},{"name":"u16"},{"name":"u16"}],"output":{"name":"setup"}}],[11,"set_descriptor","","",118,{"inputs":[{"name":"setup"},{"name":"u8"},{"name":"u8"},{"name":"u16"},{"name":"u16"}],"output":{"name":"setup"}}],[11,"get_configuration","","",118,{"inputs":[{"name":"setup"}],"output":{"name":"setup"}}],[11,"set_configuration","","",118,{"inputs":[{"name":"setup"},{"name":"u8"}],"output":{"name":"setup"}}],[0,"uhci","kernel::usb","",null,null],[3,"Uhci","kernel::usb::uhci","",null,null],[12,"base","","",119,null],[12,"irq","","",119,null],[12,"frame_list","","",119,null],[3,"Td","","",null,null],[12,"link_ptr","","",120,null],[12,"ctrl_sts","","",120,null],[12,"token","","",120,null],[12,"buffer","","",120,null],[3,"Qh","","",null,null],[12,"head_ptr","","",121,null],[12,"element_ptr","","",121,null],[11,"on_irq","","",119,{"inputs":[{"name":"uhci"},{"name":"u8"}],"output":null}],[11,"on_poll","","",119,{"inputs":[{"name":"uhci"}],"output":null}],[11,"default","","",120,{"inputs":[{"name":"td"}],"output":{"name":"td"}}],[11,"fmt","","",120,{"inputs":[{"name":"td"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"td"}],"output":{"name":"td"}}],[11,"default","","",121,{"inputs":[{"name":"qh"}],"output":{"name":"qh"}}],[11,"fmt","","",121,{"inputs":[{"name":"qh"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"qh"}],"output":{"name":"qh"}}],[11,"new","","",119,{"inputs":[{"name":"uhci"},{"name":"pciconfig"}],"output":{"name":"box"}}],[11,"init","","",119,{"inputs":[{"name":"uhci"}],"output":null}],[11,"msg","","",119,null],[0,"xhci","kernel::usb","",null,null],[3,"Ste","kernel::usb::xhci","",null,null],[12,"ptr","","",122,null],[12,"length","","",122,null],[3,"Trb","","",null,null],[12,"data","","",123,null],[12,"status","","",123,null],[12,"control","","",123,null],[3,"Xhci","","",null,null],[12,"pci","","",124,null],[12,"base","","",124,null],[12,"irq","","",124,null],[11,"new","","",123,{"inputs":[{"name":"trb"}],"output":{"name":"self"}}],[11,"from_type","","",123,{"inputs":[{"name":"trb"},{"name":"u32"}],"output":{"name":"self"}}],[11,"on_irq","","",124,{"inputs":[{"name":"xhci"},{"name":"u8"}],"output":null}],[11,"new","","",124,{"inputs":[{"name":"xhci"},{"name":"pciconfig"}],"output":{"name":"box"}}],[11,"init","","",124,{"inputs":[{"name":"xhci"}],"output":null}],[11,"fmt","kernel::usb","",101,{"inputs":[{"name":"packet"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"pipe"},{"name":"formatter"}],"output":{"name":"result"}}],[7,"TSS_PTR","kernel","",null,null],[7,"ENV_PTR","","",null,null],[7,"PIT_DURATION","","Pit duration",null,null],[7,"BSS_TEST_ZERO","","",null,null],[7,"BSS_TEST_NONZERO","","",null,null],[14,"debug!","","Debug to console",null,null],[14,"debugln!","","Debug new line to console",null,null],[14,"test!","","",null,null],[14,"succ!","","",null,null],[14,"fail!","","",null,null]],"paths":[[3,"Event"],[3,"MouseEvent"],[3,"KeyEvent"],[4,"EventOption"],[3,"QuitEvent"],[8,"GetSlice"],[8,"AsOption"],[4,"Option"],[3,"Duration"],[8,"ToNum"],[3,"Acpi"],[3,"DSDT"],[3,"GenericAddressStructure"],[3,"FADT"],[3,"LocalApic"],[3,"IoApic"],[3,"IntSourceOverride"],[3,"MADT"],[3,"RSDP"],[3,"RSDT"],[3,"SDTHeader"],[3,"SSDT"],[3,"ContextManager"],[3,"ContextMemory"],[3,"ContextFile"],[3,"ContextStatus"],[3,"Context"],[3,"ElfHeader"],[3,"ElfSegment"],[3,"ElfSection"],[3,"ElfSymbol"],[3,"Elf"],[3,"Intex"],[3,"IntexGuard"],[3,"StaticIntexGuard"],[3,"Memory"],[3,"MemoryMapEntry"],[3,"Pager"],[3,"PageDirectory"],[3,"PageTable"],[3,"Page"],[3,"Regs"],[3,"TSS"],[3,"AhciDisk"],[3,"FisRegH2D"],[3,"FisRegD2H"],[3,"FisData"],[3,"FisPioSetup"],[3,"FisDmaSetup"],[3,"HbaPort"],[3,"HbaMem"],[3,"HbaPrdtEntry"],[3,"HbaCmdTable"],[3,"HbaCmdHeader"],[4,"HbaPortType"],[3,"Ahci"],[3,"Extent"],[3,"Prd"],[3,"Prdt"],[3,"IdeDisk"],[3,"Ide"],[8,"Disk"],[3,"PciConfig"],[3,"Ps2"],[3,"Rtc"],[3,"SerialInfo"],[3,"Serial"],[4,"Layout"],[3,"Environment"],[3,"Console"],[3,"SchemeInner"],[3,"SchemeResource"],[3,"SchemeServerResource"],[3,"Scheme"],[3,"FileSystem"],[3,"Header"],[3,"NodeData"],[3,"Node"],[3,"Color"],[3,"Size"],[3,"Point"],[3,"VBEModeInfo"],[3,"Display"],[3,"DebugStream"],[3,"Url"],[3,"VecResource"],[4,"ResourceSeek"],[3,"ContextScheme"],[3,"DebugResource"],[3,"DebugScheme"],[3,"DisplayResource"],[3,"DisplayScheme"],[3,"FileResource"],[3,"FileScheme"],[3,"InterruptScheme"],[3,"MemoryScheme"],[3,"PipeRead"],[3,"PipeWrite"],[3,"TestScheme"],[8,"KScheme"],[8,"Resource"],[4,"Packet"],[4,"Pipe"],[3,"DeviceDescriptor"],[3,"ConfigDescriptor"],[3,"StringDescriptor"],[3,"InterfaceDescriptor"],[3,"EndpointDescriptor"],[3,"HIDDescriptor"],[3,"Qtd"],[3,"QueueHead"],[3,"Ehci"],[8,"Hci"],[3,"Gtd"],[3,"Ed"],[3,"OhciRegs"],[3,"OhciHcca"],[3,"Ohci"],[3,"Setup"],[3,"Uhci"],[3,"Td"],[3,"Qh"],[3,"Ste"],[3,"Trb"],[3,"Xhci"]]};
searchIndex['std'] = {"items":[[0,"any","std","This module implements the `Any` trait, which enables dynamic typing\nof any `'static` type through runtime reflection.",null,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",1,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::num","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",2,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",2,null],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",2,null],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",2,null],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",2,null],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",2,null],[11,"rem","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",2,null],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",2,null],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",2,null],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",2,null],[11,"eq","core::num::flt2dec::decoder","",3,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",5,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",5,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"clone","","",6,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",6,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",6,null],[11,"fmt","","",7,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",8,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",8,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",9,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,null],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",12,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"fmt","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",14,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",14,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",14,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",14,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",14,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",14,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",14,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",14,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",14,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",14,null],[11,"eq","","",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",14,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",15,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",15,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",15,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",15,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",15,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",15,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",15,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",15,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",15,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",15,null],[11,"eq","","",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",15,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",16,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",16,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",16,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",17,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",18,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",18,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",19,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",18,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"fmt","","",18,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",20,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",20,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",21,null],[11,"get","","Dereferences the content.",21,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",21,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",22,null],[11,"clone","","",22,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",23,null],[11,"eq","","",23,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",23,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",23,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",23,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"assert_receiver_is_total_eq","core::ops","",24,null],[11,"eq","","",24,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",24,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",25,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",26,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",27,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",28,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",28,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",28,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","std","",0,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",0,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",29,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",30,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",31,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",32,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",33,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",29,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",29,null],[11,"swap","","Stores a value into the bool, returning the old value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",29,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",30,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",30,null],[11,"swap","","Stores a value into the isize, returning the old value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",30,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",31,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",31,null],[11,"swap","","Stores a value into the usize, returning the old value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",31,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",32,null],[11,"load","","Loads a value from the pointer.",32,null],[11,"store","","Stores a value into the pointer.",32,null],[11,"swap","","Stores a value into the pointer, returning the old value.",32,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",32,null],[11,"fmt","","",31,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",34,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",34,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",34,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",34,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",34,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",34,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",34,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",36,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",36,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",36,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",36,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",36,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",36,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",38,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",38,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",38,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",38,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",39,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",39,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",40,null],[11,"deref","","",39,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",41,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",41,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",41,null],[11,"clone","core::char","",42,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",43,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",42,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"clone","","",44,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",45,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",44,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"count","","",44,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",44,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",44,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",46,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",46,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",47,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",48,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",50,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",49,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",51,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",52,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",53,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",54,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"nth","","",55,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",55,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",56,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",56,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",56,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",56,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",57,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"clone","","",58,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",58,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",59,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",59,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",60,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",60,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",61,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",62,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",63,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",64,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",26,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",25,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",65,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"clone","","",66,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",66,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next","core::ops","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",67,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",67,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",68,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",69,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",69,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",69,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",70,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",70,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",70,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",70,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",70,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",70,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",70,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",70,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",70,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",70,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",70,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",70,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",70,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",70,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",70,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",70,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",70,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",70,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",70,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",70,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",70,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",70,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",70,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",70,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",71,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",70,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",75,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",76,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",77,null],[11,"partial_cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",77,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",77,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",77,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",81,null],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"count","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",82,null],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",86,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","","",87,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next","","",88,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","","",89,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"count","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",93,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",95,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",99,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",100,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",101,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",103,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",103,null],[11,"matching","","",103,null],[11,"use_early_reject","","",104,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",104,null],[11,"matching","","",104,null],[11,"eq","core::str","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",106,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",107,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",108,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",118,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",126,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",126,null],[11,"call_mut","","",126,null],[11,"call_once","","",126,null],[11,"next","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",128,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",128,null],[11,"finish","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",136,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",137,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",138,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",138,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",139,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",140,null],[11,"entry","","Adds a new entry to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",141,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",143,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",144,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",145,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",147,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",148,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",150,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"new","","",150,null],[11,"from_usize","","",150,{"inputs":[{"name":"argumentv1"},{"name":"usize"}],"output":{"name":"argumentv1"}}],[11,"clone","","",151,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the\nArguments structure.",152,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters.\nThe `pieces` array must be at least as long as `fmt` to construct\na valid Arguments structure. Also, any `Count` within `fmt` that is\n`CountIsParam` or `CountIsNextParam` has to point to an argument\ncreated with `argumentusize`. However, failing to do so doesn't cause\nunsafety, but will ignore invalid .",152,null],[11,"clone","","",152,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",153,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",153,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",153,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",153,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",153,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",23,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",34,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"TypeId","std::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[12,"t","","",1,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location that admits only `Copy` data.",null,null],[12,"value","","",34,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[12,"borrow","","",36,null],[12,"value","","",36,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",35,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",35,null],[13,"Unused","","There are no outstanding borrows on this cell.",35,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[12,"_value","","",38,null],[12,"_borrow","","",38,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[12,"_value","","",39,null],[12,"_borrow","","",39,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[12,"value","","",41,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'",null,null],[8,"Clone","std::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",154,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",154,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",155,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",155,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"assert_receiver_is_total_eq","","",156,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",28,null],[13,"Equal","","An ordering where a compared value is equal [to another].",28,null],[13,"Greater","","An ordering where a compared value is greater [than another].",28,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",157,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",158,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",158,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",158,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",158,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",158,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","std","Traits for conversions between types.",null,null],[8,"AsRef","std::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",159,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",160,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",161,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",162,{"inputs":[{"name":"from"},{"name":"t"}],"output":{"name":"self"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",163,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",164,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",164,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",165,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",165,null],[11,"write_u8","","Write a single `u8` into this hasher",165,null],[11,"write_u16","","Write a single `u16` into this hasher.",165,null],[11,"write_u32","","Write a single `u32` into this hasher.",165,null],[11,"write_u64","","Write a single `u64` into this hasher.",165,null],[11,"write_usize","","Write a single `usize` into this hasher.",165,null],[11,"write_i8","","Write a single `i8` into this hasher.",165,null],[11,"write_i16","","Write a single `i16` into this hasher.",165,null],[11,"write_i32","","Write a single `i32` into this hasher.",165,null],[11,"write_i64","","Write a single `i64` into this hasher.",165,null],[11,"write_isize","","Write a single `isize` into this hasher.",165,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",166,null],[10,"build_hasher","","Creates a new hasher.",166,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[8,"HashState","","Deprecated, renamed to `BuildHasher`",null,null],[16,"Hasher","","Type of the hasher that will be created.",167,null],[10,"hasher","","Creates a new hasher based on the given state of this object.",167,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[12,"k0","","",128,null],[12,"k1","","",128,null],[12,"length","","",128,null],[12,"v0","","",128,null],[12,"v2","","",128,null],[12,"v1","","",128,null],[12,"v3","","",128,null],[12,"tail","","",128,null],[12,"ntail","","",128,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v',\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"iter","std","Composable external iteration",null,null],[8,"Iterator","std::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",168,null],[10,"next","","Advances the iterator and returns the next value.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",168,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",168,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",168,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",168,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",168,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",168,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",168,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",168,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",168,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",168,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",168,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",168,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",168,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",168,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",168,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by","","",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",168,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",168,null],[11,"cloned","","Creates an iterator which clone()s all of its elements.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",168,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",168,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",168,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",169,{"inputs":[{"name":"fromiterator"},{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",170,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",170,null],[10,"into_iter","","Creates an iterator from a value.",170,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",171,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",172,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",173,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[3,"Rev","","An double-ended iterator with the direction inverted.",null,null],[12,"iter","","",46,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[12,"it","","",47,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[12,"orig","","",48,null],[12,"iter","","",48,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[12,"a","","",49,null],[12,"b","","",49,null],[12,"state","","",49,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[12,"a","","",51,null],[12,"b","","",51,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[12,"iter","","",52,null],[12,"f","","",52,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[12,"iter","","",53,null],[12,"predicate","","",53,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[12,"iter","","",54,null],[12,"f","","",54,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[12,"iter","","",55,null],[12,"count","","",55,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[12,"iter","","",56,null],[12,"peeked","","",56,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[12,"iter","","",57,null],[12,"flag","","",57,null],[12,"predicate","","",57,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[12,"iter","","",58,null],[12,"flag","","",58,null],[12,"predicate","","",58,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[12,"iter","","",59,null],[12,"n","","",59,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[12,"iter","","",60,null],[12,"n","","",60,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[12,"iter","","",61,null],[12,"f","","",61,null],[12,"state","","",61,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[12,"iter","","",62,null],[12,"f","","",62,null],[12,"frontiter","","",62,null],[12,"backiter","","",62,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[12,"iter","","",63,null],[12,"done","","",63,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[12,"iter","","",64,null],[12,"f","","",64,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",174,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",174,{"inputs":[{"name":"step"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[12,"step_by","","",65,null],[12,"range","","",65,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[12,"range","","",66,null],[12,"done","","",66,null],[5,"range_inclusive","","Returns an iterator over the range [start, stop].",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[12,"element","","",67,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[12,"inner","","",69,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"marker","std","Primitive traits and marker types representing basic 'kinds' of types.",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData<T>` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"mem","std","Basic functions for dealing with memory",null,null],[5,"forget","std::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","std","Overloadable operators",null,null],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",175,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",176,null],[10,"add","","The method for the `+` operator",176,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",177,null],[10,"sub","","The method for the `-` operator",177,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",178,null],[10,"mul","","The method for the `*` operator",178,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",179,null],[10,"div","","The method for the `/` operator",179,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",180,null],[10,"rem","","The method for the `%` operator",180,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",181,null],[10,"neg","","The method for the unary `-` operator",181,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",182,null],[10,"not","","The method for the unary `!` operator",182,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",183,null],[10,"bitand","","The method for the `&` operator",183,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",184,null],[10,"bitor","","The method for the `|` operator",184,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",185,null],[10,"bitxor","","The method for the `^` operator",185,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",186,null],[10,"shl","","The method for the `<<` operator",186,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",187,null],[10,"shr","","The method for the `>>` operator",187,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",188,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",189,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",190,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",191,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",192,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&` operator",193,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",194,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",195,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",196,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",197,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",198,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",198,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",199,null],[3,"RangeFull","","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",25,null],[12,"end","","The upper bound of the range (exclusive).",25,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",26,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",27,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",200,null],[10,"deref","","The method called to dereference a value",200,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",201,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",202,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",203,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",204,null],[10,"call_once","","This is called when the call operator is used.",204,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate \"place\" that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",205,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",206,null],[10,"make_place","","Creates a fresh place from `self`.",206,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",207,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",207,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",208,null],[16,"Place","","The place that will negotiate the storage of the data.",208,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",208,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",209,{"inputs":[{"name":"boxplace"}],"output":{"name":"self"}}],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`",null,null],[5,"null","std::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","Variant of read_and_zero that writes the specific drop-flag byte\n(which may be more appropriate than zero).",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[12,"pointer","","",21,null],[12,"_marker","","",21,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc<T>` or `Arc<T>`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[12,"pointer","","",22,null],[12,"_marker","","",22,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","std::raw","The representation of a slice like `&[T]`.",null,null],[12,"data","","",75,null],[12,"len","","",75,null],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",76,null],[12,"vtable","","",76,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",210,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"result","std","Error handling with the `Result` type",null,null],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",77,null],[13,"Err","","Contains the error value",77,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[12,"inner","","",78,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[12,"inner","","",79,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[12,"inner","","",80,null],[0,"option","std","Optional values",null,null],[4,"Option","std::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",70,null],[13,"Some","","Some value `T`",70,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[12,"inner","","",72,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[12,"inner","","",73,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[12,"inner","","",74,null],[0,"arc","std","Threadsafe reference-counted boxes (the `Arc<T>` type).",null,null],[11,"new","alloc::arc","Constructs a new `Arc<T>`.",211,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",212,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",213,null],[11,"make_place","","",213,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",213,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",214,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",212,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",213,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",214,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",214,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",214,null],[11,"default","","",214,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",214,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",214,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",214,null],[11,"clone","","",214,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",214,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",214,null],[11,"from","","",214,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",214,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",214,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",214,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",214,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",214,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",214,null],[11,"next_back","","",214,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",214,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",214,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",214,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",214,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",214,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",214,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",214,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","alloc::arc","",215,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",211,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",211,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Arc<T>`.",211,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",215,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",215,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",215,null],[11,"eq","","Equality for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",211,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",211,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",211,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",211,null],[11,"from","","",211,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",215,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",211,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",211,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",216,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",216,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",216,null],[11,"clone","","Makes a clone of the `Rc<T>`.",216,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",216,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",216,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",216,null],[11,"fmt","","",216,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",216,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",217,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",217,null],[11,"clone","","Makes a clone of the `Weak<T>`.",217,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",217,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",217,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",216,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",216,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",218,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",218,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",218,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",218,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",218,null],[11,"cap","","Gets the capacity of the allocation.",218,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",218,null],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common\nenough to want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",218,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",218,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",218,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",218,{"inputs":[{"name":"rawvec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",218,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",218,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",218,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",218,null],[3,"Arc","std::arc","An atomically reference counted wrapper for shared state.",null,null],[12,"_ptr","","",211,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[12,"_ptr","","",215,null],[0,"boxed","std","A pointer type for heap allocation.",null,null],[17,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[12,"_force_singleton","","",212,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[12,"ptr","","",213,null],[12,"size","","",213,null],[12,"align","","",213,null],[12,"marker","","",213,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box<FnOnce()>` in a data structure, you should use\n`Box<FnBox()>`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box<FnOnce()>`\nclosures become directly usable.)",null,null],[16,"Output","","",219,null],[10,"call_box","","",219,null],[0,"rc","std","Thread-local reference-counted boxes (the `Rc<T>` type).",null,null],[3,"Rc","std::rc","A reference-counted pointer type over an immutable value.",null,null],[12,"_ptr","","",216,null],[3,"Weak","","A weak version of `Rc<T>`.",null,null],[12,"_ptr","","",217,null],[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",220,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",220,null],[11,"to_mut","collections::borrow","Acquires a mutable reference to the owned form of the data.",221,null],[11,"into_owned","","Extracts the owned data.",221,null],[11,"clone","collections::binary_heap","",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",222,null],[11,"default","","",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",222,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",222,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",222,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",222,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",222,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",222,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",222,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",222,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",222,null],[11,"drop","","",223,null],[11,"clone","","",224,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",224,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",224,null],[11,"next_back","","",224,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",225,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"next_back","","",225,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",226,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"next_back","","",226,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",222,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",227,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",222,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",222,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",222,null],[11,"extend","","",222,null],[11,"new_leaf","collections::btree::node","",228,{"inputs":[{"name":"root"}],"output":{"name":"root"}}],[11,"as_ref","","",228,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",228,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",228,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",228,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",228,null],[11,"clone","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",229,null],[11,"vals","","",229,null],[11,"ascend","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",229,null],[11,"vals_mut","","",229,null],[11,"into_slices","","",229,null],[11,"into_root_mut","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",229,null],[11,"push","","",229,null],[11,"push_front","","",229,null],[11,"push","","",229,null],[11,"push_front","","",229,null],[11,"pop","","",229,null],[11,"pop_front","","",229,null],[11,"force","","",229,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",230,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",230,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",230,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",230,null],[11,"insert","","",230,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",230,null],[11,"into_kv_mut","","",230,null],[11,"kv_mut","","",230,null],[11,"split","","",230,null],[11,"remove","","",230,null],[11,"split","","",230,null],[11,"can_merge","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",230,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",231,null],[11,"clone","","",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",231,null],[11,"get","","Returns a reference to the value corresponding to the key.",231,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",231,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",231,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",231,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",231,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",231,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",231,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",231,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"next_back","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",232,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",233,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"next_back","","",233,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",233,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",234,null],[11,"next","","",234,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"next_back","","",234,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",234,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",235,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"next_back","","",235,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",235,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",235,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",236,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next_back","","",236,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",236,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",236,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",237,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",237,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",238,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",238,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",231,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",231,null],[11,"extend","","",231,null],[11,"hash","","",231,null],[11,"default","","",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",231,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",231,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",231,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",231,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",231,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",239,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",239,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",240,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",241,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",241,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",241,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",241,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",241,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",242,null],[11,"eq","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",242,null],[11,"clone","","",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",242,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",242,null],[11,"contains","","Returns `true` if the set contains a value.",242,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",242,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",242,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",242,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",242,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",242,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",242,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",242,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",242,null],[11,"extend","","",242,null],[11,"default","","",242,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",242,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",243,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",243,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"next_back","","",243,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",243,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"next_back","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",245,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",245,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",245,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",246,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",246,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"clone","","",247,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",247,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"clone","","",248,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",248,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"clone","","",249,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",249,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"borrow","collections::borrow","",221,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",221,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"deref","","",221,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",221,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",221,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",221,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",221,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",221,null],[11,"into_cow","","",221,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",221,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",250,null],[11,"cmp","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",250,null],[11,"eq","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",250,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",250,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",250,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",250,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",250,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",250,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",250,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",250,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",250,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",250,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",250,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",251,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",251,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"from_iter","","",250,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",250,null],[11,"extend","","",250,null],[11,"clone","collections::linked_list","",252,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",253,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",254,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",254,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",255,null],[11,"iter","","Provides a forward iterator.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",255,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",255,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",255,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",255,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",255,null],[11,"next","","",252,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"next_back","","",252,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",256,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"next_back","","",256,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",256,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",256,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",253,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",253,null],[11,"next_back","","",253,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",255,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",255,null],[11,"extend","","",255,null],[11,"eq","","",255,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",255,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",255,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",255,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",255,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",255,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",255,null],[11,"start","std::ops","",26,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",27,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",227,null],[11,"borrow_mut","","",227,null],[11,"clone","collections::str","",257,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",257,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"borrow","collections::string","",258,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"cmp","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",258,null],[11,"partial_cmp","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",259,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",258,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",258,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",258,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",258,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",258,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",258,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",258,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",258,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",258,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",258,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",258,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",258,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",258,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",258,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",258,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",258,null],[11,"push","","Appends the given `char` to the end of this `String`.",258,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",258,null],[11,"truncate","","Shortens this `String` to the specified length.",258,null],[11,"pop","","Removes the last character from the string buffer and returns it.",258,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",258,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",258,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",258,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",258,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",258,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",258,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",258,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",258,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",259,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",259,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",259,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",258,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",258,null],[11,"from_iter","","",258,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",258,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",258,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",258,null],[11,"extend","","",258,null],[11,"extend","","",258,null],[11,"extend","","",258,null],[11,"eq","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",221,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",221,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",221,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",258,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",258,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",258,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",258,null],[11,"add","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",258,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",258,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",258,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",258,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",258,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",258,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",258,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",258,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",258,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",258,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",261,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",261,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",261,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",261,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",258,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",258,null],[11,"from","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",221,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",221,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",258,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",258,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",258,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",258,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",262,null],[11,"next","","",262,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"next_back","","",262,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",227,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",227,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",227,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",227,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",227,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",227,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",227,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",227,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",227,null],[11,"as_slice","","Extracts a slice containing the entire vector.",227,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",227,null],[11,"set_len","","Sets the length of a vector.",227,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",227,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",227,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",227,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",227,null],[11,"push","","Appends an element to the back of a collection.",227,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",227,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",227,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",227,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",227,null],[11,"len","","Returns the number of elements in the vector.",227,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",227,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",227,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",227,null],[11,"push_all","","",227,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",227,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",227,null],[11,"clone","","",227,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",227,null],[11,"hash","","",227,null],[11,"index","","",227,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",227,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",227,null],[11,"index","","",227,null],[11,"index","","",227,null],[11,"index","","",227,null],[11,"index_mut","","",227,null],[11,"index_mut","","",227,null],[11,"index_mut","","",227,null],[11,"index_mut","","",227,null],[11,"deref","","",227,null],[11,"deref_mut","","",227,null],[11,"from_iter","","",227,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",227,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",227,null],[11,"extend","","",227,null],[11,"eq","","",227,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","collections::borrow","",221,null],[11,"ne","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"eq","","",221,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"partial_cmp","","",227,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",227,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",227,null],[11,"default","","",227,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",227,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",227,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",227,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",227,null],[11,"as_mut","","",227,null],[11,"from","","",227,null],[11,"from","","",227,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",221,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",227,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",263,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"count","","",263,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",263,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",263,null],[11,"next","","",264,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"next_back","","",264,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",264,null],[11,"clone","collections::vec_deque","",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",265,null],[11,"default","","",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",265,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",265,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",265,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",265,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",265,null],[11,"iter","","Returns a front-to-back iterator.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",265,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",265,null],[11,"len","","Returns the number of elements in the `VecDeque`.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",265,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",265,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",265,null],[11,"push_back","","Appends an element to the back of a buffer",265,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",265,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",265,null],[11,"retain","","Retains only the elements specified by the predicate.",265,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",265,null],[11,"clone","","",266,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",266,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[11,"next_back","","",266,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",267,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"next_back","","",267,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",268,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",268,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"next_back","","",268,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",269,null],[11,"next","","",269,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"next_back","","",269,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",265,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",265,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",265,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",265,null],[11,"index","","",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",265,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",265,null],[11,"extend","","",265,null],[11,"fmt","","",265,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","collections","",270,null],[11,"eq","","",270,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",270,null],[11,"fmt","","",270,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",270,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[4,"Cow","std::borrow","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",221,null],[13,"Owned","","Owned data.",221,null],[8,"IntoCow","","Trait for moving into a `Cow`.",null,null],[10,"into_cow","","Moves `self` into `Cow`",271,{"inputs":[{"name":"intocow"}],"output":{"name":"cow"}}],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",272,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",273,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"fmt","std","Utilities for formatting and printing strings",null,null],[5,"format","std::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[0,"rt","","",null,null],[0,"v1","std::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are\nemitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","std::fmt::rt::v1","",null,null],[12,"position","","",144,null],[12,"format","","",144,null],[3,"FormatSpec","","",null,null],[12,"fill","","",145,null],[12,"align","","",145,null],[12,"flags","","",145,null],[12,"precision","","",145,null],[12,"width","","",145,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",146,null],[13,"Right","","Indication that contents should be right-aligned.",146,null],[13,"Center","","Indication that contents should be center-aligned.",146,null],[13,"Unknown","","No alignment was requested.",146,null],[4,"Count","","",null,null],[13,"Is","","",147,null],[13,"Param","","",147,null],[13,"NextParam","","",147,null],[13,"Implied","","",147,null],[4,"Position","","",null,null],[13,"Next","","",148,null],[13,"At","","",148,null],[3,"Formatter","std::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[12,"flags","","",153,null],[12,"fill","","",153,null],[12,"align","","",153,null],[12,"width","","",153,null],[12,"precision","","",153,null],[12,"buf","","",153,null],[12,"curarg","","",153,null],[12,"args","","",153,null],[6,"Result","","",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",274,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",274,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",274,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",275,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",276,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",277,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",278,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",279,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",280,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",281,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",282,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",283,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",150,null],[12,"formatter","","",150,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[12,"pieces","","",152,null],[12,"fmt","","",152,null],[12,"args","","",152,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[12,"base","","",135,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",142,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",143,null],[12,"result","","",143,null],[12,"has_fields","","",143,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",141,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",138,null],[12,"result","","",138,null],[12,"has_fields","","",138,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",139,null],[12,"result","","",139,null],[12,"has_fields","","",139,null],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",284,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",284,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",284,null],[10,"connect","","",284,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[12,"v","","",91,null],[12,"size","","",91,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[12,"v","","",90,null],[12,"size","","",90,null],[3,"Iter","","Immutable slice iterator",null,null],[12,"ptr","","",81,null],[12,"end","","",81,null],[12,"_marker","","",81,null],[3,"IterMut","","Mutable slice iterator.",null,null],[12,"ptr","","",82,null],[12,"end","","",82,null],[12,"_marker","","",82,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[12,"v","","",84,null],[12,"pred","","",84,null],[12,"finished","","",84,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[12,"v","","",92,null],[12,"chunk_size","","",92,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[12,"v","","",83,null],[12,"pred","","",83,null],[12,"finished","","",83,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[12,"inner","","",86,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[12,"inner","","",87,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[12,"inner","","",88,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[12,"inner","","",89,null],[0,"bytes","","Operations on `[u8]`.",null,null],[8,"MutableByteVector","std::slice::bytes","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",285,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[0,"str","std","Unicode string slices",null,null],[3,"Utf16Units","std::str","External iterator for a string's UTF-16 code units.",null,null],[12,"encoder","","",257,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",286,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",286,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",286,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",286,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",286,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",93,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",93,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",93,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",287,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",287,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",287,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",287,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",288,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",288,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",288,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",99,null],[12,"needle","","",99,null],[12,"searcher","","",99,null],[8,"FromStr","std::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",289,null],[10,"from_str","","Parses a string `s` to return a value of this type.",289,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[12,"valid_up_to","","",106,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",127,null],[12,"next","","Index of the first byte of the next `char`",127,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[12,"iter","","",107,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[12,"front_offset","","",108,null],[12,"iter","","",108,null],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[12,"_priv","","",105,null],[11,"clone","rustc_unicode::u_str","",290,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",290,{"inputs":[{"name":"utf16encoder"},{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",290,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"option"}}],[11,"size_hint","","",290,null],[11,"next","","",291,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",291,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","rustc_unicode::char","",292,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",293,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",294,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",295,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",295,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[3,"SplitWhitespace","std::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[12,"inner","","",291,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[12,"vec","","",258,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[12,"bytes","","",259,null],[12,"error","","",259,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",296,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[12,"string","","Will be used as &'a mut String in the destructor",262,null],[12,"start","","Start of part to remove",262,null],[12,"end","","End of part to remove",262,null],[12,"iter","","Current remaining range to remove",262,null],[0,"vec","std","A growable list type with heap-allocated contents, written `Vec<T>` but\npronounced 'vector.'",null,null],[3,"Vec","std::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'",null,null],[12,"buf","","",227,null],[12,"len","","",227,null],[5,"from_elem","","",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"vec"}}],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[12,"_buf","","",263,null],[12,"ptr","","",263,null],[12,"end","","",263,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[12,"tail_start","","Index of tail to preserve",264,null],[12,"tail_len","","Length of tail",264,null],[12,"iter","","Current remaining range to remove",264,null],[12,"vec","","",264,null],[0,"char","std","A character type.",null,null],[3,"ToLowercase","std::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[12,"iter","","",295,null],[12,"buf","","",295,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iterable`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.\nIt can occur, for example, when giving ill-formed UTF-8 bytes to\n[`String::from_utf8_lossy`](../string/struct.String.html#method.from_utf8_lossy).",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[12,"c","","",42,null],[12,"state","","",42,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[12,"state","","",44,null],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"BITS","std::isize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"BITS","std::i8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"BITS","std::i16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"BITS","std::i32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"BITS","std::i64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"BITS","std::usize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"BITS","std::u8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"BITS","std::u16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"BITS","std::u32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"BITS","std::u64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"num","std","Numeric traits and functions for the built-in numeric types.",null,null],[3,"Wrapping","std::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[0,"wrapping","","",null,null],[8,"OverflowingOps","std::num::wrapping","",null,null],[10,"overflowing_add","","",297,null],[10,"overflowing_sub","","",297,null],[10,"overflowing_mul","","",297,null],[10,"overflowing_div","","",297,null],[10,"overflowing_rem","","",297,null],[10,"overflowing_neg","","",297,null],[10,"overflowing_shl","","",297,null],[10,"overflowing_shr","","",297,null],[0,"flt2dec","std::num","Floating-point number to decimal conversion routines.",null,null],[0,"estimator","std::num::flt2dec","The exponent estimator.",null,null],[5,"estimate_scaling_factor","std::num::flt2dec::estimator","Finds `k_0` such that `10^(k_0-1) < mant * 2^exp <= 10^(k_0+1)`.",null,{"inputs":[{"name":"u64"},{"name":"i16"}],"output":{"name":"i16"}}],[0,"decoder","std::num::flt2dec","Decodes a floating-point value into individual parts and error ranges.",null,null],[3,"Decoded","std::num::flt2dec::decoder","Decoded unsigned finite value, such that:",null,null],[12,"mant","","The scaled mantissa.",3,null],[12,"minus","","The lower error range.",3,null],[12,"plus","","The upper error range.",3,null],[12,"exp","","The shared exponent in base 2.",3,null],[12,"inclusive","","True when the error range is inclusive.",3,null],[4,"FullDecoded","","Decoded unsigned value.",null,null],[13,"Nan","","Not-a-number.",4,null],[13,"Infinite","","Infinities, either positive or negative.",4,null],[13,"Zero","","Zero, either positive or negative.",4,null],[13,"Finite","","Finite numbers with further decoded fields.",4,null],[8,"DecodableFloat","","A floating point type which can be `decode`d.",null,null],[10,"min_pos_norm_value","","The minimum positive normalized value.",298,{"inputs":[{"name":"decodablefloat"}],"output":{"name":"self"}}],[5,"decode","","Returns a sign (true when negative) and `FullDecoded` value\nfrom given floating point number.",null,null],[0,"strategy","std::num::flt2dec","Digit-generation algorithms.",null,null],[0,"dragon","std::num::flt2dec::strategy","Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].",null,null],[5,"mul_pow10","std::num::flt2dec::strategy::dragon","",null,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[5,"format_shortest","","The shortest mode implementation for Dragon.",null,null],[5,"format_exact","","The exact and fixed mode implementation for Dragon.",null,null],[0,"grisu","std::num::flt2dec::strategy","Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n1KB of precomputed table, and in turn, it's very quick for most inputs.",null,null],[17,"ALPHA","std::num::flt2dec::strategy::grisu","",null,null],[17,"GAMMA","","",null,null],[7,"CACHED_POW10","","",null,null],[17,"CACHED_POW10_FIRST_E","","",null,null],[17,"CACHED_POW10_LAST_E","","",null,null],[5,"cached_power","","",null,null],[5,"max_pow10_no_more_than","","Given `x > 0`, returns `(k, 10^k)` such that `10^k <= x < 10^(k+1)`.",null,null],[5,"format_shortest_opt","","The shortest mode implementation for Grisu.",null,null],[5,"format_shortest","","The shortest mode implementation for Grisu with Dragon fallback.",null,null],[5,"format_exact_opt","","The exact and fixed mode implementation for Grisu.",null,null],[5,"format_exact","","The exact and fixed mode implementation for Grisu with Dragon fallback.",null,null],[17,"MAX_SIG_DIGITS","std::num::flt2dec","The minimum size of buffer necessary for the shortest mode.",null,null],[5,"round_up","","When `d[..n]` contains decimal digits, increase the last digit and propagate carry.\nReturns a next digit when it causes the length change.",null,null],[4,"Part","","Formatted parts.",null,null],[13,"Zero","","Given number of zero digits.",5,null],[13,"Num","","A literal number up to 5 digits.",5,null],[13,"Copy","","A verbatim copy of given bytes.",5,null],[3,"Formatted","","Formatted result containing one or more parts.\nThis can be written to the byte buffer or converted to the allocated string.",null,null],[12,"sign","","A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.",6,null],[12,"parts","","Formatted parts to be rendered after a sign and optional zero padding.",6,null],[4,"Sign","","Sign formatting options.",null,null],[13,"Minus","","Prints `-` only for the negative non-zero values.",7,null],[13,"MinusRaw","","Prints `-` only for any negative values (including the negative zero).",7,null],[13,"MinusPlus","","Prints `-` for the negative non-zero values, or `+` otherwise.",7,null],[13,"MinusPlusRaw","","Prints `-` for any negative values (including the negative zero), or `+` otherwise.",7,null],[5,"to_shortest_str","","Formats given floating point number into the decimal form with at least\ngiven number of fractional digits. The result is stored to the supplied parts\narray while utilizing given byte buffer as a scratch. `upper` is currently\nunused but left for the future decision to change the case of non-finite values,\ni.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n(which can be an empty string if no sign is rendered).",null,null],[5,"to_shortest_exp_str","","Formats given floating point number into the decimal form or\nthe exponential form, depending on the resulting exponent. The result is\nstored to the supplied parts array while utilizing given byte buffer\nas a scratch. `upper` is used to determine the case of non-finite values\n(`inf` and `nan`) or the case of the exponent prefix (`e` or `E`).\nThe first part to be rendered is always a `Part::Sign` (which can be\nan empty string if no sign is rendered).",null,null],[5,"to_exact_exp_str","","Formats given floating point number into the exponential form with\nexactly given number of significant digits. The result is stored to\nthe supplied parts array while utilizing given byte buffer as a scratch.\n`upper` is used to determine the case of the exponent prefix (`e` or `E`).\nThe first part to be rendered is always a `Part::Sign` (which can be\nan empty string if no sign is rendered).",null,null],[5,"to_exact_fixed_str","","Formats given floating point number into the decimal form with exactly\ngiven number of fractional digits. The result is stored to the supplied parts\narray while utilizing given byte buffer as a scratch. `upper` is currently\nunused but left for the future decision to change the case of non-finite values,\ni.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n(which can be an empty string if no sign is rendered).",null,null],[3,"Decoded","","Decoded unsigned finite value, such that:",null,null],[12,"mant","","The scaled mantissa.",3,null],[12,"minus","","The lower error range.",3,null],[12,"plus","","The upper error range.",3,null],[12,"exp","","The shared exponent in base 2.",3,null],[12,"inclusive","","True when the error range is inclusive.",3,null],[5,"decode","","Returns a sign (true when negative) and `FullDecoded` value\nfrom given floating point number.",null,null],[8,"DecodableFloat","","A floating point type which can be `decode`d.",null,null],[10,"min_pos_norm_value","","The minimum positive normalized value.",298,{"inputs":[{"name":"decodablefloat"}],"output":{"name":"self"}}],[4,"FullDecoded","","Decoded unsigned value.",null,null],[13,"Nan","","Not-a-number.",4,null],[13,"Infinite","","Infinities, either positive or negative.",4,null],[13,"Zero","","Zero, either positive or negative.",4,null],[13,"Finite","","Finite numbers with further decoded fields.",4,null],[0,"dec2flt","std::num","Converting decimal strings into IEEE 754 binary floating point numbers.",null,null],[0,"rawfp","std::num::dec2flt","Bit fiddling on positive IEEE 754 floats. Negative numbers aren't and needn't be handled.\nNormal floating point numbers have a canonical representation as (frac, exp) such that the\nvalue is 2^exp * (1 + sum(frac[N-i] / 2^i)) where N is the number of bits. Subnormals are\nslightly different and weird, but the same principle applies.",null,null],[3,"Unpacked","std::num::dec2flt::rawfp","",null,null],[12,"sig","","",8,null],[12,"k","","",8,null],[8,"RawFloat","","A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.",null,null],[10,"transmute","","Get the raw binary representation of the float.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u64"}}],[10,"from_bits","","Transmute the raw binary representation into a float.",299,{"inputs":[{"name":"rawfloat"},{"name":"u64"}],"output":{"name":"self"}}],[10,"unpack","","Decode the float.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"unpacked"}}],[10,"from_int","","Cast from a small integer that can be represented exactly.  Panic if the integer can't be\nrepresented, the other code in this module makes sure to never let that happen.",299,{"inputs":[{"name":"rawfloat"},{"name":"u64"}],"output":{"name":"self"}}],[10,"short_fast_pow10","","Get the value 10^e from a pre-computed table. Panics for e >= ceil_log5_of_max_sig().",299,{"inputs":[{"name":"rawfloat"},{"name":"usize"}],"output":{"name":"self"}}],[10,"ceil_log5_of_max_sig","","What the name says. It's easier to hard code than juggling intrinsics and\nhoping LLVM constant folds it.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[10,"max_normal_digits","","subnormals. Probably the decimal exponent of the maximum normal value, hence the name.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"usize"}}],[10,"inf_cutoff","","When the most significant decimal digit has a place value greater than this, the number\nis certainly rounded to infinity.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i64"}}],[10,"zero_cutoff","","When the most significant decimal digit has a place value less than this, the number\nis certainly rounded to zero.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i64"}}],[10,"exp_bits","","The number of bits in the exponent.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u8"}}],[10,"sig_bits","","The number of bits in the singificand, *including* the hidden bit.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u8"}}],[11,"explicit_sig_bits","","The number of bits in the singificand, *excluding* the hidden bit.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u8"}}],[11,"max_exp","","The maximum legal exponent in fractional representation.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"min_exp","","The minimum legal exponent in fractional representation, excluding subnormals.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"max_exp_int","","`MAX_EXP` for integral representation, i.e., with the shift applied.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"max_encoded_exp","","`MAX_EXP` encoded (i.e., with offset bias)",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"min_exp_int","","`MIN_EXP` for integral representation, i.e., with the shift applied.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"max_sig","","The maximum normalized singificand in integral representation.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u64"}}],[11,"min_sig","","The minimal normalized significand in integral representation.",299,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u64"}}],[5,"fp_to_float","","Convert an Fp to the closest f64. Only handles number that fit into a normalized f64.",null,{"inputs":[{"name":"fp"}],"output":{"name":"t"}}],[5,"round_normal","","Round the 64-bit significand to 53 bit with half-to-even. Does not handle exponent overflow.",null,{"inputs":[{"name":"fp"}],"output":{"name":"unpacked"}}],[5,"encode_normal","","Inverse of `RawFloat::unpack()` for normalized numbers.\nPanics if the significand or exponent are not valid for normalized numbers.",null,{"inputs":[{"name":"unpacked"}],"output":{"name":"t"}}],[5,"encode_subnormal","","Construct the subnormal. A mantissa of 0 is allowed and constructs zero.",null,{"inputs":[{"name":"u64"}],"output":{"name":"t"}}],[5,"big_to_fp","","Approximate a bignum with an Fp. Rounds within 0.5 ULP with half-to-even.",null,{"inputs":[{"name":"big32x40"}],"output":{"name":"fp"}}],[5,"prev_float","","Find the largest floating point number strictly smaller than the argument.\nDoes not handle subnormals, zero, or exponent underflow.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"next_float","","",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"parse","std::num::dec2flt","Validating and decomposing a decimal string of the form:",null,null],[4,"Sign","std::num::dec2flt::parse","",null,null],[13,"Positive","","",9,null],[13,"Negative","","",9,null],[3,"Decimal","","The interesting parts of a decimal string.",null,null],[12,"integral","","",10,null],[12,"fractional","","",10,null],[12,"exp","","The decimal exponent, guaranteed to have fewer than 18 decimal digits.",10,null],[4,"ParseResult","","",null,null],[13,"Valid","","",11,null],[13,"ShortcutToInf","","",11,null],[13,"ShortcutToZero","","",11,null],[13,"Invalid","","",11,null],[5,"parse_decimal","","Check if the input string is a valid floating point number and if so, locate the integral\npart, the fractional part, and the exponent in it. Does not handle signs.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[3,"ParseFloatError","std::num::dec2flt","An error which can be returned when parsing a float.",null,null],[12,"kind","","",12,null],[0,"bignum","std::num","Custom arbitrary-precision number (bignum) implementation.",null,null],[8,"FullOps","std::num::bignum","Arithmetic operations required by bignums.",null,null],[10,"full_add","","Returns `(carry', v')` such that `carry' * 2^W + v' = self + other + carry`,\nwhere `W` is the number of bits in `Self`.",300,null],[10,"full_mul","","Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + carry`,\nwhere `W` is the number of bits in `Self`.",300,null],[10,"full_mul_add","","Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + other2 + carry`,\nwhere `W` is the number of bits in `Self`.",300,null],[10,"full_div_rem","","Returns `(quo, rem)` such that `borrow * 2^W + self = quo * other + rem`\nand `0 <= rem < other`, where `W` is the number of bits in `Self`.",300,null],[6,"Digit32","","",null,null],[3,"Big32x40","","Stack-allocated arbitrary-precision (up to certain limit) integer.",null,null],[12,"size","","One plus the offset to the maximum \"digit\" in use.\nThis does not decrease, so be aware of the computation order.\n`base[size..]` should be zero.",14,null],[12,"base","","Digits. `[a, b, c, ...]` represents `a + b*2^W + c*2^(2W) + ...`\nwhere `W` is the number of bits in the digit type.",14,null],[0,"tests","","",null,null],[3,"Big8x3","std::num::bignum::tests","Stack-allocated arbitrary-precision (up to certain limit) integer.",null,null],[12,"size","","One plus the offset to the maximum \"digit\" in use.\nThis does not decrease, so be aware of the computation order.\n`base[size..]` should be zero.",15,null],[12,"base","","Digits. `[a, b, c, ...]` represents `a + b*2^W + c*2^(2W) + ...`\nwhere `W` is the number of bits in the digit type.",15,null],[0,"diy_float","std::num","Extended precision \"soft float\", for internal use only.",null,null],[3,"Fp","std::num::diy_float","A custom 64-bit floating point type, representing `f * 2^e`.",null,null],[12,"f","","The integer mantissa.",16,null],[12,"e","","The exponent in base 2.",16,null],[8,"Zero","std::num","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",301,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",302,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[4,"FpCategory","","Used for representing the classification of floating point numbers",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",17,null],[13,"Infinite","","Positive or negative infinity",17,null],[13,"Zero","","Positive or negative zero",17,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",17,null],[13,"Normal","","A regular floating point number",17,null],[8,"Float","","A built-in floating point number.",null,null],[10,"nan","","Returns the NaN value.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns -0.0.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"zero","","Returns 0.0.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"one","","Returns 1.0.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns true if this value is NaN and false otherwise.",303,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",303,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns true if this number is neither infinite nor NaN.",303,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",303,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the category that this number falls into.",303,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",303,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",303,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",303,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",303,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"to_degrees","","Convert radians to degrees.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"to_radians","","Convert degrees to radians.",303,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[12,"kind","","",18,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[12,"kind","","",12,null],[0,"panicking","std","Panic support for libcore",null,null],[5,"panic","std::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"distributions","std::rand","Sampling from random distributions.",null,null],[0,"range","std::rand::distributions","Generating numbers between two others.",null,null],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",304,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",304,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",304,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",305,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",305,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",306,{"inputs":[{"name":"gammasmallshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",307,{"inputs":[{"name":"gammalargeshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",305,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",306,{"inputs":[{"name":"gammasmallshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",307,{"inputs":[{"name":"gammalargeshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",308,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",308,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",308,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",309,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",309,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",309,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",310,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",310,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",310,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","rand::distributions::normal","",311,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"clone","","",312,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",312,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",312,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",312,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",313,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",313,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",313,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",313,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","rand::distributions::exponential","",314,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"clone","","",315,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",315,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",315,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",315,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","rand::distributions","",316,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"sample","","",316,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",316,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","Create a new `WeightedChoice`.",317,null],[11,"sample","","",317,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",317,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",318,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",318,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",318,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",318,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",318,null],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",319,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",319,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",319,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",319,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",319,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",319,null],[11,"clone","rand::chacha","",320,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",320,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",320,null],[11,"next_u32","","",320,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",320,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",320,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",321,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",321,null],[11,"next_u32","","",321,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",321,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",321,null],[11,"reseed","","",321,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",321,null],[11,"clone","","",322,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",322,null],[11,"default","","",322,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"next","rand","",323,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",324,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",325,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",325,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",325,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",325,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",325,null],[3,"Range","std::rand::distributions::range","Sample values uniformly between two bounds.",null,null],[12,"low","","",304,null],[12,"range","","",304,null],[12,"accept_zone","","",304,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",326,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",326,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[0,"gamma","std::rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","std::rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[12,"repr","","",305,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[12,"repr","","",308,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[12,"numer","","",309,null],[12,"denom","","",309,null],[12,"dof_ratio","","",309,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[12,"chi","","",310,null],[12,"dof","","",310,null],[0,"normal","std::rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","std::rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[12,"mean","","",312,null],[12,"std_dev","","",312,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[12,"norm","","",313,null],[0,"exponential","std::rand::distributions","The exponential distribution.",null,null],[3,"Exp1","std::rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[12,"lambda_inverse","","`lambda` stored as `1/lambda`, since this is what we scale by.",315,null],[8,"Sample","std::rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",327,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",328,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[12,"_marker","","",316,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",329,null],[12,"item","","The actual item which is being weighted",329,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[12,"items","","",317,null],[12,"weight_range","","",317,null],[3,"Range","","Sample values uniformly between two bounds.",null,null],[12,"low","","",304,null],[12,"range","","",304,null],[12,"accept_zone","","",304,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[12,"repr","","",305,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[12,"repr","","",308,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[12,"numer","","",309,null],[12,"denom","","",309,null],[12,"dof_ratio","","",309,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[12,"chi","","",310,null],[12,"dof","","",310,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[12,"mean","","",312,null],[12,"std_dev","","",312,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[12,"norm","","",313,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[12,"lambda_inverse","","`lambda` stored as `1/lambda`, since this is what we scale by.",315,null],[0,"isaac","std::rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","std::rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[12,"cnt","","",318,null],[12,"rsl","","",318,null],[12,"mem","","",318,null],[12,"a","","",318,null],[12,"b","","",318,null],[12,"c","","",318,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[12,"cnt","","",319,null],[12,"rsl","","",319,null],[12,"mem","","",319,null],[12,"a","","",319,null],[12,"b","","",319,null],[12,"c","","",319,null],[0,"chacha","std::rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","std::rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[12,"buffer","","",320,null],[12,"state","","",320,null],[12,"index","","",320,null],[0,"reseeding","std::rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","std::rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"rng","","",321,null],[12,"generation_threshold","","",321,null],[12,"bytes_generated","","",321,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",321,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",330,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Rand","std::rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",331,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",332,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",332,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",332,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",332,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",332,null],[11,"gen","","Return a random value of a `Rand` type.",332,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",332,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",332,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",332,{"inputs":[{"name":"rng"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",332,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",332,null],[11,"shuffle","","Shuffle a mutable slice in place.",332,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[12,"rng","","",323,null],[12,"_marker","","",323,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[12,"rng","","",324,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",333,null],[10,"from_seed","","Create a new RNG with the given seed.",333,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[12,"x","","",325,null],[12,"y","","",325,null],[12,"z","","",325,null],[12,"w","","",325,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[12,"cnt","","",318,null],[12,"rsl","","",318,null],[12,"mem","","",318,null],[12,"a","","",318,null],[12,"b","","",318,null],[12,"c","","",318,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[12,"cnt","","",319,null],[12,"rsl","","",319,null],[12,"mem","","",319,null],[12,"a","","",319,null],[12,"b","","",319,null],[12,"c","","",319,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[12,"buffer","","",320,null],[12,"state","","",320,null],[12,"index","","",320,null],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",334,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"type_id","","Get the `TypeId` of `self`",334,{"inputs":[{"name":"error"}],"output":{"name":"typeid"}}],[11,"from","std::boxed","",214,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",214,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",214,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",214,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","std::str","",105,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","std::num","",18,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","","",12,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","std::string","",259,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",260,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","std","Returns true if the boxed type is the same as `T`",334,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",334,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",334,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",334,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[0,"macros","","Standard library macros",null,null],[0,"prelude","","The Rust Prelude",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"ascii","std","Operations on ASCII strings and characters",null,null],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[12,"range","","",335,null],[12,"data","","",335,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[7,"ASCII_LOWERCASE_MAP","","",null,null],[7,"ASCII_UPPERCASE_MAP","","",null,null],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",336,null],[10,"is_ascii","","Checks if within the ASCII range.",336,{"inputs":[{"name":"asciiext"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",336,{"inputs":[{"name":"asciiext"}],"output":{"name":"owned"}}],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",336,{"inputs":[{"name":"asciiext"}],"output":{"name":"owned"}}],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",336,{"inputs":[{"name":"asciiext"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",336,{"inputs":[{"name":"asciiext"}],"output":null}],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",336,{"inputs":[{"name":"asciiext"}],"output":null}],[11,"next","","",335,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"next_back","","",335,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[0,"thread","std","",null,null],[3,"JoinHandle","std::thread","",null,null],[12,"result_ptr","","",337,null],[5,"sleep","","",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"sleep_ms","","",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"spawn","","",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"yield_now","","",null,{"inputs":[],"output":null}],[11,"join","","",337,{"inputs":[{"name":"joinhandle"}],"output":{"name":"option"}}],[0,"collections","std","Collection types.",null,null],[4,"Bound","std::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",270,null],[13,"Excluded","","An exclusive bound.",270,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",270,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[12,"data","","",222,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[12,"root","","",231,null],[12,"length","","",231,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[12,"map","","",242,null],[3,"LinkedList","","A doubly-linked list.",null,null],[12,"length","","",255,null],[12,"list_head","","",255,null],[12,"list_tail","","",255,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[12,"tail","","",265,null],[12,"head","","",265,null],[12,"buf","","",265,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[12,"data","","",222,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[12,"iter","","",224,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[12,"iter","","",225,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[12,"iter","","",226,null],[0,"btree_map","std::collections","",null,null],[3,"IntoIter","std::collections::btree_map","An owning iterator over a BTreeMap's entries.",null,null],[12,"front","","",234,null],[12,"back","","",234,null],[12,"length","","",234,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[12,"front","","",238,null],[12,"back","","",238,null],[12,"_marker","","",238,null],[3,"Values","","An iterator over a BTreeMap's values.",null,null],[12,"inner","","",236,null],[3,"VacantEntry","","A vacant Entry.",null,null],[12,"key","","",240,null],[12,"handle","","",240,null],[12,"length","","",240,null],[12,"_marker","","",240,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",239,null],[13,"Occupied","","An occupied Entry",239,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[12,"root","","",231,null],[12,"length","","",231,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[12,"handle","","",241,null],[12,"length","","",241,null],[12,"_marker","","",241,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[12,"front","","",237,null],[12,"back","","",237,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[12,"inner","","",235,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[12,"range","","",232,null],[12,"length","","",232,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[12,"range","","",233,null],[12,"length","","",233,null],[0,"btree_set","std::collections","",null,null],[3,"SymmetricDifference","std::collections::btree_set","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[12,"a","","",247,null],[12,"b","","",247,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[12,"a","","",248,null],[12,"b","","",248,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[12,"map","","",242,null],[3,"Iter","","An iterator over a BTreeSet's items.",null,null],[12,"iter","","",243,null],[3,"Range","","An iterator over a sub-range of BTreeSet's items.",null,null],[12,"iter","","",245,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[12,"a","","",249,null],[12,"b","","",249,null],[3,"IntoIter","","An owning iterator over a BTreeSet's items.",null,null],[12,"iter","","",244,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[12,"a","","",246,null],[12,"b","","",246,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list.",null,null],[12,"length","","",255,null],[12,"list_head","","",255,null],[12,"list_tail","","",255,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[12,"head","","",252,null],[12,"tail","","",252,null],[12,"nelem","","",252,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[12,"list","","",256,null],[12,"head","","",256,null],[12,"tail","","",256,null],[12,"nelem","","",256,null],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[12,"list","","",253,null],[0,"vec_deque","std::collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","std::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[12,"tail","","",265,null],[12,"head","","",265,null],[12,"buf","","",265,null],[3,"Iter","","`VecDeque` iterator.",null,null],[12,"ring","","",266,null],[12,"tail","","",266,null],[12,"head","","",266,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[12,"ring","","",267,null],[12,"tail","","",267,null],[12,"head","","",267,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[12,"inner","","",268,null],[3,"Drain","","A draining VecDeque iterator",null,null],[12,"after_tail","","",269,null],[12,"after_head","","",269,null],[12,"iter","","",269,null],[12,"deque","","",269,null],[0,"hash_map","std::collections","",null,null],[3,"DefaultResizePolicy","std::collections::hash_map","The default behavior of HashMap implements a load factor of 90.9%.\nThis behavior is characterized by the following condition:",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[12,"hash_state","","",338,null],[12,"table","","",338,null],[12,"resize_policy","","",338,null],[3,"Iter","","HashMap iterator.",null,null],[12,"inner","","",339,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[12,"inner","","",340,null],[3,"IntoIter","","HashMap move iterator.",null,null],[12,"inner","","",341,null],[3,"Keys","","HashMap keys iterator.",null,null],[12,"inner","","",342,null],[3,"Values","","HashMap values iterator.",null,null],[12,"inner","","",343,null],[3,"Drain","","HashMap drain iterator.",null,null],[12,"inner","","",344,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[12,"elem","","",345,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[12,"hash","","",346,null],[12,"key","","",346,null],[12,"elem","","",346,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[12,"k0","","",347,null],[12,"k1","","",347,null],[4,"SearchResult","","A result that works like Option<FullBucket<..>> but preserves\nthe reference that grants us access to the table in any case.",null,null],[13,"FoundExisting","","",348,null],[13,"TableRef","","",348,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",349,null],[13,"Vacant","","A vacant Entry.",349,null],[4,"VacantEntryState","","Possible states of a VacantEntry.",null,null],[13,"NeqElem","","The index is occupied, but the key to insert has precedence,\nand will kick the current one out on insertion.",350,null],[13,"NoElem","","The index is genuinely vacant.",350,null],[5,"search_hashed","","Search for a pre-hashed key.",null,{"inputs":[{"name":"m"},{"name":"safehash"},{"name":"f"}],"output":{"name":"searchresult"}}],[5,"pop_internal","","",null,null],[5,"robin_hood","","Perform robin hood bucket stealing at the given `bucket`. You must\nalso pass the position of that bucket's initial bucket so we don't have\nto recalculate it.",null,{"inputs":[{"name":"fullbucketmut"},{"name":"usize"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[5,"search_entry_hashed","","",null,{"inputs":[{"name":"rawtable"},{"name":"safehash"},{"name":"k"}],"output":{"name":"entry"}}],[0,"raw_table","","",null,null],[3,"RawTable","std::collections::hash_map::raw_table","The raw hashtable, providing safe-ish access to the unzipped and highly\noptimized arrays of hashes, keys, and values.",null,null],[12,"capacity","","",351,null],[12,"size","","",351,null],[12,"hashes","","",351,null],[12,"marker","","",351,null],[3,"RawBucket","","",null,null],[12,"hash","","",352,null],[12,"key","","",352,null],[12,"val","","",352,null],[12,"_marker","","",352,null],[3,"Bucket","","",null,null],[12,"raw","","",353,null],[12,"idx","","",353,null],[12,"table","","",353,null],[3,"EmptyBucket","","",null,null],[12,"raw","","",354,null],[12,"idx","","",354,null],[12,"table","","",354,null],[3,"FullBucket","","",null,null],[12,"raw","","",355,null],[12,"idx","","",355,null],[12,"table","","",355,null],[3,"GapThenFull","","",null,null],[12,"gap","","",356,null],[12,"full","","",356,null],[3,"SafeHash","","A hash that is not zero, since we use a hash of zero to represent empty\nbuckets.",null,null],[12,"hash","","",357,null],[3,"RawBuckets","","A raw iterator. The basis for some other iterators in this module. Although\nthis interface is safe, it's not used outside this module.",null,null],[12,"raw","","",358,null],[12,"hashes_end","","",358,null],[12,"marker","","",358,null],[3,"RevMoveBuckets","","An iterator that moves out buckets in reverse order. It leaves the table\nin an inconsistent state and should only be used for dropping\nthe table's remaining entries. It's used in the implementation of Drop.",null,null],[12,"raw","","",359,null],[12,"hashes_end","","",359,null],[12,"elems_left","","",359,null],[12,"marker","","",359,null],[3,"Iter","","Iterator over shared references to entries in a table.",null,null],[12,"iter","","",360,null],[12,"elems_left","","",360,null],[3,"IterMut","","Iterator over mutable references to entries in a table.",null,null],[12,"iter","","",361,null],[12,"elems_left","","",361,null],[3,"IntoIter","","Iterator over the entries in a table, consuming the table.",null,null],[12,"table","","",362,null],[12,"iter","","",362,null],[3,"Drain","","Iterator over the entries in a table, clearing the table.",null,null],[12,"table","","",363,null],[12,"iter","","",363,null],[4,"BucketState","","",null,null],[13,"Empty","","",364,null],[13,"Full","","",364,null],[5,"make_hash","","We need to remove hashes of 0. That's reserved for empty buckets.\nThis function wraps up `hash_keyed` to be the only way outside this\nmodule to generate a SafeHash.",null,{"inputs":[{"name":"s"},{"name":"t"}],"output":{"name":"safehash"}}],[5,"round_up_to_next","","Rounds up to a multiple of a power of two. Returns the closest multiple\nof `target_alignment` that is higher or equal to `unrounded`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"calculate_offsets","","",null,null],[5,"calculate_allocation","","",null,null],[6,"EmptyBucketImm","","",null,null],[6,"FullBucketImm","","",null,null],[6,"EmptyBucketMut","","",null,null],[6,"FullBucketMut","","",null,null],[17,"EMPTY_BUCKET","","",null,null],[11,"clone","","",352,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",353,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",357,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",357,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",357,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",357,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"offset","","",352,{"inputs":[{"name":"rawbucket"},{"name":"isize"}],"output":{"name":"rawbucket"}}],[11,"table","","Borrow a reference to the table.",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",354,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",354,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",353,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",353,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",353,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",353,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",353,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",353,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",353,{"inputs":[{"name":"bucket"}],"output":null}],[11,"next","","",354,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",354,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",354,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",354,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",355,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",355,null],[11,"take","","Removes this bucket's key and value from the hashtable.",355,null],[11,"replace","","",355,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",355,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",355,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",355,null],[11,"expect_full","","",364,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",356,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",356,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new_uninitialized","","Does not initialize the buckets. The caller should ensure they,\nat the very least, set every hash to EMPTY_BUCKET.",351,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"first_bucket_raw","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawbucket"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",351,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"raw_buckets","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawbuckets"}}],[11,"iter","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"rev_move_buckets","","Returns an iterator that copies out each entry. Used while the table\nis being dropped.",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"revmovebuckets"}}],[11,"clone","","",358,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",358,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",359,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",360,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",360,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"len","","",360,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",361,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"len","","",361,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",362,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"len","","",362,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",363,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"len","","",363,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",363,{"inputs":[{"name":"drain"}],"output":null}],[11,"clone","","",351,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",351,{"inputs":[{"name":"rawtable"}],"output":null}],[17,"INITIAL_LOG2_CAP","std::collections::hash_map","",null,null],[17,"INITIAL_CAPACITY","","",null,null],[8,"Recover","","",null,null],[16,"Key","","",365,null],[10,"get","","",365,{"inputs":[{"name":"recover"},{"name":"q"}],"output":{"name":"option"}}],[10,"take","","",365,{"inputs":[{"name":"recover"},{"name":"q"}],"output":{"name":"option"}}],[10,"replace","","",365,{"inputs":[{"name":"recover"},{"name":"key"}],"output":{"name":"option"}}],[11,"clone","","",366,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"new","","",366,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"min_capacity","","",366,{"inputs":[{"name":"defaultresizepolicy"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"usable_capacity","","An inverse of `min_capacity`, approximately.",366,{"inputs":[{"name":"defaultresizepolicy"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"into_option","","",348,{"inputs":[{"name":"searchresult"}],"output":{"name":"option"}}],[11,"make_hash","","",338,{"inputs":[{"name":"hashmap"},{"name":"x"}],"output":{"name":"safehash"}}],[11,"search","","Search for a key, yielding the index if it's found in the hashtable.\nIf you already have the hash for the key lying around, use\nsearch_hashed.",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"search_mut","","",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert_hashed_ordered","","",338,{"inputs":[{"name":"hashmap"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":null}],[11,"new","","Creates an empty HashMap.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",338,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",338,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",338,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",338,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":null}],[11,"resize","","Resizes the internal vectors to a new capacity. It's your responsibility to:\n1) Make sure the new capacity is enough for all the elements, accounting\n   for the load factor.\n2) Ensure new_capacity is a power of two or zero.",338,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",338,{"inputs":[{"name":"hashmap"}],"output":null}],[11,"insert_hashed_nocheck","","Insert a pre-hashed key-value pair, without first checking\nthat there's enough room in the buckets. Returns a reference to the\nnewly insert value.",338,{"inputs":[{"name":"hashmap"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"insert_or_replace_with","","",338,{"inputs":[{"name":"hashmap"},{"name":"safehash"},{"name":"k"},{"name":"v"},{"name":"f"}],"output":{"name":"v"}}],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",338,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",338,{"inputs":[{"name":"hashmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",338,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",338,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",338,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",339,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",342,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",343,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",338,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",339,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"len","","",339,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",340,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"len","","",340,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",341,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"len","","",341,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",342,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"len","","",342,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",343,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"len","","",343,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",344,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"len","","",344,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",349,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",349,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",345,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",345,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",345,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",345,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",345,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",346,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",338,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",338,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":null}],[11,"extend","","",338,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":null}],[11,"clone","","",347,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",347,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",347,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",347,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",338,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",338,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[0,"hash_set","std::collections","",null,null],[3,"HashSet","std::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[12,"map","","",367,null],[3,"Iter","","HashSet iterator",null,null],[12,"iter","","",368,null],[3,"IntoIter","","HashSet move iterator",null,null],[12,"iter","","",369,null],[3,"Drain","","HashSet drain iterator",null,null],[12,"iter","","",370,null],[3,"Intersection","","Intersection iterator",null,null],[12,"iter","","",371,null],[12,"other","","",371,null],[3,"Difference","","Difference iterator",null,null],[12,"iter","","",372,null],[12,"other","","",372,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[12,"iter","","",373,null],[3,"Union","","Set union iterator.",null,null],[12,"iter","","",374,null],[17,"INITIAL_CAPACITY","","",null,null],[11,"clone","","",367,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",367,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",367,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",367,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",367,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",367,{"inputs":[{"name":"hashset"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",367,{"inputs":[{"name":"hashset"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",367,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",367,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",367,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",367,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",367,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",367,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",367,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",367,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",367,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",367,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":null}],[11,"extend","","",367,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":null}],[11,"default","","",367,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",367,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",368,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",368,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"len","","",368,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",369,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"len","","",369,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",370,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"len","","",370,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",371,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",371,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"clone","","",372,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",372,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"clone","","",373,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",373,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"clone","","",374,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",374,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",374,null],[0,"hash_state","std::collections","",null,null],[3,"DefaultState","std::collections::hash_state","A structure which is a factory for instances of `Hasher` which implement the\ndefault trait.",null,null],[8,"HashState","","A trait representing stateful hashes which can be used to hash keys in a\n`HashMap`.",null,null],[16,"Hasher","","Type of the hasher that will be created.",375,null],[10,"hasher","","Creates a new hasher based on the given state of this object.",375,{"inputs":[{"name":"hashstate"}],"output":{"name":"hasher"}}],[11,"hasher","","",376,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",376,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",376,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[0,"env","std","Enviroment data",null,null],[5,"args","std::env","Arguments",null,{"inputs":[],"output":{"name":"iter"}}],[5,"args_init","","Initialize arguments",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"args_destroy","","Destroy arguments",null,{"inputs":[],"output":null}],[5,"current_dir","","Method to return the current directory\nIf the current directory cannot be found, None will be returned",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Set the current directory",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"var","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[7,"_args","","",null,null],[0,"fs","std","",null,null],[3,"File","std::fs","A Unix-style file",null,null],[12,"fd","","The id for the file",377,null],[3,"FileType","","",null,null],[12,"dir","","",378,null],[12,"file","","",378,null],[3,"DirEntry","","",null,null],[12,"path","","",379,null],[12,"dir","","",379,null],[12,"file","","",379,null],[3,"ReadDir","","",null,null],[12,"file","","",380,null],[5,"create_dir","","Create a new directory, using a path\nThe default mode of the directory is 744",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"read_dir","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"remove_dir","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"remove_file","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_fd","","",377,{"inputs":[{"name":"file"},{"name":"usize"}],"output":{"name":"result"}}],[11,"open","","Open a new file using a path",377,{"inputs":[{"name":"file"},{"name":"str"}],"output":{"name":"result"}}],[11,"create","","Create a new file using a path",377,{"inputs":[{"name":"file"},{"name":"str"}],"output":{"name":"result"}}],[11,"dup","","Duplicate the file",377,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"path","","Get the canonical path of the file",377,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_all","","Flush the file data and metadata",377,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","Flush the file data",377,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates the file",377,{"inputs":[{"name":"file"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read","","",377,null],[11,"write","","",377,null],[11,"seek","","Seek a given position",377,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",377,{"inputs":[{"name":"file"}],"output":null}],[11,"is_dir","","",378,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",378,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"file_name","","",379,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_type","","",379,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"path","","",379,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"next","","",380,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[0,"io","std","IO",null,null],[11,"new","system::error","",381,{"inputs":[{"name":"error"},{"name":"isize"}],"output":{"name":"error"}}],[11,"mux","","",381,{"inputs":[{"name":"error"},{"name":"result"}],"output":{"name":"usize"}}],[11,"demux","","",381,{"inputs":[{"name":"error"},{"name":"usize"}],"output":{"name":"result"}}],[11,"text","","",381,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",381,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",381,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","system::scheme","",382,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"fmt","","",382,{"inputs":[{"name":"packet"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",382,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"deref","","",382,null],[11,"deref_mut","","",382,null],[3,"Error","std::io","",null,null],[12,"errno","","",381,null],[3,"Stdin","","Standard Input",null,null],[3,"Stdout","","Standard Output",null,null],[3,"Stderr","","Standard Error",null,null],[4,"SeekFrom","","Seek Location",null,null],[13,"Start","","The start point",383,null],[13,"Current","","The current point",383,null],[13,"End","","The end point",383,null],[5,"copy","","",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[5,"stdin","","Create a standard input",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Create a standard output",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Create a standard error",null,{"inputs":[],"output":{"name":"stderr"}}],[5,"_print","","",null,{"inputs":[{"name":"arguments"}],"output":null}],[0,"prelude","","",null,null],[6,"Result","","",null,null],[8,"Read","","Types you can read",null,null],[10,"read","","Read a file to a buffer",384,null],[11,"read_to_end","","Read the file to the end",384,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read the file to a string",384,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"bytes","","Return an iterator of the bytes",384,{"inputs":[{"name":"read"}],"output":{"name":"intoiter"}}],[8,"Write","","Types you can write",null,null],[10,"write","","Write to the file",385,null],[11,"write_fmt","","Write a format to the file",385,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flush","","",385,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[8,"Seek","","",null,null],[10,"seek","","",386,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read_line","","",387,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",387,null],[11,"write","","",388,null],[11,"write","","",389,null],[0,"net","std","A module dealing with network connections",null,null],[3,"n16","std::net","",null,null],[12,"bytes","","",390,null],[3,"n32","","",null,null],[12,"bytes","","",391,null],[3,"MACAddr","","",null,null],[12,"bytes","","",392,null],[3,"IPv4Addr","","",null,null],[12,"bytes","","",393,null],[3,"IPv6Addr","","",null,null],[12,"bytes","","",394,null],[3,"Checksum","","",null,null],[12,"data","","",395,null],[7,"BROADCAST_MAC_ADDR","","",null,null],[7,"MAC_ADDR","","",null,null],[7,"BROADCAST_IP_ADDR","","",null,null],[7,"IP_ADDR","","",null,null],[8,"FromBytes","","",null,null],[10,"from_bytes","","",396,{"inputs":[{"name":"frombytes"},{"name":"vec"}],"output":{"name":"option"}}],[8,"ToBytes","","",null,null],[10,"to_bytes","","",397,{"inputs":[{"name":"tobytes"}],"output":{"name":"vec"}}],[11,"clone","","",390,{"inputs":[{"name":"n16"}],"output":{"name":"n16"}}],[11,"new","","",390,{"inputs":[{"name":"n16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"get","","",390,{"inputs":[{"name":"n16"}],"output":{"name":"u16"}}],[11,"set","","",390,{"inputs":[{"name":"n16"},{"name":"u16"}],"output":null}],[11,"clone","","",391,{"inputs":[{"name":"n32"}],"output":{"name":"n32"}}],[11,"new","","",391,{"inputs":[{"name":"n32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get","","",391,{"inputs":[{"name":"n32"}],"output":{"name":"u32"}}],[11,"set","","",391,{"inputs":[{"name":"n32"},{"name":"u32"}],"output":null}],[11,"clone","","",392,{"inputs":[{"name":"macaddr"}],"output":{"name":"macaddr"}}],[11,"equals","","",392,{"inputs":[{"name":"macaddr"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_string","","",392,{"inputs":[{"name":"macaddr"},{"name":"string"}],"output":{"name":"self"}}],[11,"to_string","","",392,{"inputs":[{"name":"macaddr"}],"output":{"name":"string"}}],[11,"clone","","",393,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"equals","","",393,{"inputs":[{"name":"ipv4addr"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_string","","",393,{"inputs":[{"name":"ipv4addr"},{"name":"string"}],"output":{"name":"self"}}],[11,"to_string","","",393,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"string"}}],[11,"clone","","",394,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"clone","","",395,{"inputs":[{"name":"checksum"}],"output":{"name":"checksum"}}],[11,"check","","",395,{"inputs":[{"name":"checksum"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"calculate","","",395,{"inputs":[{"name":"checksum"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"sum","","",395,{"inputs":[{"name":"checksum"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"compile","","",395,{"inputs":[{"name":"checksum"},{"name":"usize"}],"output":{"name":"u16"}}],[0,"path","std","",null,null],[3,"Display","std::path","",null,null],[12,"string","","",398,null],[3,"Path","","",null,null],[12,"inner","","",399,null],[3,"PathBuf","","",null,null],[12,"inner","","",400,null],[11,"fmt","","",398,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new path\n# Safety\nThis uses the same logic in libstd, it should be safe for valid &str",399,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_ref","std::string","",258,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",400,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"fmt","","",400,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",400,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"to_str","","",400,{"inputs":[{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"to_string","","",400,{"inputs":[{"name":"pathbuf"}],"output":{"name":"string"}}],[11,"display","","",400,{"inputs":[{"name":"pathbuf"}],"output":{"name":"display"}}],[0,"process","std","",null,null],[3,"ExitStatus","std::process","",null,null],[12,"status","","",401,null],[3,"Child","","",null,null],[12,"pid","","",402,null],[3,"Command","","",null,null],[12,"path","","",403,null],[12,"args","","",403,null],[5,"exit","","",null,{"inputs":[{"name":"i32"}],"output":null}],[11,"success","","",401,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",401,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"id","","",402,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","",402,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"new","","",403,{"inputs":[{"name":"command"},{"name":"str"}],"output":{"name":"command"}}],[11,"arg","","",403,{"inputs":[{"name":"command"},{"name":"str"}],"output":{"name":"command"}}],[11,"spawn","","",403,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[0,"sync","std","",null,null],[3,"Arc","std::sync","An atomically reference counted wrapper for shared state.",null,null],[12,"_ptr","","",211,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[12,"_ptr","","",215,null],[0,"atomic","","Atomic types",null,null],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[12,"v","","",29,null],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads.",null,null],[12,"v","","",30,null],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads.",null,null],[12,"v","","",31,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[12,"p","","",32,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM's\n`Monotonic` ordering.",33,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",33,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",33,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",33,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",33,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"Mutex","std::sync","A mutex, i.e. a form of safe shared memory between threads. See rust std's Mutex.",null,null],[12,"lock","","",404,null],[12,"value","","",404,null],[3,"MutexGuard","","A mutex guard (returned by .lock())",null,null],[12,"lock","","",405,null],[12,"data","","",405,null],[3,"StaticMutex","","",null,null],[12,"lock","","",406,null],[3,"RwLock","","",null,null],[12,"inner","","",407,null],[12,"value","","",407,null],[3,"RwLockReadGuard","","A read guard (returned by .read())",null,null],[12,"inner","","",408,null],[12,"data","","",408,null],[3,"RwLockWriteGuard","","A write guard (returned by .write())",null,null],[12,"inner","","",409,null],[12,"data","","",409,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[12,"mutex","","",410,null],[12,"cnt","","",410,null],[12,"lock_cnt","","",410,null],[0,"mpsc","","",null,null],[5,"channel","std::sync::mpsc","",null,null],[0,"mpsc_queue","","",null,null],[3,"Node","std::sync::mpsc::mpsc_queue","",null,null],[12,"val","","",411,null],[12,"next","","",411,null],[3,"Queue","","",null,null],[12,"head","","",412,null],[12,"tail","","",412,null],[4,"PopResult","","",null,null],[13,"Invalid","","",413,null],[13,"Data","","",413,null],[13,"Empty","","",413,null],[11,"new","","",411,null],[11,"new","","",412,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","",412,{"inputs":[{"name":"queue"},{"name":"t"}],"output":null}],[11,"pop","","",412,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",412,{"inputs":[{"name":"queue"}],"output":null}],[0,"receiver","std::sync::mpsc","",null,null],[3,"Receiver","std::sync::mpsc::receiver","",null,null],[12,"queue","","",414,null],[4,"TryRecvError","","",null,null],[13,"Empty","","",415,null],[13,"Disconnected","","",415,null],[11,"try_recv","","",414,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","",414,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[0,"sender","std::sync::mpsc","",null,null],[3,"Sender","std::sync::mpsc::sender","",null,null],[12,"queue","","",416,null],[11,"clone","","",416,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"send","","",416,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[0,"mutex","std::sync","",null,null],[3,"Mutex","std::sync::mutex","A mutex, i.e. a form of safe shared memory between threads. See rust std's Mutex.",null,null],[12,"lock","","",404,null],[12,"value","","",404,null],[3,"Dummy","","",null,null],[3,"StaticMutex","","",null,null],[12,"lock","","",406,null],[3,"MutexGuard","","A mutex guard (returned by .lock())",null,null],[12,"lock","","",405,null],[12,"data","","",405,null],[7,"DUMMY","","",null,null],[11,"new","std::sync","Create a new mutex with value `value`.",404,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"self"}}],[11,"lock","","Lock the mutex",404,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"new","","Create a new mutex with value `value`.",406,{"inputs":[{"name":"staticmutex"}],"output":{"name":"self"}}],[11,"lock","","Lock the mutex",406,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","",406,{"inputs":[{"name":"staticmutex"}],"output":null}],[11,"new","","",405,{"inputs":[{"name":"mutexguard"},{"name":"atomicbool"},{"name":"unsafecell"}],"output":{"name":"self"}}],[11,"deref","","",405,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",405,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",405,{"inputs":[{"name":"mutexguard"}],"output":null}],[0,"once","","A \"once initialization\" primitive",null,null],[3,"Once","std::sync::once","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[12,"mutex","","",410,null],[12,"cnt","","",410,null],[12,"lock_cnt","","",410,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[11,"new","std::sync","Creates a new `Once` value.",410,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",410,{"inputs":[{"name":"once"},{"name":"f"}],"output":null}],[0,"rwlock","","",null,null],[3,"RwLockInner","std::sync::rwlock","",null,null],[12,"writer","","",417,null],[12,"readers","","",417,null],[3,"RwLock","","",null,null],[12,"inner","","",407,null],[12,"value","","",407,null],[3,"RwLockReadGuard","","A read guard (returned by .read())",null,null],[12,"inner","","",408,null],[12,"data","","",408,null],[3,"RwLockWriteGuard","","A write guard (returned by .write())",null,null],[12,"inner","","",409,null],[12,"data","","",409,null],[11,"new","std::sync","Create a new mutex with value `value`.",407,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"self"}}],[11,"read","","Lock for read",407,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockreadguard"}}],[11,"write","","Lock for write",407,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockwriteguard"}}],[11,"new","","",408,{"inputs":[{"name":"rwlockreadguard"},{"name":"mutex"},{"name":"unsafecell"}],"output":{"name":"self"}}],[11,"deref","","",408,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"drop","","",408,{"inputs":[{"name":"rwlockreadguard"}],"output":null}],[11,"new","","",409,{"inputs":[{"name":"rwlockwriteguard"},{"name":"mutex"},{"name":"unsafecell"}],"output":{"name":"self"}}],[11,"deref","","",409,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",409,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",409,{"inputs":[{"name":"rwlockwriteguard"}],"output":null}],[0,"time","std","A module for time",null,null],[3,"Duration","std::time","",null,null],[12,"secs","","",418,null],[12,"nanos","","",418,null],[17,"NANOS_PER_MICRO","","",null,null],[17,"NANOS_PER_MILLI","","",null,null],[17,"NANOS_PER_SEC","","",null,null],[11,"clone","","",418,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Create a new duration",418,{"inputs":[{"name":"duration"},{"name":"i64"},{"name":"i32"}],"output":{"name":"self"}}],[11,"monotonic","","Get the monotonic time",418,{"inputs":[{"name":"duration"}],"output":{"name":"self"}}],[11,"realtime","","Get the realtime",418,{"inputs":[{"name":"duration"}],"output":{"name":"self"}}],[11,"add","","",418,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",418,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",418,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",418,{"inputs":[{"name":"duration"},{"name":"self"}],"output":{"name":"option"}}],[0,"rt","std","",null,null],[5,"begin_unwind","std::rt","",null,null],[5,"begin_unwind_fmt","","",null,null],[5,"_start_stack","","",null,null],[5,"lang_start","","",null,null],[0,"rand_old","std","",null,null],[5,"rand","std::rand_old","Generate pseudo random number",null,{"inputs":[],"output":{"name":"usize"}}],[7,"NEXT","","",null,null],[0,"alloc_system","std","",null,null],[5,"__rust_allocate","std::alloc_system","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_usable_size","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"panic","std","",null,null],[3,"DebugStream","std::panic","",null,null],[5,"panic_impl","","",null,{"inputs":[{"name":"arguments"},{"name":"str"},{"name":"u32"}],"output":null}],[11,"write_str","","",419,{"inputs":[{"name":"debugstream"},{"name":"str"}],"output":{"name":"result"}}],[0,"url","std","",null,null],[3,"Url","std::url","An URL, see wiki",null,null],[12,"string","","",420,null],[11,"new","","Create a new empty URL",420,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[11,"from_str","","Create an URL from a string literal",420,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_string","","Create an URL from `String`",420,{"inputs":[{"name":"url"},{"name":"string"}],"output":{"name":"self"}}],[11,"to_string","","Convert to string",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"len","","Get the length of this URL",420,{"inputs":[{"name":"url"}],"output":{"name":"usize"}}],[11,"scheme","","Return the scheme of this url",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"username","","Get the owner's username (the conventional @)",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"password","","Get the password from the url",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"host","","Get the host",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"port","","Get the post of the url",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"path","","Get the path of the url",420,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"path_parts","","Return the parts of the path",420,{"inputs":[{"name":"url"}],"output":{"name":"vec"}}],[11,"clone","","",420,{"inputs":[{"name":"url"}],"output":{"name":"self"}}],[0,"get_slice","std","",null,null],[8,"GetSlice","std::get_slice","Bounded slice abstraction",null,null],[10,"get_slice","","",421,{"inputs":[{"name":"getslice"},{"name":"option"},{"name":"option"}],"output":{"name":"self"}}],[0,"to_num","std","Types convertable to integers",null,null],[8,"ToNum","std::to_num","Parse the string to a integer using a given radix",null,null],[10,"to_num_radix","","",422,{"inputs":[{"name":"tonum"},{"name":"u32"}],"output":{"name":"u32"}}],[10,"to_num_radix_signed","","",422,{"inputs":[{"name":"tonum"},{"name":"u32"}],"output":{"name":"i32"}}],[10,"to_num","","",422,{"inputs":[{"name":"tonum"}],"output":{"name":"u32"}}],[10,"to_num_signed","","",422,{"inputs":[{"name":"tonum"}],"output":{"name":"i32"}}],[14,"assert!","std","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"write!","","Use the `format!` syntax to write data into a buffer.",null,null],[14,"writeln!","","Use the `format!` syntax to write data into a buffer, appending a newline.",null,null],[14,"unreachable!","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented!","","A standardized placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed.",null,null],[14,"vec!","","Creates a `Vec` containing the arguments.",null,null],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information.",null,null],[14,"panic!","","The entry point for panic of Rust threads.",null,null],[14,"print!","","Macro for printing to the standard output.",null,null],[14,"println!","","Macro for printing to the standard output, with a newline.",null,null],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. Can only be used in\nfunctions that return `Result` because of the early return of `Err` that\nit provides.",null,null],[14,"select!","","A macro to select an event from a number of receivers.",null,null]],"paths":[[8,"Any"],[3,"TypeId"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[8,"PartialEq"],[8,"Eq"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"HashState"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Step"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Repr"],[3,"Arc"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"Utf16Units"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[8,"IntoCow"],[8,"Borrow"],[8,"BorrowMut"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"SliceConcatExt"],[8,"MutableByteVector"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[8,"ToString"],[8,"OverflowingOps"],[8,"DecodableFloat"],[8,"RawFloat"],[8,"FullOps"],[8,"Zero"],[8,"One"],[8,"Float"],[3,"Range"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"SampleRange"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[8,"Reseeder"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[8,"Error"],[3,"EscapeDefault"],[8,"AsciiExt"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[4,"SearchResult"],[4,"Entry"],[4,"VacantEntryState"],[3,"RawTable"],[3,"RawBucket"],[3,"Bucket"],[3,"EmptyBucket"],[3,"FullBucket"],[3,"GapThenFull"],[3,"SafeHash"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"BucketState"],[8,"Recover"],[3,"DefaultResizePolicy"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[8,"HashState"],[3,"DefaultState"],[3,"File"],[3,"FileType"],[3,"DirEntry"],[3,"ReadDir"],[3,"Error"],[3,"Packet"],[4,"SeekFrom"],[8,"Read"],[8,"Write"],[8,"Seek"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"n16"],[3,"n32"],[3,"MACAddr"],[3,"IPv4Addr"],[3,"IPv6Addr"],[3,"Checksum"],[8,"FromBytes"],[8,"ToBytes"],[3,"Display"],[3,"Path"],[3,"PathBuf"],[3,"ExitStatus"],[3,"Child"],[3,"Command"],[3,"Mutex"],[3,"MutexGuard"],[3,"StaticMutex"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Once"],[3,"Node"],[3,"Queue"],[4,"PopResult"],[3,"Receiver"],[4,"TryRecvError"],[3,"Sender"],[3,"RwLockInner"],[3,"Duration"],[3,"DebugStream"],[3,"Url"],[8,"GetSlice"],[8,"ToNum"]]};
searchIndex['rand'] = {"items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[12,"rng","","",0,null],[12,"_marker","","",0,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[12,"rng","","",1,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[12,"z","","",2,null],[12,"w","","",2,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[12,"_marker","","",3,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",4,null],[12,"item","","The actual item which is being weighted",4,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[12,"items","","",5,null],[12,"weight_range","","",5,null],[5,"ziggurat","","Sample a random number using the Ziggurat method (specifically the\nZIGNOR variant from Doornik 2005). Most of the arguments are\ndirectly from the paper:",null,{"inputs":[{"name":"r"},{"name":"bool"},{"name":"zigtable"},{"name":"zigtable"},{"name":"p"},{"name":"z"}],"output":{"name":"f64"}}],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[12,"low","","",6,null],[12,"range","","",6,null],[12,"accept_zone","","",6,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",7,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",7,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",6,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",6,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[12,"repr","","",8,null],[3,"GammaSmallShape","","Gamma distribution where the shape parameter is less than 1.",null,null],[12,"inv_shape","","",9,null],[12,"large_shape","","",9,null],[3,"GammaLargeShape","","Gamma distribution where the shape parameter is larger than 1.",null,null],[12,"scale","","",10,null],[12,"c","","",10,null],[12,"d","","",10,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[12,"repr","","",11,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[12,"numer","","",12,null],[12,"denom","","",12,null],[12,"dof_ratio","","",12,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[12,"chi","","",13,null],[12,"dof","","",13,null],[4,"GammaRepr","","",null,null],[13,"Large","","",14,null],[13,"One","","",14,null],[13,"Small","","",14,null],[4,"ChiSquaredRepr","","",null,null],[13,"DoFExactlyOne","","",15,null],[13,"DoFAnythingElse","","",15,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",8,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"new_raw","","",9,{"inputs":[{"name":"gammasmallshape"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gammasmallshape"}}],[11,"new_raw","","",10,{"inputs":[{"name":"gammalargeshape"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gammalargeshape"}}],[11,"sample","","",8,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",9,{"inputs":[{"name":"gammasmallshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",10,{"inputs":[{"name":"gammalargeshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"gammasmallshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"gammalargeshape"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",11,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",11,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",12,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",12,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",12,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",13,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",13,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[12,"mean","","",16,null],[12,"std_dev","","",16,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[12,"norm","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",18,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",16,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",16,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",16,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",17,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",17,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",17,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[12,"lambda_inverse","","`lambda` stored as `1/lambda`, since this is what we scale by.",19,null],[11,"clone","","",20,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",20,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",19,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",19,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",19,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",19,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[0,"ziggurat_tables","rand::distributions","",null,null],[6,"ZigTable","rand::distributions::ziggurat_tables","",null,null],[7,"ZIG_NORM_X","","",null,null],[7,"ZIG_NORM_F","","",null,null],[7,"ZIG_EXP_X","","",null,null],[7,"ZIG_EXP_F","","",null,null],[17,"ZIG_NORM_R","","",null,null],[17,"ZIG_EXP_R","","",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",21,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",22,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"new","","",3,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"sample","","",3,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","Create a new `WeightedChoice`.",5,null],[11,"sample","","",5,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[12,"cnt","","",23,null],[12,"rsl","","",23,null],[12,"mem","","",23,null],[12,"a","","",23,null],[12,"b","","",23,null],[12,"c","","",23,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[12,"cnt","","",24,null],[12,"rsl","","",24,null],[12,"mem","","",24,null],[12,"a","","",24,null],[12,"b","","",24,null],[12,"c","","",24,null],[6,"w32","","",null,null],[6,"w64","","",null,null],[7,"EMPTY","","",null,null],[7,"EMPTY_64","","",null,null],[17,"RAND_SIZE_LEN","","",null,null],[17,"RAND_SIZE","","",null,null],[17,"RAND_SIZE_USIZE","","",null,null],[17,"RAND_SIZE_64_LEN","","",null,null],[17,"RAND_SIZE_64","","",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",23,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"init","","Initialises `self`. If `use_rsl` is true, then use the current value\nof `rsl` as a seed, otherwise construct one algorithmically (not\nrandomly).",23,{"inputs":[{"name":"isaacrng"},{"name":"bool"}],"output":null}],[11,"isaac","","Refills the output buffer (`self.rsl`)",23,{"inputs":[{"name":"isaacrng"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",23,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",23,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",23,null],[11,"rand","","",23,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",24,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"init","","Initialises `self`. If `use_rsl` is true, then use the current value\nof `rsl` as a seed, otherwise construct one algorithmically (not\nrandomly).",24,{"inputs":[{"name":"isaac64rng"},{"name":"bool"}],"output":null}],[11,"isaac64","","Refills the output buffer (`self.rsl`)",24,{"inputs":[{"name":"isaac64rng"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",24,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",24,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",24,null],[11,"rand","","",24,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[12,"buffer","","",25,null],[12,"state","","",25,null],[12,"index","","",25,null],[5,"core","","",null,null],[7,"EMPTY","","",null,null],[17,"KEY_WORDS","","",null,null],[17,"STATE_WORDS","","",null,null],[17,"CHACHA_ROUNDS","","",null,null],[11,"clone","","",25,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",25,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"init","","Initializes `self.state` with the appropriate key and constants",25,null],[11,"update","","Refill the internal output buffer (`self.buffer`)",25,{"inputs":[{"name":"chacharng"}],"output":null}],[11,"next_u32","","",25,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"rng","","",26,null],[12,"generation_threshold","","",26,null],[12,"bytes_generated","","",26,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",26,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[17,"DEFAULT_GENERATION_THRESHOLD","","How many bytes of entropy the underling RNG is allowed to generate\nbefore it is reseeded.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",27,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",26,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",26,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",26,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[11,"reseed","","",26,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",26,null],[11,"clone","","",28,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",28,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",28,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[0,"rand_impls","rand","The implementations of `Rand` for the built-in types.",null,null],[0,"f64_rand_impls","rand::rand_impls","",null,null],[17,"SCALE","rand::rand_impls::f64_rand_impls","",null,null],[11,"rand","rand","",29,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",30,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[0,"f32_rand_impls","rand::rand_impls","",null,null],[17,"SCALE","rand::rand_impls::f32_rand_impls","",null,null],[11,"rand","rand","",29,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",30,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",31,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[8,"FloatMath","rand","",null,null],[10,"exp","","",32,{"inputs":[{"name":"floatmath"}],"output":{"name":"self"}}],[10,"ln","","",32,{"inputs":[{"name":"floatmath"}],"output":{"name":"self"}}],[10,"sqrt","","",32,{"inputs":[{"name":"floatmath"}],"output":{"name":"self"}}],[10,"powf","","",32,{"inputs":[{"name":"floatmath"},{"name":"self"}],"output":{"name":"self"}}],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",33,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",34,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",34,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",34,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",34,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",34,null],[11,"gen","","Return a random value of a `Rand` type.",34,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",34,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",34,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",34,{"inputs":[{"name":"rng"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",34,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",34,null],[11,"shuffle","","Shuffle a mutable slice in place.",34,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",35,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",35,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",0,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",1,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",2,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",2,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",2,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",2,null],[11,"rand","","",2,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}]],"paths":[[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"RandSample"],[3,"Weighted"],[3,"WeightedChoice"],[3,"Range"],[8,"SampleRange"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[4,"GammaRepr"],[4,"ChiSquaredRepr"],[3,"Normal"],[3,"LogNormal"],[3,"StandardNormal"],[3,"Exp"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[8,"FloatMath"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"]]};
searchIndex['collections'] = {"items":[[0,"boxed","collections","A pointer type for heap allocation.",null,null],[17,"HEAP","collections::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[11,"clone","alloc::boxed","",0,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",1,null],[11,"make_place","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",2,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",0,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",1,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",2,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",2,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",2,null],[11,"default","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",2,null],[11,"clone","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",2,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",2,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",2,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","alloc::arc","",3,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",4,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",4,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",4,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",3,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",3,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",3,null],[11,"eq","","Equality for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",3,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",5,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",5,null],[11,"clone","","Makes a clone of the `Rc<T>`.",5,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",5,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",5,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",6,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",6,null],[11,"clone","","Makes a clone of the `Weak<T>`.",6,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",6,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",6,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",5,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",5,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",7,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",7,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",7,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",7,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",7,null],[11,"cap","","Gets the capacity of the allocation.",7,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",7,null],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common\nenough to want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",7,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",7,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",7,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",7,{"inputs":[{"name":"rawvec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",7,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",7,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",7,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",7,null],[3,"ExchangeHeapSingleton","collections::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[12,"_force_singleton","","",0,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[12,"ptr","","",1,null],[12,"size","","",1,null],[12,"align","","",1,null],[12,"marker","","",1,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box<FnOnce()>` in a data structure, you should use\n`Box<FnBox()>`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box<FnOnce()>`\nclosures become directly usable.)",null,null],[16,"Output","","",8,null],[10,"call_box","","",8,null],[3,"BTreeMap","collections","A map based on a B-Tree.",null,null],[12,"root","","",9,null],[12,"length","","",9,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[12,"map","","",10,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",11,null],[13,"Excluded","","An exclusive bound.",11,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",11,null],[0,"macros","","",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[12,"data","","",12,null],[3,"Hole","","Hole represents a hole in a slice i.e. an index without valid value\n(because it was moved from or duplicated).\nIn drop, `Hole` will restore the slice by filling the hole\nposition with the value that was originally removed.",null,null],[12,"data","","",13,null],[12,"elt","","`elt` is always `Some` from new until drop.",13,null],[12,"pos","","",13,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[12,"iter","","",14,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[12,"iter","","",15,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[12,"iter","","",16,null],[11,"clone","","",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"self"}}],[11,"clone_from","","",12,{"inputs":[{"name":"binaryheap"},{"name":"self"}],"output":null}],[11,"default","","",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",12,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",12,{"inputs":[{"name":"binaryheap"}],"output":null}],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",12,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":null}],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",12,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",12,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"sift_up","","",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"sift_down_range","","Take an element at `pos` and move it down the heap,\nwhile its children are larger.",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"sift_down","","",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":null}],[11,"sift_down_to_bottom","","Take an element at `pos` and move it all the way down the heap,\nthen sift it up to its position.",12,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":null}],[11,"len","","Returns the length of the binary heap.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",12,{"inputs":[{"name":"binaryheap"}],"output":null}],[11,"new","","Create a new Hole at index `pos`.",13,null],[11,"pos","","",13,{"inputs":[{"name":"hole"}],"output":{"name":"usize"}}],[11,"element","","Return a reference to the element removed",13,{"inputs":[{"name":"hole"}],"output":{"name":"t"}}],[11,"get","","Return a reference to the element at `index`.",13,{"inputs":[{"name":"hole"},{"name":"usize"}],"output":{"name":"t"}}],[11,"move_to","","Move hole to new location",13,{"inputs":[{"name":"hole"},{"name":"usize"}],"output":null}],[11,"drop","","",13,{"inputs":[{"name":"hole"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",14,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",12,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",12,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",12,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",12,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":null}],[11,"extend","","",12,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":null}],[0,"btree","collections","",null,null],[0,"node","collections::btree","",null,null],[3,"LeafNode","collections::btree::node","",null,null],[12,"keys","","",17,null],[12,"vals","","",17,null],[12,"parent","","",17,null],[12,"parent_idx","","",17,null],[12,"len","","",17,null],[3,"InternalNode","","",null,null],[12,"data","","",18,null],[12,"edges","","",18,null],[3,"BoxedNode","","",null,null],[12,"ptr","","",19,null],[3,"Root","","An owned tree. Note that despite being owned, this does not have a destructor,\nand must be cleaned up manually.",null,null],[12,"node","","",20,null],[12,"height","","",20,null],[3,"NodeRef","","A reference to a node.",null,null],[12,"height","","",21,null],[12,"node","","",21,null],[12,"root","","",21,null],[12,"_marker","","",21,null],[3,"Handle","","",null,null],[12,"node","","",22,null],[12,"idx","","",22,null],[12,"_marker","","",22,null],[4,"ForceResult","","",null,null],[13,"Leaf","","",23,null],[13,"Internal","","",23,null],[4,"InsertResult","","",null,null],[13,"Fit","","",24,null],[13,"Split","","",24,null],[5,"slice_insert","","",null,null],[5,"slice_remove","","",null,null],[0,"marker","","",null,null],[3,"Immut","collections::btree::node::marker","",null,null],[3,"Mut","","",null,null],[4,"Leaf","","",null,null],[4,"Internal","","",null,null],[4,"LeafOrInternal","","",null,null],[4,"Owned","","",null,null],[4,"KV","","",null,null],[4,"Edge","","",null,null],[17,"B","collections::btree::node","",null,null],[17,"CAPACITY","","",null,null],[11,"new","","",17,{"inputs":[{"name":"leafnode"}],"output":{"name":"self"}}],[11,"new","","",18,{"inputs":[{"name":"internalnode"}],"output":{"name":"self"}}],[11,"from_leaf","","",19,{"inputs":[{"name":"boxednode"},{"name":"box"}],"output":{"name":"self"}}],[11,"from_internal","","",19,{"inputs":[{"name":"boxednode"},{"name":"box"}],"output":{"name":"self"}}],[11,"from_ptr","","",19,{"inputs":[{"name":"boxednode"},{"name":"nonzero"}],"output":{"name":"self"}}],[11,"as_ptr","","",19,{"inputs":[{"name":"boxednode"}],"output":{"name":"nonzero"}}],[11,"new_leaf","","",20,{"inputs":[{"name":"root"}],"output":{"name":"self"}}],[11,"as_ref","","",20,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",20,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",20,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",20,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",20,{"inputs":[{"name":"root"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"self"}}],[11,"as_internal","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"internalnode"}}],[11,"as_internal_mut","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"internalnode"}}],[11,"len","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"reborrow","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"as_leaf","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"leafnode"}}],[11,"keys","","",21,null],[11,"vals","","",21,null],[11,"ascend","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"cast_unchecked","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"reborrow_mut","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"as_leaf_mut","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"leafnode"}}],[11,"keys_mut","","",21,null],[11,"vals_mut","","",21,null],[11,"into_slices","","",21,null],[11,"into_root_mut","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",21,null],[11,"push","","",21,{"inputs":[{"name":"noderef"},{"name":"k"},{"name":"v"}],"output":null}],[11,"push_front","","",21,{"inputs":[{"name":"noderef"},{"name":"k"},{"name":"v"}],"output":null}],[11,"push","","",21,{"inputs":[{"name":"noderef"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":null}],[11,"push_front","","",21,{"inputs":[{"name":"noderef"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":null}],[11,"pop","","",21,null],[11,"pop_front","","",21,null],[11,"force","","",21,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"self"}}],[11,"into_node","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",22,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"self"}}],[11,"left_edge","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",22,{"inputs":[{"name":"handle"},{"name":"self"}],"output":{"name":"bool"}}],[11,"reborrow","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",22,{"inputs":[{"name":"handle"},{"name":"noderef"},{"name":"usize"}],"output":{"name":"self"}}],[11,"left_kv","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert_fit","","",22,null],[11,"insert","","",22,null],[11,"correct_parent_link","","",22,{"inputs":[{"name":"handle"}],"output":null}],[11,"cast_unchecked","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"insert_fit","","",22,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":null}],[11,"insert","","",22,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",22,null],[11,"into_kv_mut","","",22,null],[11,"kv_mut","","",22,null],[11,"split","","",22,null],[11,"remove","","",22,null],[11,"split","","",22,null],[11,"can_merge","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",22,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[0,"search","collections::btree","",null,null],[4,"SearchResult","collections::btree::search","",null,null],[13,"Found","","",25,null],[13,"GoDown","","",25,null],[5,"search_tree","","",null,{"inputs":[{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[5,"search_node","","",null,{"inputs":[{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[5,"search_linear","","",null,null],[0,"map","collections::btree","",null,null],[3,"BTreeMap","collections::btree::map","A map based on a B-Tree.",null,null],[12,"root","","",9,null],[12,"length","","",9,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[12,"range","","",26,null],[12,"length","","",26,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[12,"range","","",27,null],[12,"length","","",27,null],[3,"IntoIter","","An owning iterator over a BTreeMap's entries.",null,null],[12,"front","","",28,null],[12,"back","","",28,null],[12,"length","","",28,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[12,"inner","","",29,null],[3,"Values","","An iterator over a BTreeMap's values.",null,null],[12,"inner","","",30,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[12,"front","","",31,null],[12,"back","","",31,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[12,"front","","",32,null],[12,"back","","",32,null],[12,"_marker","","",32,null],[3,"VacantEntry","","A vacant Entry.",null,null],[12,"key","","",33,null],[12,"handle","","",33,null],[12,"length","","",33,null],[12,"_marker","","",33,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[12,"handle","","",34,null],[12,"length","","",34,null],[12,"_marker","","",34,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",35,null],[13,"Occupied","","An occupied Entry",35,null],[4,"UnderflowResult","","",null,null],[13,"AtRoot","","",36,null],[13,"EmptyParent","","",36,null],[13,"Merged","","",36,null],[13,"Stole","","",36,null],[5,"first_leaf_edge","","",null,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[5,"last_leaf_edge","","",null,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[5,"unwrap_unchecked","","",null,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[5,"handle_underfull_node","","",null,{"inputs":[{"name":"noderef"}],"output":{"name":"underflowresult"}}],[11,"drop","collections","",9,{"inputs":[{"name":"btreemap"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"get","","",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",9,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"option"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",9,{"inputs":[{"name":"btreemap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",9,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",9,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",9,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",9,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","collections::btree::map","",26,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",26,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",26,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",27,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",27,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","collections","",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","collections::btree::map","",28,{"inputs":[{"name":"intoiter"}],"output":null}],[11,"next","","",28,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",29,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",29,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",29,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",30,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",30,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",30,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",31,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_unchecked","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back_unchecked","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",32,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_unchecked","","",32,null],[11,"next_back","","",32,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back_unchecked","","",32,null],[11,"from_iter","collections","",9,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",9,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":null}],[11,"extend","","",9,{"inputs":[{"name":"btreemap"},{"name":"i"}],"output":null}],[11,"hash","","",9,{"inputs":[{"name":"btreemap"},{"name":"h"}],"output":null}],[11,"default","","",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",9,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",9,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",9,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",9,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","collections::btree::map","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",35,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",35,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",33,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",34,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",34,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"remove_kv","","",34,null],[0,"set","collections::btree","",null,null],[3,"BTreeSet","collections::btree::set","A set based on a B-Tree.",null,null],[12,"map","","",10,null],[3,"Iter","","An iterator over a BTreeSet's items.",null,null],[12,"iter","","",37,null],[3,"IntoIter","","An owning iterator over a BTreeSet's items.",null,null],[12,"iter","","",38,null],[3,"Range","","An iterator over a sub-range of BTreeSet's items.",null,null],[12,"iter","","",39,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[12,"a","","",40,null],[12,"b","","",40,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[12,"a","","",41,null],[12,"b","","",41,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[12,"a","","",42,null],[12,"b","","",42,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[12,"a","","",43,null],[12,"b","","",43,null],[5,"cmp_opt","","Compare `x` and `y`, but return `short` if x is None and `long` if y is None",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","collections","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",10,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",10,{"inputs":[{"name":"btreeset"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",10,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",10,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",10,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",10,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",10,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",10,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",10,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",10,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",10,{"inputs":[{"name":"btreeset"},{"name":"iter"}],"output":null}],[11,"extend","","",10,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":null}],[11,"default","","",10,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",10,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::btree::set","",37,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",38,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",39,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",39,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",39,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",40,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"clone","","",41,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",41,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"clone","","",42,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",42,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"clone","","",43,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",43,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[8,"Recover","collections::btree","",null,null],[16,"Key","","",44,null],[10,"get","","",44,{"inputs":[{"name":"recover"},{"name":"q"}],"output":{"name":"option"}}],[10,"take","","",44,{"inputs":[{"name":"recover"},{"name":"q"}],"output":{"name":"option"}}],[10,"replace","","",44,{"inputs":[{"name":"recover"},{"name":"key"}],"output":{"name":"option"}}],[0,"borrow","collections","A module for working with borrowed data.",null,null],[8,"Borrow","collections::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",45,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",46,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",47,null],[13,"Owned","","Owned data.",47,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",48,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",48,{"inputs":[{"name":"toowned"}],"output":{"name":"owned"}}],[8,"IntoCow","","Trait for moving into a `Cow`.",null,null],[10,"into_cow","","Moves `self` into `Cow`",49,{"inputs":[{"name":"intocow"}],"output":{"name":"cow"}}],[11,"borrow","","",47,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",47,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",47,null],[11,"into_owned","","Extracts the owned data.",47,null],[11,"deref","","",47,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",47,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",47,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",47,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,{"inputs":[{"name":"cow"},{"name":"h"}],"output":null}],[11,"into_cow","","",47,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",47,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[0,"enum_set","collections","A structure for holding a set of enum variants.",null,null],[3,"EnumSet","collections::enum_set","A specialized set implementation to use enum types.",null,null],[12,"bits","","",50,null],[12,"marker","","",50,null],[3,"Iter","","An iterator over an EnumSet",null,null],[12,"index","","",51,null],[12,"bits","","",51,null],[12,"marker","","",51,null],[5,"bit","","",null,{"inputs":[{"name":"e"}],"output":{"name":"usize"}}],[8,"CLike","","An interface for casting C-like enum to usize and back.\nA typically implementation is as below.",null,null],[10,"to_usize","","Converts a C-like enum to a `usize`.",52,{"inputs":[{"name":"clike"}],"output":{"name":"usize"}}],[10,"from_usize","","Converts a `usize` to a C-like enum.",52,{"inputs":[{"name":"clike"},{"name":"usize"}],"output":{"name":"self"}}],[11,"hash","","",50,null],[11,"cmp","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",50,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",50,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",50,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",50,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",50,{"inputs":[{"name":"enumset"}],"output":null}],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",50,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",50,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",50,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",50,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",50,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"new","","",51,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"iter"}}],[11,"next","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"from_iter","","",50,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",50,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":null}],[11,"extend","","",50,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":null}],[0,"fmt","collections","Utilities for formatting and printing strings",null,null],[0,"rt","collections::fmt","",null,null],[0,"v1","collections::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are\nemitted to static arrays to precompile format strings ahead of time.",null,null],[11,"default","core::num","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",53,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"shl","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",53,null],[11,"shr","","",53,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"add","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",53,null],[11,"sub","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",53,null],[11,"mul","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",53,null],[11,"div","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",53,null],[11,"rem","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",53,null],[11,"not","","",53,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",53,null],[11,"bitor","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",53,null],[11,"bitand","","",53,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",53,null],[11,"eq","core::num::flt2dec::decoder","",54,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",55,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",56,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",56,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",56,null],[11,"clone","","",57,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",57,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",57,null],[11,"fmt","","",58,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",59,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",59,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",60,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",61,null],[11,"assert_receiver_is_total_eq","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",63,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",63,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",64,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",63,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"fmt","","",63,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",65,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",65,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",65,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",65,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",65,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",65,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",65,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",65,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",65,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",65,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",65,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",65,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",65,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",65,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",65,null],[11,"eq","","",65,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",65,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",65,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",65,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",66,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",66,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",66,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",66,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",66,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",66,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",66,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",66,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",66,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",66,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",66,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",66,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",66,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",66,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",66,null],[11,"eq","","",66,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",66,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",66,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",66,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",67,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",67,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",67,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",67,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",68,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",69,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",69,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",70,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",69,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"fmt","","",69,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",71,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",71,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",72,null],[11,"get","","Dereferences the content.",72,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",72,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",73,null],[11,"clone","","",73,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",74,null],[11,"eq","","",74,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",74,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",74,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",74,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"assert_receiver_is_total_eq","core::ops","",75,null],[11,"eq","","",75,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",75,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",76,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",77,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",78,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",79,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",79,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",79,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","collections::fmt::rt","",80,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",80,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",80,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",80,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",80,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",80,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",80,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",81,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",82,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",83,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",84,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",85,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",86,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",82,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",82,null],[11,"swap","","Stores a value into the bool, returning the old value.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",82,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",83,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",83,null],[11,"swap","","Stores a value into the isize, returning the old value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",83,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",84,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",84,null],[11,"swap","","Stores a value into the usize, returning the old value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",84,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",85,null],[11,"load","","Loads a value from the pointer.",85,null],[11,"store","","Stores a value into the pointer.",85,null],[11,"swap","","Stores a value into the pointer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",85,null],[11,"fmt","","",84,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",87,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",87,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",87,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",87,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",87,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",87,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",87,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",89,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",89,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",89,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",89,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",89,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",89,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",89,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",89,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",89,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",90,null],[11,"clone","","",90,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",91,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",91,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",91,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",91,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",92,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",92,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",93,null],[11,"deref","","",92,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",92,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",94,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"clone","core::char","",95,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",96,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",95,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",97,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",98,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",97,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"count","","",97,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",97,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",97,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",99,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",99,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",100,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",101,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"clone","","",102,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",103,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",102,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",102,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",102,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",102,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",104,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",105,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",106,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",107,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",108,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"nth","","",108,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",108,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",108,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",109,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",109,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",109,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",109,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",109,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",109,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",110,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",111,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"clone","","",112,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",112,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",112,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",112,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",112,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"clone","","",113,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",113,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",113,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"clone","","",114,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",114,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"clone","","",115,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",115,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",116,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",116,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",116,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",116,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",117,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",77,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",76,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",118,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"clone","","",119,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",119,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",118,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next","core::ops","",76,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",120,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",120,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",121,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",121,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",121,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",122,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",122,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",122,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",123,null],[11,"fmt","","",123,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",123,null],[11,"partial_cmp","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",123,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",123,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",123,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",123,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",123,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",123,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",123,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",123,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",123,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",123,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",123,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",123,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",123,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",123,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",123,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",123,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",123,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",123,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",123,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",123,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",123,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",123,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",123,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",124,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",124,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",126,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",127,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",123,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",128,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",129,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",130,null],[11,"fmt","","",130,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",130,null],[11,"partial_cmp","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",130,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",130,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",130,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",130,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",130,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",130,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",130,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",130,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",130,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",130,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",130,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",130,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",130,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",130,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",130,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",130,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",130,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",130,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",130,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",131,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",132,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next_back","","",133,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",130,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",134,null],[11,"next","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"count","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",134,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",135,null],[11,"next","","",135,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"count","","",135,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",135,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",135,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",135,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",136,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",136,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",137,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",137,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next_back","","",137,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",138,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"next","","",139,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",139,null],[11,"next","","",140,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"next","","",141,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next","","",142,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"clone","","",143,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",143,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"count","","",143,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",143,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",143,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",143,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",144,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",144,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"count","","",144,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",144,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",144,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",144,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",145,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",145,null],[11,"count","","",145,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",145,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",145,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",145,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",146,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",146,null],[11,"clone","","",146,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",147,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",148,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",147,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",147,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",147,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",149,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",150,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",151,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",152,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",153,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",154,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",152,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",152,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",152,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",152,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",155,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",156,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",156,null],[11,"matching","","",156,null],[11,"use_early_reject","","",157,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",157,null],[11,"matching","","",157,null],[11,"eq","core::str","",158,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",158,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",159,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",159,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",159,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",159,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",160,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"next_back","","",160,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",160,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",161,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",161,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"next_back","","",161,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",161,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",162,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",162,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"count","","",162,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",162,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",162,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",162,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",163,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",164,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",165,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",164,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",165,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",166,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",167,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",166,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",167,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",169,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",170,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",170,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",171,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",172,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",173,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",172,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",173,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",175,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",176,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",175,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",176,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",177,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",177,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",177,null],[11,"next_back","","",177,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",178,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",179,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",179,null],[11,"call_mut","","",179,null],[11,"call_once","","",179,null],[11,"next","","",178,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",178,null],[11,"next_back","","",178,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",180,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",181,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",181,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",181,null],[11,"finish","","",181,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",181,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",181,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",182,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",182,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",182,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",183,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",184,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",185,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",186,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",187,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",188,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",189,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",190,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",191,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",191,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",192,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",192,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",192,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",193,null],[11,"entry","","Adds a new entry to the set output.",194,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",194,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",194,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",195,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",195,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",195,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",196,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",196,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",196,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",197,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",198,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",199,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",200,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",201,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",202,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",203,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"new","","",203,null],[11,"from_usize","","",203,{"inputs":[{"name":"argumentv1"},{"name":"usize"}],"output":{"name":"argumentv1"}}],[11,"clone","","",204,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the\nArguments structure.",205,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters.\nThe `pieces` array must be at least as long as `fmt` to construct\na valid Arguments structure. Also, any `Count` within `fmt` that is\n`CountIsParam` or `CountIsNextParam` has to point to an argument\ncreated with `argumentusize`. However, failing to do so doesn't cause\nunsafety, but will ignore invalid .",205,null],[11,"clone","","",205,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",205,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",206,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",206,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",206,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",206,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",206,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",206,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",206,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",206,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",206,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",206,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",206,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",206,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",206,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",206,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",206,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",74,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",87,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Argument","collections::fmt::rt::v1","",null,null],[12,"position","","",197,null],[12,"format","","",197,null],[3,"FormatSpec","","",null,null],[12,"fill","","",198,null],[12,"align","","",198,null],[12,"flags","","",198,null],[12,"precision","","",198,null],[12,"width","","",198,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",199,null],[13,"Right","","Indication that contents should be right-aligned.",199,null],[13,"Center","","Indication that contents should be center-aligned.",199,null],[13,"Unknown","","No alignment was requested.",199,null],[4,"Count","","",null,null],[13,"Is","","",200,null],[13,"Param","","",200,null],[13,"NextParam","","",200,null],[13,"Implied","","",200,null],[4,"Position","","",null,null],[13,"Next","","",201,null],[13,"At","","",201,null],[3,"Formatter","collections::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[12,"flags","","",206,null],[12,"fill","","",206,null],[12,"align","","",206,null],[12,"width","","",206,null],[12,"precision","","",206,null],[12,"buf","","",206,null],[12,"curarg","","",206,null],[12,"args","","",206,null],[6,"Result","","",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",207,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",207,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",207,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",208,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",209,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",210,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",211,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",212,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",213,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",214,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",215,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",216,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",203,null],[12,"formatter","","",203,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[12,"pieces","","",205,null],[12,"fmt","","",205,null],[12,"args","","",205,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[12,"base","","",188,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",195,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",196,null],[12,"result","","",196,null],[12,"has_fields","","",196,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",194,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",191,null],[12,"result","","",191,null],[12,"has_fields","","",191,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",192,null],[12,"result","","",192,null],[12,"has_fields","","",192,null],[5,"format","","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[0,"linked_list","collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","collections::linked_list","A doubly-linked list.",null,null],[12,"length","","",217,null],[12,"list_head","","",217,null],[12,"list_tail","","",217,null],[3,"Rawlink","","",null,null],[12,"p","","",218,null],[3,"Node","","",null,null],[12,"next","","",219,null],[12,"prev","","",219,null],[12,"value","","",219,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[12,"head","","",220,null],[12,"tail","","",220,null],[12,"nelem","","",220,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[12,"list","","",221,null],[12,"head","","",221,null],[12,"tail","","",221,null],[12,"nelem","","",221,null],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[12,"list","","",222,null],[5,"link_no_prev","","Clear the .prev field on `next`, then return `Some(next)`",null,{"inputs":[{"name":"box"}],"output":{"name":"link"}}],[5,"assert_covariance","","",null,{"inputs":[],"output":null}],[6,"Link","","",null,null],[11,"clone","","",220,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",222,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"none","","Like Option::None for Rawlink",218,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"some","","Like Option::Some for Rawlink",218,{"inputs":[{"name":"rawlink"},{"name":"t"}],"output":{"name":"rawlink"}}],[11,"resolve","","Convert the `Rawlink` into an Option value",218,{"inputs":[{"name":"rawlink"}],"output":{"name":"option"}}],[11,"resolve_mut","","Convert the `Rawlink` into an Option value",218,{"inputs":[{"name":"rawlink"}],"output":{"name":"option"}}],[11,"take","","Return the `Rawlink` and replace with `Rawlink::none()`",218,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"from","","",218,{"inputs":[{"name":"rawlink"},{"name":"link"}],"output":{"name":"self"}}],[11,"clone","","",218,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"new","","",219,{"inputs":[{"name":"node"},{"name":"t"}],"output":{"name":"node"}}],[11,"set_next","","Update the `prev` link on `next`, then set self's next pointer.",219,{"inputs":[{"name":"node"},{"name":"box"}],"output":null}],[11,"push_front_node","","Add a Node first in the list",217,{"inputs":[{"name":"linkedlist"},{"name":"box"}],"output":null}],[11,"pop_front_node","","Remove the first Node and return it, or None if the list is empty",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back_node","","Add a Node last in the list",217,{"inputs":[{"name":"linkedlist"},{"name":"box"}],"output":null}],[11,"pop_back_node","","Remove the last Node and return it, or None if the list is empty",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"default","","",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",217,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":null}],[11,"iter","","Provides a forward iterator.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",217,{"inputs":[{"name":"linkedlist"}],"output":null}],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",217,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":null}],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",217,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",217,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",217,{"inputs":[{"name":"linkedlist"}],"output":null}],[11,"next","","",220,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"next_back","","",220,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",221,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"next_back","","",221,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next_node","","",221,{"inputs":[{"name":"itermut"},{"name":"box"}],"output":null}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",221,{"inputs":[{"name":"itermut"},{"name":"a"}],"output":null}],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",221,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",222,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"next_back","","",222,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",217,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",217,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":null}],[11,"extend","","",217,{"inputs":[{"name":"linkedlist"},{"name":"i"}],"output":null}],[11,"eq","","",217,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",217,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",217,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",217,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",217,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",217,{"inputs":[{"name":"linkedlist"},{"name":"h"}],"output":null}],[0,"range","collections","Range syntax.",null,null],[8,"RangeArgument","collections::range","**RangeArgument** is implemented by Rust's built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",223,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",223,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[11,"start","core::ops","",77,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",78,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",76,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",76,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[0,"slice","collections","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[3,"Chunks","collections::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[12,"v","","",144,null],[12,"size","","",144,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[12,"v","","",143,null],[12,"size","","",143,null],[3,"Iter","","Immutable slice iterator",null,null],[12,"ptr","","",134,null],[12,"end","","",134,null],[12,"_marker","","",134,null],[3,"IterMut","","Mutable slice iterator.",null,null],[12,"ptr","","",135,null],[12,"end","","",135,null],[12,"_marker","","",135,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[12,"v","","",137,null],[12,"pred","","",137,null],[12,"finished","","",137,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[12,"v","","",145,null],[12,"chunk_size","","",145,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[12,"v","","",136,null],[12,"pred","","",136,null],[12,"finished","","",136,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[12,"inner","","",139,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[12,"inner","","",140,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[12,"inner","","",141,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[12,"inner","","",142,null],[0,"bytes","","Operations on `[u8]`.",null,null],[8,"MutableByteVector","collections::slice::bytes","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",224,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[5,"from_raw_parts","collections::slice","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[5,"insertion_sort","","",null,null],[5,"merge_sort","","",null,null],[0,"hack","","",null,null],[5,"into_vec","collections::slice::hack","",null,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[5,"to_vec","","",null,null],[8,"SliceConcatExt","collections::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",225,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",225,{"inputs":[{"name":"sliceconcatext"}],"output":{"name":"output"}}],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",225,{"inputs":[{"name":"sliceconcatext"},{"name":"t"}],"output":{"name":"output"}}],[10,"connect","","",225,{"inputs":[{"name":"sliceconcatext"},{"name":"t"}],"output":{"name":"output"}}],[0,"str","collections","Unicode string slices",null,null],[8,"FromStr","collections::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",226,null],[10,"from_str","","Parses a string `s` to return a value of this type.",226,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[12,"valid_up_to","","",159,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",180,null],[12,"next","","Index of the first byte of the next `char`",180,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[12,"iter","","",160,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[12,"front_offset","","",161,null],[12,"iter","","",161,null],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[12,"_priv","","",158,null],[11,"clone","rustc_unicode::u_str","",227,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",227,{"inputs":[{"name":"utf16encoder"},{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",227,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"next","","",228,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",228,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","rustc_unicode::char","",229,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",230,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",231,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",232,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",232,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[3,"SplitWhitespace","collections::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[12,"inner","","",228,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","collections::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",233,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",233,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",233,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",233,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",233,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",146,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",146,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",146,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",234,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",234,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",234,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",234,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",235,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",235,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",235,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",152,null],[12,"needle","","",152,null],[12,"searcher","","",152,null],[3,"Utf16Units","collections::str","External iterator for a string's UTF-16 code units.",null,null],[12,"encoder","","",236,null],[11,"clone","","",236,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",236,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[0,"string","collections","A UTF-8 encoded, growable string.",null,null],[3,"String","collections::string","A UTF-8 encoded, growable string.",null,null],[12,"vec","","",237,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[12,"bytes","","",238,null],[12,"error","","",238,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[3,"Drain","","A draining iterator for `String`.",null,null],[12,"string","","Will be used as &'a mut String in the destructor",239,null],[12,"start","","Start of part to remove",239,null],[12,"end","","End of part to remove",239,null],[12,"iter","","Current remaining range to remove",239,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",240,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[11,"cmp","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",237,null],[11,"partial_cmp","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",238,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",237,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",237,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",237,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",237,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",237,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",237,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",237,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",237,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",237,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",237,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",237,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":null}],[11,"capacity","","Returns this `String`'s capacity, in bytes.",237,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",237,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",237,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",237,{"inputs":[{"name":"string"}],"output":null}],[11,"push","","Appends the given `char` to the end of this `String`.",237,{"inputs":[{"name":"string"},{"name":"char"}],"output":null}],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",237,null],[11,"truncate","","Shortens this `String` to the specified length.",237,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the string buffer and returns it.",237,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",237,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",237,{"inputs":[{"name":"string"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",237,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",237,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",237,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",237,{"inputs":[{"name":"string"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",237,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",237,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",238,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",238,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",238,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",241,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",237,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone_from","","",237,{"inputs":[{"name":"string"},{"name":"self"}],"output":null}],[11,"from_iter","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":null}],[11,"extend","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":null}],[11,"extend","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":null}],[11,"extend","","",237,{"inputs":[{"name":"string"},{"name":"i"}],"output":null}],[11,"eq","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",47,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",237,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",237,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",237,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",237,{"inputs":[{"name":"string"},{"name":"h"}],"output":null}],[11,"add","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",237,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",237,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",237,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",237,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",237,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",237,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",237,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",237,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",237,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",237,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",242,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",242,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",242,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",237,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",237,null],[11,"from","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",47,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",47,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",237,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",237,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",237,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",237,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",239,{"inputs":[{"name":"drain"}],"output":null}],[11,"next","","",239,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"next_back","","",239,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[0,"vec","collections","A growable list type with heap-allocated contents, written `Vec<T>` but\npronounced 'vector.'",null,null],[3,"Vec","collections::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'",null,null],[12,"buf","","",243,null],[12,"len","","",243,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[12,"_buf","","",244,null],[12,"ptr","","",244,null],[12,"end","","",244,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[12,"tail_start","","Index of tail to preserve",245,null],[12,"tail_len","","Length of tail",245,null],[12,"iter","","Current remaining range to remove",245,null],[12,"vec","","",245,null],[5,"from_elem","","",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"new","","Constructs a new, empty `Vec<T>`.",243,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",243,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",243,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",243,{"inputs":[{"name":"vec"}],"output":null}],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",243,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",243,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",243,null],[11,"set_len","","Sets the length of a vector.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",243,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",243,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",243,{"inputs":[{"name":"vec"},{"name":"t"}],"output":null}],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",243,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",243,{"inputs":[{"name":"vec"},{"name":"self"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",243,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",243,{"inputs":[{"name":"vec"}],"output":null}],[11,"len","","Returns the number of elements in the vector.",243,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",243,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",243,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"extend_with_element","","Extend the vector by `n` additional clones of `value`.",243,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"push_all","","",243,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",243,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",243,{"inputs":[{"name":"vec"}],"output":null}],[11,"clone","","",243,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",243,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":null}],[11,"hash","","",243,{"inputs":[{"name":"vec"},{"name":"h"}],"output":null}],[11,"index","","",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",243,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"deref","","",243,null],[11,"deref_mut","","",243,null],[11,"from_iter","","",243,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",243,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",243,{"inputs":[{"name":"vec"},{"name":"i"}],"output":null}],[11,"extend_desugared","","",243,{"inputs":[{"name":"vec"},{"name":"i"}],"output":null}],[11,"extend","","",243,{"inputs":[{"name":"vec"},{"name":"i"}],"output":null}],[11,"eq","","",243,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","collections::borrow","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"eq","","",47,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"partial_cmp","","",243,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",243,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",243,{"inputs":[{"name":"vec"}],"output":null}],[11,"default","","",243,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",243,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",243,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",243,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",243,null],[11,"as_mut","","",243,null],[11,"from","","",243,null],[11,"from","","",243,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",47,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",243,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"count","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",244,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",244,{"inputs":[{"name":"intoiter"}],"output":null}],[11,"next","","",245,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",245,null],[11,"next_back","","",245,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",245,{"inputs":[{"name":"drain"}],"output":null}],[0,"vec_deque","collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[12,"tail","","",246,null],[12,"head","","",246,null],[12,"buf","","",246,null],[3,"Iter","","`VecDeque` iterator.",null,null],[12,"ring","","",247,null],[12,"tail","","",247,null],[12,"head","","",247,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[12,"ring","","",248,null],[12,"tail","","",248,null],[12,"head","","",248,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[12,"inner","","",249,null],[3,"Drain","","A draining VecDeque iterator",null,null],[12,"after_tail","","",250,null],[12,"after_head","","",250,null],[12,"iter","","",250,null],[12,"deque","","",250,null],[5,"wrap_index","","Returns the index in the underlying buffer for a given logical element index.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"count","","Calculate the number of elements left to be read in the buffer",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[17,"INITIAL_CAPACITY","","",null,null],[17,"MINIMUM_CAPACITY","","",null,null],[17,"MAXIMUM_ZST_CAPACITY","","",null,null],[11,"clone","","",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",246,{"inputs":[{"name":"vecdeque"}],"output":null}],[11,"default","","",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"ptr","","Marginally more convenient",246,null],[11,"cap","","Marginally more convenient",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"buffer_as_slice","","Turn ptr into a slice",246,null],[11,"buffer_as_mut_slice","","Turn ptr into a mut slice",246,null],[11,"buffer_read","","Moves an element out of the buffer",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"t"}}],[11,"buffer_write","","Writes an element into the buffer, moving it.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"is_full","","Returns true if and only if the buffer is at capacity",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"wrap_index","","Returns the index in the underlying buffer for a given logical element\nindex.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrap_add","","Returns the index in the underlying buffer for a given logical element\nindex + addend.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrap_sub","","Returns the index in the underlying buffer for a given logical element\nindex - subtrahend.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"copy","","Copies a contiguous block of memory len long from src to dst",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"copy_nonoverlapping","","Copies a contiguous block of memory len long from src to dst",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"wrap_copy","","Copies a potentially wrapping block of memory len long from src to dest.\n(abs(dst - src) + len) must be no larger than cap() (There must be at\nmost one continuous overlapping region between src and dest).",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"handle_cap_increase","","Frobs the head and tail sections around to handle the fact that we\njust reallocated. Unsafe because it trusts old_cap.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":null}],[11,"new","","Creates an empty `VecDeque`.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",246,{"inputs":[{"name":"vecdeque"}],"output":null}],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":null}],[11,"iter","","Returns a front-to-back iterator.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",246,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",246,null],[11,"len","","Returns the number of elements in the `VecDeque`.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",246,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",246,{"inputs":[{"name":"vecdeque"}],"output":null}],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",246,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":null}],[11,"push_back","","Appends an element to the back of a buffer",246,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"is_contiguous","","",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",246,{"inputs":[{"name":"vecdeque"},{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",246,{"inputs":[{"name":"vecdeque"},{"name":"f"}],"output":null}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"clone","","",247,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",247,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"next_back","","",247,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",248,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"next_back","","",248,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",249,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",249,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"next_back","","",249,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",250,{"inputs":[{"name":"drain"}],"output":null}],[11,"next","","",250,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"next_back","","",250,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",246,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",246,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",246,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",246,{"inputs":[{"name":"vecdeque"},{"name":"h"}],"output":null}],[11,"index","","",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",246,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",246,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",246,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",246,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":null}],[11,"extend","","",246,{"inputs":[{"name":"vecdeque"},{"name":"i"}],"output":null}],[11,"fmt","","",246,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"btree_map","collections","",null,null],[3,"BTreeMap","collections::btree_map","A map based on a B-Tree.",null,null],[12,"root","","",9,null],[12,"length","","",9,null],[3,"Iter","","An iterator over a BTreeMap's entries.",null,null],[12,"range","","",26,null],[12,"length","","",26,null],[3,"IterMut","","A mutable iterator over a BTreeMap's entries.",null,null],[12,"range","","",27,null],[12,"length","","",27,null],[3,"IntoIter","","An owning iterator over a BTreeMap's entries.",null,null],[12,"front","","",28,null],[12,"back","","",28,null],[12,"length","","",28,null],[3,"Keys","","An iterator over a BTreeMap's keys.",null,null],[12,"inner","","",29,null],[3,"Values","","An iterator over a BTreeMap's values.",null,null],[12,"inner","","",30,null],[3,"Range","","An iterator over a sub-range of BTreeMap's entries.",null,null],[12,"front","","",31,null],[12,"back","","",31,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries.",null,null],[12,"front","","",32,null],[12,"back","","",32,null],[12,"_marker","","",32,null],[3,"VacantEntry","","A vacant Entry.",null,null],[12,"key","","",33,null],[12,"handle","","",33,null],[12,"length","","",33,null],[12,"_marker","","",33,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[12,"handle","","",34,null],[12,"length","","",34,null],[12,"_marker","","",34,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",35,null],[13,"Occupied","","An occupied Entry",35,null],[4,"UnderflowResult","","",null,null],[13,"AtRoot","","",36,null],[13,"EmptyParent","","",36,null],[13,"Merged","","",36,null],[13,"Stole","","",36,null],[5,"first_leaf_edge","","",null,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[5,"last_leaf_edge","","",null,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[5,"unwrap_unchecked","","",null,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[5,"handle_underfull_node","","",null,{"inputs":[{"name":"noderef"}],"output":{"name":"underflowresult"}}],[0,"btree_set","collections","",null,null],[3,"BTreeSet","collections::btree_set","A set based on a B-Tree.",null,null],[12,"map","","",10,null],[3,"Iter","","An iterator over a BTreeSet's items.",null,null],[12,"iter","","",37,null],[3,"IntoIter","","An owning iterator over a BTreeSet's items.",null,null],[12,"iter","","",38,null],[3,"Range","","An iterator over a sub-range of BTreeSet's items.",null,null],[12,"iter","","",39,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[12,"a","","",40,null],[12,"b","","",40,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[12,"a","","",41,null],[12,"b","","",41,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[12,"a","","",42,null],[12,"b","","",42,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[12,"a","","",43,null],[12,"b","","",43,null],[5,"cmp_opt","","Compare `x` and `y`, but return `short` if x is None and `long` if y is None",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[0,"std","collections","",null,null],[0,"ops","collections::std","Overloadable operators",null,null],[8,"Drop","collections::std::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",251,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",252,null],[10,"add","","The method for the `+` operator",252,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",253,null],[10,"sub","","The method for the `-` operator",253,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",254,null],[10,"mul","","The method for the `*` operator",254,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",255,null],[10,"div","","The method for the `/` operator",255,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",256,null],[10,"rem","","The method for the `%` operator",256,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",257,null],[10,"neg","","The method for the unary `-` operator",257,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",258,null],[10,"not","","The method for the unary `!` operator",258,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",259,null],[10,"bitand","","The method for the `&` operator",259,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",260,null],[10,"bitor","","The method for the `|` operator",260,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",261,null],[10,"bitxor","","The method for the `^` operator",261,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",262,null],[10,"shl","","The method for the `<<` operator",262,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",263,null],[10,"shr","","The method for the `>>` operator",263,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",264,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",265,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",266,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",267,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",268,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&` operator",269,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",270,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",271,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",272,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",273,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",274,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",274,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",275,null],[3,"RangeFull","","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",76,null],[12,"end","","The upper bound of the range (exclusive).",76,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",77,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",78,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",276,null],[10,"deref","","The method called to dereference a value",276,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",277,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",278,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",279,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",280,null],[10,"call_once","","This is called when the call operator is used.",280,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate \"place\" that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",281,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",282,null],[10,"make_place","","Creates a fresh place from `self`.",282,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",283,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",283,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",284,null],[16,"Place","","The place that will negotiate the storage of the data.",284,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",284,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",285,{"inputs":[{"name":"boxplace"}],"output":{"name":"self"}}],[11,"assert_receiver_is_total_eq","collections","",11,null],[11,"eq","","",11,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[14,"vec!","","Creates a `Vec` containing the arguments.",null,null],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information.",null,null],[11,"from","collections::vec","",243,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"borrow","","",243,null],[11,"borrow_mut","","",243,null],[11,"borrow","collections::string","",237,{"inputs":[{"name":"string"}],"output":{"name":"str"}}]],"paths":[[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[8,"FnBox"],[3,"BTreeMap"],[3,"BTreeSet"],[4,"Bound"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"LeafNode"],[3,"InternalNode"],[3,"BoxedNode"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[4,"ForceResult"],[4,"InsertResult"],[4,"SearchResult"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[4,"Entry"],[4,"UnderflowResult"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[8,"Recover"],[8,"Borrow"],[8,"BorrowMut"],[4,"Cow"],[8,"ToOwned"],[8,"IntoCow"],[3,"EnumSet"],[3,"Iter"],[8,"CLike"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"LinkedList"],[3,"Rawlink"],[3,"Node"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"RangeArgument"],[8,"MutableByteVector"],[8,"SliceConcatExt"],[8,"FromStr"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"Utf16Units"],[3,"String"],[3,"FromUtf8Error"],[3,"Drain"],[8,"ToString"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"]]};
searchIndex['rustc_unicode'] = {"items":[[0,"tables","rustc_unicode","",null,null],[5,"bsearch_range_table","rustc_unicode::tables","",null,null],[0,"general_category","","",null,null],[5,"Cc","rustc_unicode::tables::general_category","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"N","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"Cc_table","","",null,null],[17,"N_table","","",null,null],[0,"derived_property","rustc_unicode::tables","",null,null],[5,"Alphabetic","rustc_unicode::tables::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Case_Ignorable","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Cased","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Lowercase","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Uppercase","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"XID_Continue","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"XID_Start","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"Alphabetic_table","","",null,null],[17,"Case_Ignorable_table","","",null,null],[17,"Cased_table","","",null,null],[17,"Lowercase_table","","",null,null],[17,"Uppercase_table","","",null,null],[17,"XID_Continue_table","","",null,null],[17,"XID_Start_table","","",null,null],[0,"property","rustc_unicode::tables","",null,null],[5,"White_Space","rustc_unicode::tables::property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"White_Space_table","","",null,null],[0,"conversions","rustc_unicode::tables","",null,null],[5,"to_lower","rustc_unicode::tables::conversions","",null,null],[5,"to_upper","","",null,null],[5,"bsearch_case_table","","",null,null],[17,"to_lowercase_table","","",null,null],[17,"to_uppercase_table","","",null,null],[17,"UNICODE_VERSION","rustc_unicode::tables","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[0,"u_str","rustc_unicode","Unicode-intensive string manipulations.",null,null],[3,"SplitWhitespace","rustc_unicode::u_str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[12,"inner","","",0,null],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16.",null,null],[12,"chars","","",1,null],[12,"extra","","",1,null],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[5,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16",null,null],[7,"UTF8_CHAR_WIDTH","","",null,null],[8,"UnicodeStr","","Methods for Unicode string slices",null,null],[10,"split_whitespace","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"splitwhitespace"}}],[10,"is_whitespace","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"bool"}}],[10,"is_alphanumeric","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"bool"}}],[10,"trim","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"str"}}],[10,"trim_left","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"str"}}],[10,"trim_right","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",1,{"inputs":[{"name":"utf16encoder"},{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",1,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",0,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[0,"char","rustc_unicode","A character type.",null,null],[17,"MAX","rustc_unicode::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"default","core::num","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",3,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"shl","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",3,null],[11,"shr","","",3,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"add","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",3,null],[11,"sub","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",3,null],[11,"mul","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",3,null],[11,"div","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",3,null],[11,"rem","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",3,null],[11,"not","","",3,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",3,null],[11,"bitor","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",3,null],[11,"bitand","","",3,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",3,null],[11,"eq","core::num::flt2dec::decoder","",4,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",5,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",6,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",6,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",6,null],[11,"clone","","",7,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",7,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",7,null],[11,"fmt","","",8,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",9,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",9,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",10,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,null],[11,"assert_receiver_is_total_eq","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",13,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",15,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",15,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",15,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",15,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",15,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",15,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",15,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",15,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",15,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",15,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",15,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",15,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",15,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",15,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",15,null],[11,"eq","","",15,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",15,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",16,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",16,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",16,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",16,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",16,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",16,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",16,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",16,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",16,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",16,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",16,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",16,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",16,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",16,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",16,null],[11,"eq","","",16,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",16,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",16,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",17,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",17,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",17,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",17,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",18,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",19,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",19,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",20,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",19,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",21,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",21,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",22,null],[11,"get","","Dereferences the content.",22,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",22,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",23,null],[11,"clone","","",23,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",24,null],[11,"eq","","",24,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",24,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",24,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",24,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"assert_receiver_is_total_eq","core::ops","",25,null],[11,"eq","","",25,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",25,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",26,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",27,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",28,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",29,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",29,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",29,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","rustc_unicode","",30,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",30,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",30,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",30,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",30,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",31,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",32,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",33,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",34,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",35,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",36,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",32,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",32,null],[11,"swap","","Stores a value into the bool, returning the old value.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",32,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",33,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",33,null],[11,"swap","","Stores a value into the isize, returning the old value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",33,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",34,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",34,null],[11,"swap","","Stores a value into the usize, returning the old value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",34,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",35,null],[11,"load","","Loads a value from the pointer.",35,null],[11,"store","","Stores a value into the pointer.",35,null],[11,"swap","","Stores a value into the pointer, returning the old value.",35,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",35,null],[11,"fmt","","",34,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",37,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",37,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",37,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",37,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",37,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",37,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",37,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",39,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",39,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",39,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",39,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",39,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",39,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",39,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",39,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",39,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",41,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",41,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",41,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",41,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",42,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",42,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",43,null],[11,"deref","","",42,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",44,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",44,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",44,null],[11,"clone","core::char","",45,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",46,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",45,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"clone","","",47,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",48,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",47,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"count","","",47,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",47,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",47,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",49,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",49,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",50,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",51,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",53,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",52,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",52,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",52,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",52,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",54,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",55,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",56,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",57,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"nth","","",58,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",58,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",59,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",59,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",59,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",59,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",60,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",61,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",62,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",62,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",63,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",63,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"clone","","",64,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",64,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",65,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",65,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",66,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",67,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",27,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",26,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",68,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"clone","","",69,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",69,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next","core::ops","",26,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",70,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",70,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",71,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",71,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",71,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",72,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",72,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",72,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",73,null],[11,"partial_cmp","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",73,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",73,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",73,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",73,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",73,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",73,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",73,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",73,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",73,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",73,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",73,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",73,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",73,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",73,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",73,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",73,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",73,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",73,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",73,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",73,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",73,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",73,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",73,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",74,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",74,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",73,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",78,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",79,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",80,null],[11,"partial_cmp","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",80,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",80,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",80,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",80,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",80,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",80,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",80,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",80,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",80,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",80,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",80,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",80,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",80,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",80,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",80,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",80,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",80,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",80,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",80,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",80,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",84,null],[11,"next","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"count","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",84,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",85,null],[11,"next","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"count","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",85,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",86,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",87,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",88,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","","",89,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next","","",90,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next","","",91,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next","","",92,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",93,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",93,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",93,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",93,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",94,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"count","","",94,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",94,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",95,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",95,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",96,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",97,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",98,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",97,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",97,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",99,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",100,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",101,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",103,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",104,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",102,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",102,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",102,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",102,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",102,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",105,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",106,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",106,null],[11,"matching","","",106,null],[11,"use_early_reject","","",107,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",107,null],[11,"matching","","",107,null],[11,"eq","core::str","",108,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",108,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",109,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",109,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",109,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",109,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",110,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",110,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",111,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",111,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",111,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"count","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",112,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",112,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",113,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",114,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",115,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",114,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",117,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",116,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",119,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",120,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",121,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",122,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",123,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",122,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",125,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",126,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",125,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",127,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",129,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",129,null],[11,"call_mut","","",129,null],[11,"call_once","","",129,null],[11,"next","","",128,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",131,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",131,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",131,null],[11,"finish","","",131,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",131,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",131,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",132,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",132,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",132,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",133,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",134,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",135,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",136,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",137,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",138,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",139,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",140,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",141,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",141,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",142,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",142,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",143,null],[11,"entry","","Adds a new entry to the set output.",144,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",144,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",144,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",145,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",145,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",145,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",146,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",146,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",146,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",147,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",148,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",149,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",150,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",151,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",152,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",153,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"new","","",153,null],[11,"from_usize","","",153,{"inputs":[{"name":"argumentv1"},{"name":"usize"}],"output":{"name":"argumentv1"}}],[11,"clone","","",154,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the\nArguments structure.",155,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters.\nThe `pieces` array must be at least as long as `fmt` to construct\na valid Arguments structure. Also, any `Count` within `fmt` that is\n`CountIsParam` or `CountIsNextParam` has to point to an argument\ncreated with `argumentusize`. However, failing to do so doesn't cause\nunsafety, but will ignore invalid .",155,null],[11,"clone","","",155,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",155,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",156,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",156,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",156,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",156,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",156,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",156,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",156,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",156,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",156,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",156,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",156,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",156,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",156,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",156,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",156,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",24,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",37,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeUnicode","rustc_unicode::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[12,"c","","",45,null],[12,"state","","",45,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[12,"state","","",47,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[12,"iter","","",157,null],[12,"buf","","",157,null],[4,"CaseMappingIter","","",null,null],[13,"Three","","",158,null],[13,"Two","","",158,null],[13,"One","","",158,null],[13,"Zero","","",158,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iterable`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.\nIt can occur, for example, when giving ill-formed UTF-8 bytes to\n[`String::from_utf8_lossy`](../string/struct.String.html#method.from_utf8_lossy).",null,null],[11,"next","","",159,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",160,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"new","","",158,null],[11,"next","","",158,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",157,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[0,"str","rustc_unicode","",null,null],[3,"SplitWhitespace","rustc_unicode::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[12,"inner","","",0,null],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16.",null,null],[12,"chars","","",1,null],[12,"extra","","",1,null],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[5,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16",null,null],[8,"UnicodeStr","","Methods for Unicode string slices",null,null],[10,"split_whitespace","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"splitwhitespace"}}],[10,"is_whitespace","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"bool"}}],[10,"is_alphanumeric","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"bool"}}],[10,"trim","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"str"}}],[10,"trim_left","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"str"}}],[10,"trim_right","","",2,{"inputs":[{"name":"unicodestr"}],"output":{"name":"str"}}],[0,"derived_property","rustc_unicode","",null,null],[5,"Cased","rustc_unicode::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Case_Ignorable","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}]],"paths":[[3,"SplitWhitespace"],[3,"Utf16Encoder"],[8,"UnicodeStr"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"DecodeUtf16"],[4,"CaseMappingIter"],[3,"ToLowercase"],[3,"ToUppercase"]]};
searchIndex['alloc'] = {"items":[[0,"heap","alloc","",null,null],[5,"check_size_and_alignment","alloc::heap","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":null}],[5,"allocate","","Return a pointer to `size` bytes of memory aligned to `align`.",null,null],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"deallocate","","Deallocates the memory referenced by `ptr`.",null,null],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"exchange_malloc","","The allocator for unique pointers.",null,null],[5,"exchange_free","","",null,null],[5,"__rust_allocate","","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_usable_size","","",null,null],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations.",null,null],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"ExchangeHeapSingleton","alloc::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[12,"_force_singleton","","",0,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[12,"ptr","","",1,null],[12,"size","","",1,null],[12,"align","","",1,null],[12,"marker","","",1,null],[5,"finalize","","",null,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[5,"make_place","","",null,{"inputs":[],"output":{"name":"intermediatebox"}}],[17,"HEAP","","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box<FnOnce()>` in a data structure, you should use\n`Box<FnBox()>`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box<FnOnce()>`\nclosures become directly usable.)",null,null],[16,"Output","","",2,null],[10,"call_box","","",2,{"inputs":[{"name":"fnbox"},{"name":"a"}],"output":{"name":"output"}}],[11,"clone","","",0,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",1,null],[11,"make_place","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",1,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",3,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",0,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",1,{"inputs":[{"name":"intermediatebox"}],"output":null}],[11,"new","","Allocates memory on the heap and then places `x` into it.",3,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"default","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"box"},{"name":"h"}],"output":null}],[11,"from","","",3,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"self"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",3,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",3,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",3,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[0,"arc","alloc","Threadsafe reference-counted boxes (the `Arc<T>` type).",null,null],[3,"Arc","alloc::arc","An atomically reference counted wrapper for shared state.",null,null],[12,"_ptr","","",4,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[12,"_ptr","","",5,null],[3,"ArcInner","","",null,null],[12,"strong","","",6,null],[12,"weak","","",6,null],[12,"data","","",6,null],[17,"MAX_REFCOUNT","","",null,null],[11,"fmt","","",5,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",4,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",4,{"inputs":[{"name":"arc"},{"name":"self"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",4,{"inputs":[{"name":"arc"},{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",4,{"inputs":[{"name":"arc"},{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",4,{"inputs":[{"name":"arc"},{"name":"self"}],"output":{"name":"usize"}}],[11,"inner","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"arcinner"}}],[11,"drop_slow","","",4,{"inputs":[{"name":"arc"}],"output":null}],[11,"clone","","Makes a clone of the `Arc<T>`.",4,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",4,{"inputs":[{"name":"arc"},{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",4,{"inputs":[{"name":"arc"},{"name":"self"}],"output":{"name":"option"}}],[11,"is_unique","","Determine whether this is the unique reference (including weak refs) to\nthe underlying data.",4,{"inputs":[{"name":"arc"}],"output":{"name":"bool"}}],[11,"drop","","Drops the `Arc<T>`.",4,{"inputs":[{"name":"arc"}],"output":null}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",5,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"inner","","",5,{"inputs":[{"name":"weak"}],"output":{"name":"arcinner"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",5,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",5,{"inputs":[{"name":"weak"}],"output":null}],[11,"eq","","Equality for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",4,{"inputs":[{"name":"arc"},{"name":"h"}],"output":null}],[11,"from","","",4,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",5,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[0,"rc","alloc","Thread-local reference-counted boxes (the `Rc<T>` type).",null,null],[3,"RcBox","alloc::rc","",null,null],[12,"strong","","",7,null],[12,"weak","","",7,null],[12,"value","","",7,null],[3,"Rc","","A reference-counted pointer type over an immutable value.",null,null],[12,"_ptr","","",8,null],[3,"Weak","","A weak version of `Rc<T>`.",null,null],[12,"_ptr","","",9,null],[8,"RcBoxPtr","","",null,null],[10,"inner","","",10,{"inputs":[{"name":"rcboxptr"}],"output":{"name":"rcbox"}}],[11,"strong","","",10,{"inputs":[{"name":"rcboxptr"}],"output":{"name":"usize"}}],[11,"inc_strong","","",10,{"inputs":[{"name":"rcboxptr"}],"output":null}],[11,"dec_strong","","",10,{"inputs":[{"name":"rcboxptr"}],"output":null}],[11,"weak","","",10,{"inputs":[{"name":"rcboxptr"}],"output":{"name":"usize"}}],[11,"inc_weak","","",10,{"inputs":[{"name":"rcboxptr"}],"output":null}],[11,"dec_weak","","",10,{"inputs":[{"name":"rcboxptr"}],"output":null}],[11,"new","","Constructs a new `Rc<T>`.",8,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",8,{"inputs":[{"name":"rc"},{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",8,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",8,{"inputs":[{"name":"rc"}],"output":null}],[11,"clone","","Makes a clone of the `Rc<T>`.",8,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",8,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",8,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",8,{"inputs":[{"name":"rc"},{"name":"h"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"self"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",9,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",9,{"inputs":[{"name":"weak"}],"output":null}],[11,"clone","","Makes a clone of the `Weak<T>`.",9,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",9,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",9,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"inner","","",8,{"inputs":[{"name":"rc"}],"output":{"name":"rcbox"}}],[11,"inner","","",9,{"inputs":[{"name":"weak"}],"output":{"name":"rcbox"}}],[11,"borrow","","",8,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",8,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[0,"raw_vec","alloc","",null,null],[3,"RawVec","alloc::raw_vec","A low-level utility for more ergonomically allocating, reallocating, and deallocating a\na buffer of memory on the heap without having to worry about all the corner cases\ninvolved. This type is excellent for building your own data structures like Vec and VecDeque.\nIn particular:",null,null],[12,"ptr","","",11,null],[12,"cap","","",11,null],[5,"alloc_guard","","",null,{"inputs":[{"name":"usize"}],"output":null}],[11,"new","","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",11,{"inputs":[{"name":"rawvec"}],"output":{"name":"self"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",11,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",11,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",11,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"self"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",11,null],[11,"cap","","Gets the capacity of the allocation.",11,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",11,{"inputs":[{"name":"rawvec"}],"output":null}],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common\nenough to want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",11,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",11,{"inputs":[{"name":"rawvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"amortized_new_size","","Calculates the buffer's new size given that it'll hold `used_cap +\nneeded_extra_cap` elements. This logic is used in amortized reserve methods.\nReturns `(new_capacity, new_alloc_size)`.",11,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",11,{"inputs":[{"name":"rawvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",11,{"inputs":[{"name":"rawvec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",11,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":null}],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",11,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",11,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",11,{"inputs":[{"name":"rawvec"}],"output":null}],[0,"oom","alloc","",null,null],[5,"default_oom_handler","alloc::oom","",null,{"inputs":[],"output":null}],[5,"oom","","Common out-of-memory routine",null,{"inputs":[],"output":null}],[5,"set_oom_handler","","Set a custom handler for out-of-memory conditions",null,null],[7,"OOM_HANDLER","","",null,null]],"paths":[[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[8,"FnBox"],[3,"Box"],[3,"Arc"],[3,"Weak"],[3,"ArcInner"],[3,"RcBox"],[3,"Rc"],[3,"Weak"],[8,"RcBoxPtr"],[3,"RawVec"]]};
searchIndex['system'] = {"items":[[0,"error","system","",null,null],[3,"Error","system::error","",null,null],[12,"errno","","",0,null],[6,"Result","","",null,null],[7,"STR_ERROR","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[11,"new","","",0,{"inputs":[{"name":"error"},{"name":"isize"}],"output":{"name":"error"}}],[11,"mux","","",0,{"inputs":[{"name":"error"},{"name":"result"}],"output":{"name":"usize"}}],[11,"demux","","",0,{"inputs":[{"name":"error"},{"name":"usize"}],"output":{"name":"result"}}],[11,"text","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"externs","system","",null,null],[5,"stack_exhausted","system::externs","",null,{"inputs":[],"output":null}],[5,"eh_personality","","",null,{"inputs":[],"output":null}],[5,"memcmp","","",null,null],[5,"memmove","","",null,null],[5,"memcpy","","",null,null],[5,"memset","","",null,null],[5,"__umoddi3","","64 bit remainder on 32 bit arch",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__udivdi3","","64 bit division on 32 bit arch",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"__udivremi3","","64 bit division and rem on 32 bit arch",null,null],[0,"scheme","system","",null,null],[3,"Packet","system::scheme","",null,null],[12,"id","","",1,null],[12,"a","","",1,null],[12,"b","","",1,null],[12,"c","","",1,null],[12,"d","","",1,null],[5,"c_string_to_str","","Helper function for handling C strings, please do not copy it or make it pub or change it",null,null],[8,"Scheme","","",null,null],[11,"handle","","",2,{"inputs":[{"name":"scheme"},{"name":"packet"}],"output":null}],[11,"open","","",2,{"inputs":[{"name":"scheme"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unlink","","",2,{"inputs":[{"name":"scheme"},{"name":"str"}],"output":{"name":"result"}}],[11,"mkdir","","",2,{"inputs":[{"name":"scheme"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"seek","","",2,{"inputs":[{"name":"scheme"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"sync","","",2,{"inputs":[{"name":"scheme"},{"name":"usize"}],"output":{"name":"result"}}],[11,"truncate","","",2,{"inputs":[{"name":"scheme"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"close","","",2,{"inputs":[{"name":"scheme"},{"name":"usize"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"fmt","","",1,{"inputs":[{"name":"packet"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[0,"syscall","system","",null,null],[0,"unix","system::syscall","",null,null],[3,"TimeSpec","system::syscall::unix","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[5,"sys_brk","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_chdir","","",null,null],[5,"sys_clone","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_close","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_clock_gettime","","",null,null],[5,"sys_dup","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_execve","","",null,null],[5,"sys_exit","","",null,{"inputs":[{"name":"isize"}],"output":null}],[5,"sys_fpath","","",null,null],[5,"sys_fsync","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_ftruncate","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_getpid","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"sys_link","","",null,null],[5,"sys_lseek","","",null,{"inputs":[{"name":"usize"},{"name":"isize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_mkdir","","",null,null],[5,"sys_nanosleep","","",null,null],[5,"sys_open","","",null,null],[5,"sys_pipe2","","",null,null],[5,"sys_read","","",null,null],[5,"sys_unlink","","",null,null],[5,"sys_waitpid","","",null,null],[5,"sys_write","","",null,null],[5,"sys_yield","","",null,{"inputs":[],"output":{"name":"usize"}}],[17,"SYS_BRK","","",null,null],[17,"SYS_CHDIR","","",null,null],[17,"SYS_CLOSE","","",null,null],[17,"SYS_CLONE","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"SYS_CLOCK_GETTIME","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"SYS_DUP","","",null,null],[17,"SYS_EXECVE","","",null,null],[17,"SYS_EXIT","","",null,null],[17,"SYS_FPATH","","",null,null],[17,"SYS_FSTAT","","",null,null],[17,"SYS_FSYNC","","",null,null],[17,"SYS_FTRUNCATE","","",null,null],[17,"SYS_GETPID","","",null,null],[17,"SYS_LINK","","",null,null],[17,"SYS_LSEEK","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"SYS_MKDIR","","",null,null],[17,"SYS_NANOSLEEP","","",null,null],[17,"SYS_OPEN","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"SYS_PIPE2","","",null,null],[17,"SYS_READ","","",null,null],[17,"SYS_UNLINK","","",null,null],[17,"SYS_WAITPID","","",null,null],[17,"SYS_WRITE","","",null,null],[17,"SYS_YIELD","","",null,null],[0,"redox","system::syscall","",null,null],[5,"sys_debug","system::syscall::redox","",null,null],[5,"sys_alloc","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_realloc","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_realloc_inplace","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"sys_unalloc","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[17,"SYS_DEBUG","","",null,null],[17,"SYS_ALLOC","","",null,null],[17,"SYS_REALLOC","","",null,null],[17,"SYS_REALLOC_INPLACE","","",null,null],[17,"SYS_UNALLOC","","",null,null],[0,"arch","system::syscall","",null,null],[5,"syscall0","system::syscall::arch","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall1","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall2","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall3","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall4","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"syscall5","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}]],"paths":[[3,"Error"],[3,"Packet"],[8,"Scheme"],[3,"TimeSpec"]]};
searchIndex['io'] = {"items":[[3,"Mmio","io","",null,null],[12,"value","","",0,null],[3,"Pio","","Generic PIO",null,null],[12,"port","","",1,null],[12,"value","","",1,null],[0,"mmio","","",null,null],[3,"Mmio","io::mmio","",null,null],[12,"value","","",0,null],[11,"read","io","",0,{"inputs":[{"name":"mmio"}],"output":{"name":"t"}}],[11,"write","","",0,{"inputs":[{"name":"mmio"},{"name":"t"}],"output":null}],[0,"pio","","",null,null],[3,"Pio","io::pio","Generic PIO",null,null],[12,"port","","",1,null],[12,"value","","",1,null],[11,"clone","io","",1,{"inputs":[{"name":"pio"}],"output":{"name":"pio"}}],[11,"read","","Read",1,{"inputs":[{"name":"pio"}],"output":{"name":"u8"}}],[11,"write","","Write",1,{"inputs":[{"name":"pio"},{"name":"u8"}],"output":null}],[11,"read","","Read",1,{"inputs":[{"name":"pio"}],"output":{"name":"u16"}}],[11,"write","","Write",1,{"inputs":[{"name":"pio"},{"name":"u16"}],"output":null}],[11,"read","","Read",1,{"inputs":[{"name":"pio"}],"output":{"name":"u32"}}],[11,"write","","Write",1,{"inputs":[{"name":"pio"},{"name":"u32"}],"output":null}],[11,"new","","Create a PIO from a given port",1,{"inputs":[{"name":"pio"},{"name":"u16"}],"output":{"name":"self"}}],[8,"Io","","",null,null],[10,"read","","",2,{"inputs":[{"name":"io"}],"output":{"name":"t"}}],[10,"write","","",2,{"inputs":[{"name":"io"},{"name":"t"}],"output":null}],[11,"readf","","",2,{"inputs":[{"name":"io"},{"name":"t"}],"output":{"name":"bool"}}],[11,"writef","","",2,{"inputs":[{"name":"io"},{"name":"t"},{"name":"bool"}],"output":null}]],"paths":[[3,"Mmio"],[3,"Pio"],[8,"Io"]]};
searchIndex['alloc_system'] = {"items":[[5,"memmove","alloc_system","",null,null],[5,"__rust_allocate","","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_usable_size","","",null,null],[17,"MIN_ALIGN","","",null,null]],"paths":[]};
searchIndex['core'] = {"items":[[0,"macros","core","",null,null],[0,"float_macros","","",null,null],[0,"int_macros","","",null,null],[0,"uint_macros","","",null,null],[0,"isize","","The pointer-sized signed integer type.",null,null],[17,"BITS","core::isize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"BITS","core::i8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"BITS","core::i16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"BITS","core::i32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"BITS","core::i64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"BITS","core::usize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"BITS","core::u8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"BITS","core::u16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"BITS","core::u32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"BITS","core::u64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes' constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler's number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"RADIX","core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes' constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler's number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"RADIX","core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric types.",null,null],[3,"Wrapping","core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[12,"kind","","",0,null],[4,"FpCategory","","Used for representing the classification of floating point numbers",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",1,null],[13,"Infinite","","Positive or negative infinity",1,null],[13,"Zero","","Positive or negative zero",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",1,null],[13,"Normal","","A regular floating point number",1,null],[4,"IntErrorKind","","",null,null],[13,"Empty","","",2,null],[13,"InvalidDigit","","",2,null],[13,"Overflow","","",2,null],[13,"Underflow","","",2,null],[5,"from_str_radix","","",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[0,"wrapping","","",null,null],[0,"shift_max","core::num::wrapping","",null,null],[0,"platform","core::num::wrapping::shift_max","",null,null],[17,"usize","core::num::wrapping::shift_max::platform","",null,null],[17,"isize","","",null,null],[17,"i8","core::num::wrapping::shift_max","",null,null],[17,"i16","","",null,null],[17,"i32","","",null,null],[17,"i64","","",null,null],[17,"isize","","",null,null],[17,"u8","","",null,null],[17,"u16","","",null,null],[17,"u32","","",null,null],[17,"u64","","",null,null],[17,"usize","","",null,null],[8,"OverflowingOps","core::num::wrapping","",null,null],[10,"overflowing_add","","",3,null],[10,"overflowing_sub","","",3,null],[10,"overflowing_mul","","",3,null],[10,"overflowing_div","","",3,null],[10,"overflowing_rem","","",3,null],[10,"overflowing_neg","","",3,null],[10,"overflowing_shl","","",3,null],[10,"overflowing_shr","","",3,null],[11,"shl","core::num","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shl","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"shr","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"sub","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"rem","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"not","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":null}],[0,"flt2dec","","Floating-point number to decimal conversion routines.",null,null],[3,"Formatted","core::num::flt2dec","Formatted result containing one or more parts.\nThis can be written to the byte buffer or converted to the allocated string.",null,null],[12,"sign","","A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.",5,null],[12,"parts","","Formatted parts to be rendered after a sign and optional zero padding.",5,null],[4,"Part","","Formatted parts.",null,null],[13,"Zero","","Given number of zero digits.",6,null],[13,"Num","","A literal number up to 5 digits.",6,null],[13,"Copy","","A verbatim copy of given bytes.",6,null],[4,"Sign","","Sign formatting options.",null,null],[13,"Minus","","Prints `-` only for the negative non-zero values.",7,null],[13,"MinusRaw","","Prints `-` only for any negative values (including the negative zero).",7,null],[13,"MinusPlus","","Prints `-` for the negative non-zero values, or `+` otherwise.",7,null],[13,"MinusPlusRaw","","Prints `-` for any negative values (including the negative zero), or `+` otherwise.",7,null],[5,"round_up","","When `d[..n]` contains decimal digits, increase the last digit and propagate carry.\nReturns a next digit when it causes the length change.",null,null],[5,"digits_to_dec_str","","Formats given decimal digits `0.<...buf...> * 10^exp` into the decimal form\nwith at least given number of fractional digits. The result is stored to\nthe supplied parts array and a slice of written parts is returned.",null,null],[5,"digits_to_exp_str","","Formats given decimal digits `0.<...buf...> * 10^exp` into the exponential form\nwith at least given number of significant digits. When `upper` is true,\nthe exponent will be prefixed by `E`; otherwise that's `e`. The result is\nstored to the supplied parts array and a slice of written parts is returned.",null,null],[5,"determine_sign","","Returns the static byte string corresponding to the sign to be formatted.\nIt can be either `b\"\"`, `b\"+\"` or `b\"-\"`.",null,null],[5,"to_shortest_str","","Formats given floating point number into the decimal form with at least\ngiven number of fractional digits. The result is stored to the supplied parts\narray while utilizing given byte buffer as a scratch. `upper` is currently\nunused but left for the future decision to change the case of non-finite values,\ni.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n(which can be an empty string if no sign is rendered).",null,null],[5,"to_shortest_exp_str","","Formats given floating point number into the decimal form or\nthe exponential form, depending on the resulting exponent. The result is\nstored to the supplied parts array while utilizing given byte buffer\nas a scratch. `upper` is used to determine the case of non-finite values\n(`inf` and `nan`) or the case of the exponent prefix (`e` or `E`).\nThe first part to be rendered is always a `Part::Sign` (which can be\nan empty string if no sign is rendered).",null,null],[5,"estimate_max_buf_len","","Returns rather crude approximation (upper bound) for the maximum buffer size\ncalculated from the given decoded exponent.",null,{"inputs":[{"name":"i16"}],"output":{"name":"usize"}}],[5,"to_exact_exp_str","","Formats given floating point number into the exponential form with\nexactly given number of significant digits. The result is stored to\nthe supplied parts array while utilizing given byte buffer as a scratch.\n`upper` is used to determine the case of the exponent prefix (`e` or `E`).\nThe first part to be rendered is always a `Part::Sign` (which can be\nan empty string if no sign is rendered).",null,null],[5,"to_exact_fixed_str","","Formats given floating point number into the decimal form with exactly\ngiven number of fractional digits. The result is stored to the supplied parts\narray while utilizing given byte buffer as a scratch. `upper` is currently\nunused but left for the future decision to change the case of non-finite values,\ni.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n(which can be an empty string if no sign is rendered).",null,null],[0,"estimator","","The exponent estimator.",null,null],[5,"estimate_scaling_factor","core::num::flt2dec::estimator","Finds `k_0` such that `10^(k_0-1) < mant * 2^exp <= 10^(k_0+1)`.",null,{"inputs":[{"name":"u64"},{"name":"i16"}],"output":{"name":"i16"}}],[0,"decoder","core::num::flt2dec","Decodes a floating-point value into individual parts and error ranges.",null,null],[3,"Decoded","core::num::flt2dec::decoder","Decoded unsigned finite value, such that:",null,null],[12,"mant","","The scaled mantissa.",8,null],[12,"minus","","The lower error range.",8,null],[12,"plus","","The upper error range.",8,null],[12,"exp","","The shared exponent in base 2.",8,null],[12,"inclusive","","True when the error range is inclusive.",8,null],[4,"FullDecoded","","Decoded unsigned value.",null,null],[13,"Nan","","Not-a-number.",9,null],[13,"Infinite","","Infinities, either positive or negative.",9,null],[13,"Zero","","Zero, either positive or negative.",9,null],[13,"Finite","","Finite numbers with further decoded fields.",9,null],[5,"decode","","Returns a sign (true when negative) and `FullDecoded` value\nfrom given floating point number.",null,null],[8,"DecodableFloat","","A floating point type which can be `decode`d.",null,null],[10,"min_pos_norm_value","","The minimum positive normalized value.",10,{"inputs":[{"name":"decodablefloat"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",9,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[0,"strategy","core::num::flt2dec","Digit-generation algorithms.",null,null],[0,"dragon","core::num::flt2dec::strategy","Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].",null,null],[5,"mul_pow10","core::num::flt2dec::strategy::dragon","",null,{"inputs":[{"name":"big"},{"name":"usize"}],"output":{"name":"big"}}],[5,"div_2pow10","","",null,{"inputs":[{"name":"big"},{"name":"usize"}],"output":{"name":"big"}}],[5,"div_rem_upto_16","","",null,null],[5,"format_shortest","","The shortest mode implementation for Dragon.",null,null],[5,"format_exact","","The exact and fixed mode implementation for Dragon.",null,null],[7,"POW10","","",null,null],[7,"TWOPOW10","","",null,null],[7,"POW10TO16","","",null,null],[7,"POW10TO32","","",null,null],[7,"POW10TO64","","",null,null],[7,"POW10TO128","","",null,null],[7,"POW10TO256","","",null,null],[0,"grisu","core::num::flt2dec::strategy","Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n1KB of precomputed table, and in turn, it's very quick for most inputs.",null,null],[5,"cached_power","core::num::flt2dec::strategy::grisu","",null,null],[5,"max_pow10_no_more_than","","Given `x > 0`, returns `(k, 10^k)` such that `10^k <= x < 10^(k+1)`.",null,null],[5,"format_shortest_opt","","The shortest mode implementation for Grisu.",null,null],[5,"format_shortest","","The shortest mode implementation for Grisu with Dragon fallback.",null,null],[5,"format_exact_opt","","The exact and fixed mode implementation for Grisu.",null,null],[5,"format_exact","","The exact and fixed mode implementation for Grisu with Dragon fallback.",null,null],[7,"CACHED_POW10","","",null,null],[17,"ALPHA","","",null,null],[17,"GAMMA","","",null,null],[17,"CACHED_POW10_FIRST_E","","",null,null],[17,"CACHED_POW10_LAST_E","","",null,null],[17,"MAX_SIG_DIGITS","core::num::flt2dec","The minimum size of buffer necessary for the shortest mode.",null,null],[11,"fmt","","",6,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",6,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",6,null],[11,"clone","","",5,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",5,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"fmt","","",7,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[0,"dec2flt","core::num","Converting decimal strings into IEEE 754 binary floating point numbers.",null,null],[3,"ParseFloatError","core::num::dec2flt","An error which can be returned when parsing a float.",null,null],[12,"kind","","",11,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",12,null],[13,"Invalid","","",12,null],[5,"pfe_empty","","",null,{"inputs":[],"output":{"name":"parsefloaterror"}}],[5,"pfe_invalid","","",null,{"inputs":[],"output":{"name":"parsefloaterror"}}],[5,"extract_sign","","Split decimal string into sign and the rest, without inspecting or validating the rest.",null,null],[5,"dec2flt","","Convert a decimal string into a floating point number.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"convert","","The main workhorse for the decimal-to-float conversion: Orchestrate all the preprocessing\nand figure out which algorithm should do the actual conversion.",null,{"inputs":[{"name":"decimal"}],"output":{"name":"result"}}],[5,"simplify","","Strip zeros where possible, even when this requires changing the exponent",null,{"inputs":[{"name":"decimal"}],"output":null}],[5,"trivial_cases","","Detect obvious overflows and underflows without even looking at the decimal digits.",null,{"inputs":[{"name":"decimal"}],"output":{"name":"option"}}],[0,"algorithm","","The various algorithms from the paper.",null,null],[5,"power_of_ten","core::num::dec2flt::algorithm","",null,{"inputs":[{"name":"i16"}],"output":{"name":"fp"}}],[5,"fast_path","","The fast path of Bellerophon using machine-sized integers and floats.",null,null],[5,"bellerophon","","Algorithm Bellerophon is trivial code justified by non-trivial numeric analysis.",null,{"inputs":[{"name":"big"},{"name":"i16"}],"output":{"name":"t"}}],[5,"algorithm_r","","An iterative algorithm that improves a floating point approximation of `f * 10^e`.",null,{"inputs":[{"name":"big"},{"name":"i16"},{"name":"t"}],"output":{"name":"t"}}],[5,"make_ratio","","Given `x = f` and `y = m` where `f` represent input decimal digits as usual and `m` is the\nsignificand of a floating point approximation, make the ratio `x / y` equal to\n`(f * 10^e) / (m * 2^k)`, possibly reduced by a power of two both have in common.",null,{"inputs":[{"name":"big"},{"name":"big"},{"name":"i16"},{"name":"i16"}],"output":null}],[5,"algorithm_m","","Conceptually, Algorithm M is the simplest way to convert a decimal to a float.",null,{"inputs":[{"name":"big"},{"name":"i16"}],"output":{"name":"t"}}],[5,"quick_start","","Skip over most AlgorithmM iterations by checking the bit length.",null,{"inputs":[{"name":"big"},{"name":"big"},{"name":"i16"}],"output":null}],[5,"underflow","","",null,{"inputs":[{"name":"big"},{"name":"big"},{"name":"big"}],"output":{"name":"t"}}],[5,"round_by_remainder","","Ordinary round-to-even, obfuscated by having to round based on the remainder of a division.",null,{"inputs":[{"name":"big"},{"name":"big"},{"name":"u64"},{"name":"t"}],"output":{"name":"t"}}],[17,"P","","Number of significand bits in Fp",null,null],[0,"table","core::num::dec2flt","Tables of approximations of powers of ten.\nDO NOT MODIFY: Generated by `src/etc/dec2flt_table.py`",null,null],[17,"MIN_E","core::num::dec2flt::table","",null,null],[17,"MAX_E","","",null,null],[17,"POWERS","","",null,null],[17,"F32_SHORT_POWERS","","",null,null],[17,"F64_SHORT_POWERS","","",null,null],[0,"num","core::num::dec2flt","Utility functions for bignums that don't make too much sense to turn into methods.",null,null],[5,"compare_with_half_ulp","core::num::dec2flt::num","Test whether truncating all bits less significant than `ones_place` introduces\na relative error less, equal, or greater than 0.5 ULP.",null,{"inputs":[{"name":"big"},{"name":"usize"}],"output":{"name":"ordering"}}],[5,"from_str_unchecked","","Convert an ASCII string containing only decimal digits to a `u64`.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"digits_to_big","","Convert a string of ASCII digits into a bignum.",null,null],[5,"to_u64","","Unwraps a bignum into a 64 bit integer. Panics if the number is too large.",null,{"inputs":[{"name":"big"}],"output":{"name":"u64"}}],[5,"get_bits","","Extract a range of bits.\nIndex 0 is the least significant bit and the range is half-open as usual.\nPanics if asked to extract more bits than fit into the return type.",null,{"inputs":[{"name":"big"},{"name":"usize"},{"name":"usize"}],"output":{"name":"u64"}}],[0,"rawfp","core::num::dec2flt","Bit fiddling on positive IEEE 754 floats. Negative numbers aren't and needn't be handled.\nNormal floating point numbers have a canonical representation as (frac, exp) such that the\nvalue is 2^exp * (1 + sum(frac[N-i] / 2^i)) where N is the number of bits. Subnormals are\nslightly different and weird, but the same principle applies.",null,null],[3,"Unpacked","core::num::dec2flt::rawfp","",null,null],[12,"sig","","",13,null],[12,"k","","",13,null],[5,"fp_to_float","","Convert an Fp to the closest f64. Only handles number that fit into a normalized f64.",null,{"inputs":[{"name":"fp"}],"output":{"name":"t"}}],[5,"round_normal","","Round the 64-bit significand to 53 bit with half-to-even. Does not handle exponent overflow.",null,{"inputs":[{"name":"fp"}],"output":{"name":"unpacked"}}],[5,"encode_normal","","Inverse of `RawFloat::unpack()` for normalized numbers.\nPanics if the significand or exponent are not valid for normalized numbers.",null,{"inputs":[{"name":"unpacked"}],"output":{"name":"t"}}],[5,"encode_subnormal","","Construct the subnormal. A mantissa of 0 is allowed and constructs zero.",null,{"inputs":[{"name":"u64"}],"output":{"name":"t"}}],[5,"big_to_fp","","Approximate a bignum with an Fp. Rounds within 0.5 ULP with half-to-even.",null,{"inputs":[{"name":"big"}],"output":{"name":"fp"}}],[5,"prev_float","","Find the largest floating point number strictly smaller than the argument.\nDoes not handle subnormals, zero, or exponent underflow.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"next_float","","",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"RawFloat","","A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.",null,null],[10,"transmute","","Get the raw binary representation of the float.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u64"}}],[10,"from_bits","","Transmute the raw binary representation into a float.",14,{"inputs":[{"name":"rawfloat"},{"name":"u64"}],"output":{"name":"self"}}],[10,"unpack","","Decode the float.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"unpacked"}}],[10,"from_int","","Cast from a small integer that can be represented exactly.  Panic if the integer can't be\nrepresented, the other code in this module makes sure to never let that happen.",14,{"inputs":[{"name":"rawfloat"},{"name":"u64"}],"output":{"name":"self"}}],[10,"short_fast_pow10","","Get the value 10^e from a pre-computed table. Panics for e >= ceil_log5_of_max_sig().",14,{"inputs":[{"name":"rawfloat"},{"name":"usize"}],"output":{"name":"self"}}],[10,"ceil_log5_of_max_sig","","What the name says. It's easier to hard code than juggling intrinsics and\nhoping LLVM constant folds it.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[10,"max_normal_digits","","subnormals. Probably the decimal exponent of the maximum normal value, hence the name.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"usize"}}],[10,"inf_cutoff","","When the most significant decimal digit has a place value greater than this, the number\nis certainly rounded to infinity.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i64"}}],[10,"zero_cutoff","","When the most significant decimal digit has a place value less than this, the number\nis certainly rounded to zero.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i64"}}],[10,"exp_bits","","The number of bits in the exponent.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u8"}}],[10,"sig_bits","","The number of bits in the singificand, *including* the hidden bit.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u8"}}],[11,"explicit_sig_bits","","The number of bits in the singificand, *excluding* the hidden bit.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u8"}}],[11,"max_exp","","The maximum legal exponent in fractional representation.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"min_exp","","The minimum legal exponent in fractional representation, excluding subnormals.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"max_exp_int","","`MAX_EXP` for integral representation, i.e., with the shift applied.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"max_encoded_exp","","`MAX_EXP` encoded (i.e., with offset bias)",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"min_exp_int","","`MIN_EXP` for integral representation, i.e., with the shift applied.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"i16"}}],[11,"max_sig","","The maximum normalized singificand in integral representation.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u64"}}],[11,"min_sig","","The minimal normalized significand in integral representation.",14,{"inputs":[{"name":"rawfloat"}],"output":{"name":"u64"}}],[11,"fmt","","",13,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",13,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"self"}}],[0,"parse","core::num::dec2flt","Validating and decomposing a decimal string of the form:",null,null],[3,"Decimal","core::num::dec2flt::parse","The interesting parts of a decimal string.",null,null],[12,"integral","","",15,null],[12,"fractional","","",15,null],[12,"exp","","The decimal exponent, guaranteed to have fewer than 18 decimal digits.",15,null],[4,"Sign","","",null,null],[13,"Positive","","",16,null],[13,"Negative","","",16,null],[4,"ParseResult","","",null,null],[13,"Valid","","",17,null],[13,"ShortcutToInf","","",17,null],[13,"ShortcutToZero","","",17,null],[13,"Invalid","","",17,null],[5,"parse_decimal","","Check if the input string is a valid floating point number and if so, locate the integral\npart, the fractional part, and the exponent in it. Does not handle signs.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"eat_digits","","Carve off decimal digits up to the first non-digit character.",null,null],[5,"parse_exp","","Exponent extraction and error checking.",null,null],[11,"fmt","","",16,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,null],[11,"assert_receiver_is_total_eq","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",11,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bignum","core::num","Custom arbitrary-precision number (bignum) implementation.",null,null],[3,"Big32x40","core::num::bignum","Stack-allocated arbitrary-precision (up to certain limit) integer.",null,null],[12,"size","","One plus the offset to the maximum \"digit\" in use.\nThis does not decrease, so be aware of the computation order.\n`base[size..]` should be zero.",18,null],[12,"base","","Digits. `[a, b, c, ...]` represents `a + b*2^W + c*2^(2W) + ...`\nwhere `W` is the number of bits in the digit type.",18,null],[0,"tests","","",null,null],[3,"Big8x3","core::num::bignum::tests","Stack-allocated arbitrary-precision (up to certain limit) integer.",null,null],[12,"size","","One plus the offset to the maximum \"digit\" in use.\nThis does not decrease, so be aware of the computation order.\n`base[size..]` should be zero.",19,null],[12,"base","","Digits. `[a, b, c, ...]` represents `a + b*2^W + c*2^(2W) + ...`\nwhere `W` is the number of bits in the digit type.",19,null],[11,"from_small","","Makes a bignum from one digit.",19,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",19,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",19,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",19,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",19,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",19,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",19,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",19,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",19,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",19,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",19,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",19,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",19,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",19,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",19,{"inputs":[{"name":"big8x3"},{"name":"big8x3"},{"name":"big8x3"},{"name":"big8x3"}],"output":null}],[11,"eq","","",19,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",19,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",19,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Digit32","core::num::bignum","The digit type for `Big32x40`.",null,null],[17,"SMALL_POW5","","Table of powers of 5 representable in digits. Specifically, the largest {u8, u16, u32} value\nthat's a power of five, plus the corresponding exponent. Used in `mul_pow5`.",null,null],[8,"FullOps","","Arithmetic operations required by bignums.",null,null],[10,"full_add","","Returns `(carry', v')` such that `carry' * 2^W + v' = self + other + carry`,\nwhere `W` is the number of bits in `Self`.",20,null],[10,"full_mul","","Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + carry`,\nwhere `W` is the number of bits in `Self`.",20,null],[10,"full_mul_add","","Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + other2 + carry`,\nwhere `W` is the number of bits in `Self`.",20,null],[10,"full_div_rem","","Returns `(quo, rem)` such that `borrow * 2^W + self = quo * other + rem`\nand `0 <= rem < other`, where `W` is the number of bits in `Self`.",20,null],[11,"from_small","","Makes a bignum from one digit.",18,{"inputs":[{"name":"big32x40"},{"name":"digit32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",18,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",18,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",18,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",18,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",18,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",18,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",18,{"inputs":[{"name":"big32x40"},{"name":"digit32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",18,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",18,{"inputs":[{"name":"big32x40"},{"name":"digit32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",18,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",18,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",18,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",18,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",18,{"inputs":[{"name":"big32x40"},{"name":"big32x40"},{"name":"big32x40"},{"name":"big32x40"}],"output":null}],[11,"eq","","",18,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",18,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",18,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"diy_float","core::num","Extended precision \"soft float\", for internal use only.",null,null],[3,"Fp","core::num::diy_float","A custom 64-bit floating point type, representing `f * 2^e`.",null,null],[12,"f","","The integer mantissa.",21,null],[12,"e","","The exponent in base 2.",21,null],[11,"fmt","","",21,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",21,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",21,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",21,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[8,"Zero","core::num","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",22,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",23,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Float","","A built-in floating point number.",null,null],[10,"nan","","Returns the NaN value.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns -0.0.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"zero","","Returns 0.0.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"one","","Returns 1.0.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns true if this value is NaN and false otherwise.",24,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",24,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns true if this number is neither infinite nor NaN.",24,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",24,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the category that this number falls into.",24,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",24,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",24,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",24,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"to_degrees","","Convert radians to degrees.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"to_radians","","Convert degrees to radians.",24,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[8,"FromStrRadixHelper","","",null,null],[10,"min_value","","",25,{"inputs":[{"name":"fromstrradixhelper"}],"output":{"name":"self"}}],[10,"from_u32","","",25,{"inputs":[{"name":"fromstrradixhelper"},{"name":"u32"}],"output":{"name":"self"}}],[10,"checked_mul","","",25,{"inputs":[{"name":"fromstrradixhelper"},{"name":"u32"}],"output":{"name":"option"}}],[10,"checked_sub","","",25,{"inputs":[{"name":"fromstrradixhelper"},{"name":"u32"}],"output":{"name":"option"}}],[10,"checked_add","","",25,{"inputs":[{"name":"fromstrradixhelper"},{"name":"u32"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",4,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",0,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",2,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"__description","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"intrinsics","core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,null],[5,"pref_align_of","","",null,null],[5,"size_of_val","","",null,null],[5,"min_align_of_val","","",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,null],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,null],[5,"init","","Creates a value initialized to zero.",null,null],[5,"uninit","","Creates an uninitialized value.",null,null],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,null],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,null],[5,"sqrtf64","","Returns the square root of an `f64`",null,null],[5,"powif32","","Raises an `f32` to an integer power.",null,null],[5,"powif64","","Raises an `f64` to an integer power.",null,null],[5,"sinf32","","Returns the sine of an `f32`.",null,null],[5,"sinf64","","Returns the sine of an `f64`.",null,null],[5,"cosf32","","Returns the cosine of an `f32`.",null,null],[5,"cosf64","","Returns the cosine of an `f64`.",null,null],[5,"powf32","","Raises an `f32` to an `f32` power.",null,null],[5,"powf64","","Raises an `f64` to an `f64` power.",null,null],[5,"expf32","","Returns the exponential of an `f32`.",null,null],[5,"expf64","","Returns the exponential of an `f64`.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,null],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,null],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,null],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,null],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,null],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,null],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,null],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,null],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,null],[5,"truncf32","","Returns the integer part of an `f32`.",null,null],[5,"truncf64","","Returns the integer part of an `f64`.",null,null],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,null],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,null],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,null],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,null],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,null],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,null],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,null],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,null],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,null],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,null],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,null],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v',\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,null],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","core","Basic functions for dealing with memory",null,null],[5,"forget","core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":null}],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints.",null,null],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",26,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",26,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[0,"ptr","core","Raw, unsafe pointers, `*const T`, and `*mut T`",null,null],[3,"Unique","core::ptr","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[12,"pointer","","",27,null],[12,"_marker","","",27,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc<T>` or `Arc<T>`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[12,"pointer","","",28,null],[12,"_marker","","",28,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","Variant of read_and_zero that writes the specific drop-flag byte\n(which may be more appropriate than zero).",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[11,"new","","Creates a new `Unique`.",27,null],[11,"get","","Dereferences the content.",27,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",27,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",28,null],[11,"clone","","",28,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"deref","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"marker","core","Primitive traits and marker types representing basic 'kinds' of types.",null,null],[3,"PhantomData","core::marker","`PhantomData<T>` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[0,"impls","","",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[11,"hash","","",29,{"inputs":[{"name":"phantomdata"},{"name":"h"}],"output":null}],[11,"eq","","",29,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",29,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",29,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",29,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[0,"ops","core","Overloadable operators",null,null],[3,"RangeFull","core::ops","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",30,null],[12,"end","","The upper bound of the range (exclusive).",30,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",31,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",32,null],[0,"impls","","",null,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",33,{"inputs":[{"name":"drop"}],"output":null}],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",34,null],[10,"add","","The method for the `+` operator",34,{"inputs":[{"name":"add"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",35,null],[10,"sub","","The method for the `-` operator",35,{"inputs":[{"name":"sub"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",36,null],[10,"mul","","The method for the `*` operator",36,{"inputs":[{"name":"mul"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",37,null],[10,"div","","The method for the `/` operator",37,{"inputs":[{"name":"div"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",38,null],[10,"rem","","The method for the `%` operator",38,{"inputs":[{"name":"rem"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",39,null],[10,"neg","","The method for the unary `-` operator",39,{"inputs":[{"name":"neg"}],"output":{"name":"output"}}],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",40,null],[10,"not","","The method for the unary `!` operator",40,{"inputs":[{"name":"not"}],"output":{"name":"output"}}],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",41,null],[10,"bitand","","The method for the `&` operator",41,{"inputs":[{"name":"bitand"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",42,null],[10,"bitor","","The method for the `|` operator",42,{"inputs":[{"name":"bitor"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",43,null],[10,"bitxor","","The method for the `^` operator",43,{"inputs":[{"name":"bitxor"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",44,null],[10,"shl","","The method for the `<<` operator",44,{"inputs":[{"name":"shl"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",45,null],[10,"shr","","The method for the `>>` operator",45,{"inputs":[{"name":"shr"},{"name":"rhs"}],"output":{"name":"output"}}],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",46,{"inputs":[{"name":"addassign"},{"name":"rhs"}],"output":null}],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",47,{"inputs":[{"name":"subassign"},{"name":"rhs"}],"output":null}],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",48,{"inputs":[{"name":"mulassign"},{"name":"rhs"}],"output":null}],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",49,{"inputs":[{"name":"divassign"},{"name":"rhs"}],"output":null}],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",50,{"inputs":[{"name":"remassign"},{"name":"rhs"}],"output":null}],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&` operator",51,{"inputs":[{"name":"bitandassign"},{"name":"rhs"}],"output":null}],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",52,{"inputs":[{"name":"bitorassign"},{"name":"rhs"}],"output":null}],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",53,{"inputs":[{"name":"bitxorassign"},{"name":"rhs"}],"output":null}],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",54,{"inputs":[{"name":"shlassign"},{"name":"rhs"}],"output":null}],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",55,{"inputs":[{"name":"shrassign"},{"name":"rhs"}],"output":null}],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",56,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",56,{"inputs":[{"name":"index"},{"name":"idx"}],"output":{"name":"output"}}],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",57,{"inputs":[{"name":"indexmut"},{"name":"idx"}],"output":{"name":"output"}}],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",58,null],[10,"deref","","The method called to dereference a value",58,{"inputs":[{"name":"deref"}],"output":{"name":"target"}}],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",59,{"inputs":[{"name":"derefmut"}],"output":{"name":"target"}}],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",60,{"inputs":[{"name":"fn"},{"name":"args"}],"output":{"name":"output"}}],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",61,{"inputs":[{"name":"fnmut"},{"name":"args"}],"output":{"name":"output"}}],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",62,null],[10,"call_once","","This is called when the call operator is used.",62,{"inputs":[{"name":"fnonce"},{"name":"args"}],"output":{"name":"output"}}],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate \"place\" that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",63,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",64,null],[10,"make_place","","Creates a fresh place from `self`.",64,{"inputs":[{"name":"placer"}],"output":{"name":"place"}}],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",65,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",65,{"inputs":[{"name":"inplace"}],"output":{"name":"owner"}}],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",66,null],[16,"Place","","The place that will negotiate the storage of the data.",66,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",66,{"inputs":[{"name":"boxed"},{"name":"place"}],"output":{"name":"self"}}],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",67,{"inputs":[{"name":"boxplace"}],"output":{"name":"self"}}],[11,"assert_receiver_is_total_eq","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",68,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",30,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",31,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",32,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[4,"Ordering","core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",69,null],[13,"Equal","","An ordering where a compared value is equal [to another].",69,null],[13,"Greater","","An ordering where a compared value is greater [than another].",69,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"impls","","",null,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",70,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",70,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"assert_receiver_is_total_eq","","",71,{"inputs":[{"name":"eq"}],"output":null}],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",72,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",73,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",73,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",73,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",73,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",73,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",69,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'",null,null],[8,"Clone","core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",74,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",74,{"inputs":[{"name":"clone"},{"name":"self"}],"output":null}],[0,"default","core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",75,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[0,"convert","core","Traits for conversions between types.",null,null],[8,"AsRef","core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",76,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",77,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",78,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",79,{"inputs":[{"name":"from"},{"name":"t"}],"output":{"name":"self"}}],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",80,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",81,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"any","core","This module implements the `Any` trait, which enables dynamic typing\nof any `'static` type through runtime reflection.",null,null],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[12,"t","","",82,null],[8,"Any","","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",83,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"fmt","core","",83,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",83,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",83,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",83,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",83,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",83,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",83,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",82,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[0,"array","core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",84,null],[10,"as_mut_slice","","Converts the array to mutable slice",84,null],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[3,"AtomicBool","core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[12,"v","","",85,null],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads.",null,null],[12,"v","","",86,null],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads.",null,null],[12,"v","","",87,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[12,"p","","",88,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM's\n`Monotonic` ordering.",89,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",89,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",89,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",89,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",89,null],[5,"atomic_store","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_swap","","",null,null],[5,"atomic_add","","Returns the old value (like __sync_fetch_and_add).",null,null],[5,"atomic_sub","","Returns the old value (like __sync_fetch_and_sub).",null,null],[5,"atomic_compare_and_swap","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_xor","","",null,null],[5,"fence","","An atomic fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[17,"UINT_TRUE","","",null,null],[11,"default","","",85,{"inputs":[{"name":"atomicbool"}],"output":{"name":"self"}}],[11,"default","","",86,{"inputs":[{"name":"atomicisize"}],"output":{"name":"self"}}],[11,"default","","",87,{"inputs":[{"name":"atomicusize"}],"output":{"name":"self"}}],[11,"default","","",88,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",89,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",85,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the bool, returning the old value.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",85,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",86,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the isize, returning the old value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",86,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",87,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the usize, returning the old value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",87,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",88,null],[11,"load","","Loads a value from the pointer.",88,null],[11,"store","","Stores a value into the pointer.",88,null],[11,"swap","","Stores a value into the pointer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",88,null],[11,"fmt","","",87,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location that admits only `Copy` data.",null,null],[12,"value","","",90,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[12,"borrow","","",91,null],[12,"value","","",91,null],[3,"BorrowRef","","",null,null],[12,"_borrow","","",92,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[12,"_value","","",93,null],[12,"_borrow","","",93,null],[3,"BorrowRefMut","","",null,null],[12,"_borrow","","",94,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[12,"_value","","",95,null],[12,"_borrow","","",95,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[12,"value","","",96,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",97,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",97,null],[13,"Unused","","There are no outstanding borrows on this cell.",97,null],[6,"BorrowFlag","","",null,null],[17,"UNUSED","","",null,null],[17,"WRITING","","",null,null],[11,"new","","Creates a new `Cell` containing the given value.",90,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",90,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",90,{"inputs":[{"name":"cell"},{"name":"t"}],"output":null}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",90,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",90,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",90,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",90,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",97,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",91,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",91,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",91,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",91,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",91,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",91,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"new","","",92,{"inputs":[{"name":"borrowref"},{"name":"cell"}],"output":{"name":"option"}}],[11,"drop","","",92,{"inputs":[{"name":"borrowref"}],"output":null}],[11,"clone","","",92,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",93,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",93,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",93,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",93,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",95,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",95,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",94,{"inputs":[{"name":"borrowrefmut"}],"output":null}],[11,"new","","",94,{"inputs":[{"name":"borrowrefmut"},{"name":"cell"}],"output":{"name":"option"}}],[11,"deref","","",95,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",95,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",96,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",96,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",96,null],[0,"char","core","Character manipulation.",null,null],[3,"EscapeUnicode","core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[12,"c","","",98,null],[12,"state","","",98,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[12,"state","","",99,null],[4,"EscapeUnicodeState","","",null,null],[13,"Backslash","","",100,null],[13,"Type","","",100,null],[13,"LeftBrace","","",100,null],[13,"Value","","",100,null],[13,"RightBrace","","",100,null],[13,"Done","","",100,null],[4,"EscapeDefaultState","","",null,null],[13,"Backslash","","",101,null],[13,"Char","","",101,null],[13,"Done","","",101,null],[13,"Unicode","","",101,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"encode_utf8_raw","","Encodes a raw u32 value as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",null,null],[5,"encode_utf16_raw","","Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",null,null],[17,"TAG_CONT","","",null,null],[17,"TAG_TWO_B","","",null,null],[17,"TAG_THREE_B","","",null,null],[17,"TAG_FOUR_B","","",null,null],[17,"MAX_ONE_B","","",null,null],[17,"MAX_TWO_B","","",null,null],[17,"MAX_THREE_B","","",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[8,"CharExt","","",null,null],[10,"is_digit","","",102,{"inputs":[{"name":"charext"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"to_digit","","",102,{"inputs":[{"name":"charext"},{"name":"u32"}],"output":{"name":"option"}}],[10,"escape_unicode","","",102,{"inputs":[{"name":"charext"}],"output":{"name":"escapeunicode"}}],[10,"escape_default","","",102,{"inputs":[{"name":"charext"}],"output":{"name":"escapedefault"}}],[10,"len_utf8","","",102,{"inputs":[{"name":"charext"}],"output":{"name":"usize"}}],[10,"len_utf16","","",102,{"inputs":[{"name":"charext"}],"output":{"name":"usize"}}],[10,"encode_utf8","","",102,null],[10,"encode_utf16","","",102,null],[11,"clone","","",98,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",100,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",98,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"clone","","",99,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",101,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",99,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","",null,null],[5,"panic_bounds_check","","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","core","Composable external iteration",null,null],[3,"Rev","core::iter","An double-ended iterator with the direction inverted.",null,null],[12,"iter","","",103,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[12,"it","","",104,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[12,"orig","","",105,null],[12,"iter","","",105,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[12,"a","","",106,null],[12,"b","","",106,null],[12,"state","","",106,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[12,"a","","",107,null],[12,"b","","",107,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[12,"iter","","",108,null],[12,"f","","",108,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[12,"iter","","",109,null],[12,"predicate","","",109,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[12,"iter","","",110,null],[12,"f","","",110,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[12,"iter","","",111,null],[12,"count","","",111,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[12,"iter","","",112,null],[12,"peeked","","",112,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[12,"iter","","",113,null],[12,"flag","","",113,null],[12,"predicate","","",113,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[12,"iter","","",114,null],[12,"flag","","",114,null],[12,"predicate","","",114,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[12,"iter","","",115,null],[12,"n","","",115,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[12,"iter","","",116,null],[12,"n","","",116,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[12,"iter","","",117,null],[12,"f","","",117,null],[12,"state","","",117,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[12,"iter","","",118,null],[12,"f","","",118,null],[12,"frontiter","","",118,null],[12,"backiter","","",118,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[12,"iter","","",119,null],[12,"done","","",119,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[12,"iter","","",120,null],[12,"f","","",120,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[12,"step_by","","",121,null],[12,"range","","",121,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[12,"range","","",122,null],[12,"done","","",122,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[12,"element","","",123,null],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[12,"inner","","",124,null],[4,"ChainState","","",null,null],[13,"Both","","",125,null],[13,"Front","","",125,null],[13,"Back","","",125,null],[5,"_assert_is_object_safe","","",null,{"inputs":[{"name":"iterator"}],"output":null}],[5,"select_fold1","","Select an element from an iterator based on the given projection\nand \"comparison\" function.",null,{"inputs":[{"name":"i"},{"name":"fproj"},{"name":"fcmp"}],"output":{"name":"option"}}],[5,"range_inclusive","","Returns an iterator over the range [start, stop].",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",126,null],[10,"next","","Advances the iterator and returns the next value.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",126,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",126,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",126,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",126,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",126,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",126,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",126,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",126,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",126,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",126,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",126,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",126,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",126,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",126,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",126,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by","","",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",126,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",126,null],[11,"cloned","","Creates an iterator which clone()s all of its elements.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",126,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",126,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",126,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",127,{"inputs":[{"name":"fromiterator"},{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",128,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",128,null],[10,"into_iter","","Creates an iterator from a value.",128,{"inputs":[{"name":"intoiterator"}],"output":{"name":"intoiter"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",129,{"inputs":[{"name":"extend"},{"name":"t"}],"output":null}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",130,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",131,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",132,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",132,{"inputs":[{"name":"step"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",103,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",104,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",105,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"clone","","",106,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",125,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",106,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",106,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",106,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",106,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",107,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",108,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",109,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",110,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",111,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"nth","","",111,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",111,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",111,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",112,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",112,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",112,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",112,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",112,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",113,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"clone","","",114,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",114,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"clone","","",115,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",115,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",115,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",115,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",115,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"clone","","",116,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",116,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",116,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"clone","","",117,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",117,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"clone","","",118,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",118,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",119,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",119,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",119,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",119,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"do_inspect","","",120,{"inputs":[{"name":"inspect"},{"name":"option"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",31,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",30,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",121,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"clone","","",122,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",122,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","core::ops","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",123,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",123,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next_back","","",133,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",133,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",133,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",133,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",124,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",124,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",124,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[0,"option","core","Optional values",null,null],[3,"Item","core::option","",null,null],[12,"opt","","",134,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[12,"inner","","",135,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[12,"inner","","",136,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[12,"inner","","",137,null],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",138,null],[13,"Some","","Some value `T`",138,null],[5,"expect_failed","","",null,{"inputs":[{"name":"str"}],"output":null}],[11,"hash","","",138,null],[11,"fmt","","",138,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",138,null],[11,"partial_cmp","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",138,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",138,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",138,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",138,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",138,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",138,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",138,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",138,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",138,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",138,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",138,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",138,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",138,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",138,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",138,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",138,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",138,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",138,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",138,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",138,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",138,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",138,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",138,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",134,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",134,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next_back","","",134,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",135,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",136,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next_back","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",138,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","core::raw","The representation of a slice like `&[T]`.",null,null],[12,"data","","",139,null],[12,"len","","",139,null],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",140,null],[12,"vtable","","",140,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",141,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[11,"clone","","",139,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",140,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[0,"result","core","Error handling with the `Result` type",null,null],[3,"Iter","core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[12,"inner","","",142,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[12,"inner","","",143,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[12,"inner","","",144,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",145,null],[13,"Err","","Contains the error value",145,null],[5,"unwrap_failed","","",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":null}],[11,"hash","","",145,null],[11,"fmt","","",145,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",145,null],[11,"partial_cmp","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",145,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",145,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",145,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",145,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",145,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",145,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",145,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",145,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",145,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",145,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",145,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",145,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",145,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",145,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",145,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",145,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",145,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",145,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",145,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",142,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",143,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",144,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",145,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[0,"slice","core","Slice management and manipulation",null,null],[3,"Iter","core::slice","Immutable slice iterator",null,null],[12,"ptr","","",146,null],[12,"end","","",146,null],[12,"_marker","","",146,null],[3,"IterMut","","Mutable slice iterator.",null,null],[12,"ptr","","",147,null],[12,"end","","",147,null],[12,"_marker","","",147,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[12,"v","","",148,null],[12,"pred","","",148,null],[12,"finished","","",148,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[12,"v","","",149,null],[12,"pred","","",149,null],[12,"finished","","",149,null],[3,"GenericSplitN","","An private iterator over subslices separated by elements that\nmatch a predicate function, splitting at most a fixed number of\ntimes.",null,null],[12,"iter","","",150,null],[12,"count","","",150,null],[12,"invert","","",150,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[12,"inner","","",151,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[12,"inner","","",152,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[12,"inner","","",153,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[12,"inner","","",154,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[12,"v","","",155,null],[12,"size","","",155,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[12,"v","","",156,null],[12,"size","","",156,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[12,"v","","",157,null],[12,"chunk_size","","",157,null],[5,"slice_index_len_fail","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":null}],[5,"slice_index_order_fail","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":null}],[5,"size_from_ptr","","",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"bytes","","Operations on `[u8]`.",null,null],[5,"copy_memory","core::slice::bytes","Copies data from `src` to `dst`",null,null],[8,"MutableByteVector","","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",158,{"inputs":[{"name":"mutablebytevector"},{"name":"u8"}],"output":null}],[8,"SliceExt","core::slice","Extension methods for slices.",null,null],[16,"Item","","",159,null],[10,"split_at","","",159,null],[10,"iter","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",159,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"item"}}],[10,"as_ptr","","",159,null],[10,"binary_search","","",159,{"inputs":[{"name":"sliceext"},{"name":"item"}],"output":{"name":"result"}}],[10,"binary_search_by","","",159,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",159,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",159,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"split_at_mut","","",159,null],[10,"reverse","","",159,{"inputs":[{"name":"sliceext"}],"output":null}],[10,"get_unchecked_mut","","",159,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"item"}}],[10,"as_mut_ptr","","",159,null],[10,"contains","","",159,{"inputs":[{"name":"sliceext"},{"name":"item"}],"output":{"name":"bool"}}],[10,"starts_with","","",159,null],[10,"ends_with","","",159,null],[10,"clone_from_slice","","",159,null],[8,"SplitIter","","An internal abstraction over the splitting iterators, so that\nsplitn, splitn_mut etc can be implemented once.",null,null],[10,"finish","","Mark the underlying iterator as complete, extracting the remaining\nportion of the slice.",160,{"inputs":[{"name":"splititer"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",146,null],[11,"iter_nth","","",146,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",146,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"count","","",146,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",146,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",146,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",147,null],[11,"iter_nth","","",147,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",147,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"count","","",147,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",147,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",147,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",147,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",148,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",149,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",149,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"next_back","","",149,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",150,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"next","","",151,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",151,null],[11,"next","","",152,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"next","","",153,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next","","",154,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"clone","","",155,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",155,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"count","","",155,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",155,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",155,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",156,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"count","","",156,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",156,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",156,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",157,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[0,"str","core","String manipulation",null,null],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` from a string fails.",null,null],[12,"_priv","","",161,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[12,"valid_up_to","","",162,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[12,"iter","","",163,null],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[12,"front_offset","","",164,null],[12,"iter","","",164,null],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module.",null,null],[3,"SplitInternal","","",null,null],[12,"start","","",165,null],[12,"end","","",165,null],[12,"matcher","","",165,null],[12,"allow_trailing_empty","","",165,null],[12,"finished","","",165,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitNInternal","","",null,null],[12,"iter","","",166,null],[12,"count","","The number of splits remaining",166,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"MatchIndicesInternal","","",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"MatchesInternal","","",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"LinesAnyMap","","A nameable, cloneable fn type",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",167,null],[12,"next","","Index of the first byte of the next `char`",167,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_raw_parts_mut","","Forms a str from a pointer and a length.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[5,"utf8_first_byte","","Return the initial codepoint accumulator for the first byte.\nThe first byte is special, only want bottom 5 bits for width 2, 4 bits\nfor width 3, and 3 bits for width 4.",null,{"inputs":[{"name":"u8"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"utf8_acc_cont_byte","","Return the value of `ch` updated with continuation byte `byte`.",null,{"inputs":[{"name":"u32"},{"name":"u8"}],"output":{"name":"u32"}}],[5,"utf8_is_cont_byte","","Checks whether the byte is a UTF-8 continuation byte (i.e. starts with the\nbits `10`).",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"unwrap_or_0","","",null,{"inputs":[{"name":"option"}],"output":{"name":"u8"}}],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[5,"next_code_point_reverse","","Reads the last code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[5,"eq_slice","","Bytewise slice equality\nNOTE: This function is (ab)used in rustc::middle::trans::_match\nto compare &[u8] byte slices that are not necessarily valid UTF-8.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"cmp_slice","","Bytewise slice comparison.\nNOTE: This uses the system's memcmp, which is currently dramatically\nfaster than comparing each byte in a loop.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"usize"}],"output":{"name":"i32"}}],[5,"contains_nonascii","","Return `true` if any byte in the word `x` is nonascii (>= 128).",null,{"inputs":[{"name":"usize"}],"output":{"name":"bool"}}],[5,"run_utf8_validation","","Walk through `iter` checking that it's a valid UTF-8 sequence,\nreturning `true` in that case, or, if it is invalid, `false` with\n`iter` reset such that it is pointing at the first byte in the\ninvalid sequence.",null,null],[5,"slice_error_fail","","",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"char_range_at_raw","","Pluck a code point out of a UTF-8-like byte slice and return the\nindex of the next code point.",null,null],[0,"pattern","","The string Pattern API.",null,null],[3,"CharEqPattern","core::str::pattern","",null,null],[3,"CharEqSearcher","","",null,null],[12,"char_eq","","",168,null],[12,"haystack","","",168,null],[12,"char_indices","","",168,null],[12,"ascii_only","","",168,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",169,null],[12,"needle","","",169,null],[12,"searcher","","",169,null],[3,"EmptyNeedle","","",null,null],[12,"position","","",170,null],[12,"end","","",170,null],[12,"is_match_fw","","",170,null],[12,"is_match_bw","","",170,null],[3,"TwoWaySearcher","","The internal state of the two-way substring search algorithm.",null,null],[12,"crit_pos","","critical factorization index",171,null],[12,"crit_pos_back","","critical factorization index for reversed needle",171,null],[12,"period","","",171,null],[12,"byteset","","`byteset` is an extension (not part of the two way algorithm);\nit's a 64-bit \"fingerprint\" where each set bit `j` corresponds\nto a (byte & 63) == j present in the needle.",171,null],[12,"position","","",171,null],[12,"end","","",171,null],[12,"memory","","index into needle before which we have already matched",171,null],[12,"memory_back","","index into needle after which we have already matched",171,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",172,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",172,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",172,null],[4,"StrSearcherImpl","","",null,null],[13,"Empty","","",173,null],[13,"TwoWay","","",173,null],[4,"MatchOnly","","Skip to match intervals as quickly as possible",null,null],[4,"RejectAndMatch","","Emit Rejects regularly",null,null],[8,"Pattern","","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",174,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",174,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"searcher"}}],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",174,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",174,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",174,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",175,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",175,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",175,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",175,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",176,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",176,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",176,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[8,"CharEq","","",null,null],[10,"matches","","",177,{"inputs":[{"name":"chareq"},{"name":"char"}],"output":{"name":"bool"}}],[10,"only_ascii","","",177,{"inputs":[{"name":"chareq"}],"output":{"name":"bool"}}],[8,"TwoWayStrategy","","",null,null],[16,"Output","","",178,null],[10,"use_early_reject","","",178,{"inputs":[{"name":"twowaystrategy"}],"output":{"name":"bool"}}],[10,"rejecting","","",178,{"inputs":[{"name":"twowaystrategy"},{"name":"usize"},{"name":"usize"}],"output":{"name":"output"}}],[10,"matching","","",178,{"inputs":[{"name":"twowaystrategy"},{"name":"usize"},{"name":"usize"}],"output":{"name":"output"}}],[11,"fmt","","",172,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",172,null],[11,"clone","","",172,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",168,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",179,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",168,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",168,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",168,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",180,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",181,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",182,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",169,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",173,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",170,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"new","","",169,{"inputs":[{"name":"strsearcher"},{"name":"str"},{"name":"str"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",169,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",169,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",169,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",169,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",169,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",171,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"new","","",171,null],[11,"byteset_create","","",171,null],[11,"byteset_contains","","",171,{"inputs":[{"name":"twowaysearcher"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"next","","",171,null],[11,"next_back","","",171,null],[11,"maximal_suffix","","",171,null],[11,"reverse_maximal_suffix","","",171,null],[11,"use_early_reject","","",183,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",183,{"inputs":[{"name":"matchonly"},{"name":"usize"},{"name":"usize"}],"output":{"name":"output"}}],[11,"matching","","",183,{"inputs":[{"name":"matchonly"},{"name":"usize"},{"name":"usize"}],"output":{"name":"output"}}],[11,"use_early_reject","","",184,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",184,{"inputs":[{"name":"rejectandmatch"},{"name":"usize"},{"name":"usize"}],"output":{"name":"output"}}],[11,"matching","","",184,{"inputs":[{"name":"rejectandmatch"},{"name":"usize"},{"name":"usize"}],"output":{"name":"output"}}],[0,"traits","core::str","",null,null],[7,"UTF8_CHAR_WIDTH","","",null,null],[17,"NONASCII_MASK","","",null,null],[17,"CONT_MASK","","Mask of the value bits of a continuation byte",null,null],[17,"TAG_CONT_U8","","Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",185,null],[10,"from_str","","Parses a string `s` to return a value of this type.",185,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[8,"StrExt","","Methods for string slices",null,null],[10,"contains","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"bool"}}],[10,"chars","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"chars"}}],[10,"bytes","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"bytes"}}],[10,"char_indices","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"charindices"}}],[10,"split","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"split"}}],[10,"rsplit","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"rsplit"}}],[10,"splitn","","",186,{"inputs":[{"name":"strext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",186,{"inputs":[{"name":"strext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"split_terminator","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"splitterminator"}}],[10,"rsplit_terminator","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"rsplitterminator"}}],[10,"matches","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"matches"}}],[10,"rmatches","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"rmatches"}}],[10,"match_indices","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"matchindices"}}],[10,"rmatch_indices","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"rmatchindices"}}],[10,"lines","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"lines"}}],[10,"lines_any","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"linesany"}}],[10,"slice_unchecked","","",186,{"inputs":[{"name":"strext"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[10,"slice_mut_unchecked","","",186,{"inputs":[{"name":"strext"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[10,"starts_with","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"bool"}}],[10,"ends_with","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"bool"}}],[10,"trim_matches","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"str"}}],[10,"trim_left_matches","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"str"}}],[10,"trim_right_matches","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"str"}}],[10,"is_char_boundary","","",186,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"char_range_at","","",186,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"charrange"}}],[10,"char_range_at_reverse","","",186,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"charrange"}}],[10,"char_at","","",186,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"char"}}],[10,"char_at_reverse","","",186,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"char"}}],[10,"as_bytes","","",186,null],[10,"find","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"option"}}],[10,"rfind","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"option"}}],[10,"find_str","","",186,{"inputs":[{"name":"strext"},{"name":"p"}],"output":{"name":"option"}}],[10,"split_at","","",186,null],[10,"split_at_mut","","",186,null],[10,"slice_shift_char","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"option"}}],[10,"as_ptr","","",186,null],[10,"len","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"usize"}}],[10,"is_empty","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"bool"}}],[10,"parse","","",186,{"inputs":[{"name":"strext"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",161,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",162,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",162,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",162,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",162,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",163,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"next_back","","",163,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",163,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",164,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",164,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next_back","","",164,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",164,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",187,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",187,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"count","","",187,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",187,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",187,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",187,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",187,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",165,{"inputs":[{"name":"splitinternal"}],"output":{"name":"self"}}],[11,"get_end","","",165,{"inputs":[{"name":"splitinternal"}],"output":{"name":"option"}}],[11,"next","","",165,{"inputs":[{"name":"splitinternal"}],"output":{"name":"option"}}],[11,"next_back","","",165,{"inputs":[{"name":"splitinternal"}],"output":{"name":"option"}}],[11,"next","","",188,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",188,{"inputs":[{"name":"split"}],"output":{"name":"self"}}],[11,"next","","",189,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",189,{"inputs":[{"name":"rsplit"}],"output":{"name":"self"}}],[11,"next_back","","",188,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",189,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",190,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",190,{"inputs":[{"name":"splitterminator"}],"output":{"name":"self"}}],[11,"next","","",191,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",191,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"self"}}],[11,"next_back","","",190,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",191,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"splitninternal"}],"output":{"name":"self"}}],[11,"next","","",166,{"inputs":[{"name":"splitninternal"}],"output":{"name":"option"}}],[11,"next_back","","",166,{"inputs":[{"name":"splitninternal"}],"output":{"name":"option"}}],[11,"next","","",192,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",192,{"inputs":[{"name":"splitn"}],"output":{"name":"self"}}],[11,"next","","",193,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",193,{"inputs":[{"name":"rsplitn"}],"output":{"name":"self"}}],[11,"clone","","",194,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"self"}}],[11,"next","","",194,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"option"}}],[11,"next_back","","",194,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"option"}}],[11,"next","","",195,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",195,{"inputs":[{"name":"matchindices"}],"output":{"name":"self"}}],[11,"next","","",196,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",196,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"self"}}],[11,"next_back","","",195,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",196,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",197,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"self"}}],[11,"next","","",197,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"option"}}],[11,"next_back","","",197,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"option"}}],[11,"next","","",198,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",198,{"inputs":[{"name":"matches"}],"output":{"name":"self"}}],[11,"next","","",199,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",199,{"inputs":[{"name":"rmatches"}],"output":{"name":"self"}}],[11,"next_back","","",198,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",199,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",200,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",200,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",200,null],[11,"next_back","","",200,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",201,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",202,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",202,null],[11,"call_mut","","",202,null],[11,"call_once","","",202,null],[11,"next","","",201,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"next_back","","",201,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[12,"k0","","",203,null],[12,"k1","","",203,null],[12,"length","","",203,null],[12,"v0","","",203,null],[12,"v2","","",203,null],[12,"v1","","",203,null],[12,"v3","","",203,null],[12,"tail","","",203,null],[12,"ntail","","",203,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[0,"sip","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","core::hash::sip","An implementation of SipHash 2-4.",null,null],[12,"k0","","",203,null],[12,"k1","","",203,null],[12,"length","","",203,null],[12,"v0","","",203,null],[12,"v2","","",203,null],[12,"v1","","",203,null],[12,"v3","","",203,null],[12,"tail","","",203,null],[12,"ntail","","",203,null],[5,"load_u64_le","","Load a full u64 word from a byte stream, in LE order. Use\n`copy_nonoverlapping` to let the compiler generate the most efficient way\nto load u64 from a possibly unaligned address.",null,null],[11,"new","core::hash","Creates a new `SipHasher` with the two initial keys set to 0.",203,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",203,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"reset","","",203,{"inputs":[{"name":"siphasher"}],"output":null}],[11,"write","","",203,null],[11,"finish","","",203,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",203,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",203,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[0,"impls","","",null,null],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",204,{"inputs":[{"name":"hash"},{"name":"h"}],"output":null}],[11,"hash_slice","","Feeds a slice of this type into the state provided.",204,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",205,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",205,null],[11,"write_u8","","Write a single `u8` into this hasher",205,{"inputs":[{"name":"hasher"},{"name":"u8"}],"output":null}],[11,"write_u16","","Write a single `u16` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"u16"}],"output":null}],[11,"write_u32","","Write a single `u32` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"u32"}],"output":null}],[11,"write_u64","","Write a single `u64` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"u64"}],"output":null}],[11,"write_usize","","Write a single `usize` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"usize"}],"output":null}],[11,"write_i8","","Write a single `i8` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"i8"}],"output":null}],[11,"write_i16","","Write a single `i16` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"i16"}],"output":null}],[11,"write_i32","","Write a single `i32` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"i32"}],"output":null}],[11,"write_i64","","Write a single `i64` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"i64"}],"output":null}],[11,"write_isize","","Write a single `isize` into this hasher.",205,{"inputs":[{"name":"hasher"},{"name":"isize"}],"output":null}],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",206,null],[10,"build_hasher","","Creates a new hasher.",206,{"inputs":[{"name":"buildhasher"}],"output":{"name":"hasher"}}],[8,"HashState","","Deprecated, renamed to `BuildHasher`",null,null],[16,"Hasher","","Type of the hasher that will be created.",207,null],[10,"hasher","","Creates a new hasher based on the given state of this object.",207,{"inputs":[{"name":"hashstate"}],"output":{"name":"hasher"}}],[11,"build_hasher","","",208,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",208,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",208,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[0,"fmt","core","Utilities for formatting and printing strings",null,null],[3,"Radix","core::fmt","A radix with in the range of `2..36`.",null,null],[12,"base","","",209,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",210,null],[12,"result","","",210,null],[12,"has_fields","","",210,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",211,null],[12,"result","","",211,null],[12,"has_fields","","",211,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",212,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",213,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",214,null],[12,"result","","",214,null],[12,"has_fields","","",214,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[12,"flags","","",215,null],[12,"fill","","",215,null],[12,"align","","",215,null],[12,"width","","",215,null],[12,"precision","","",215,null],[12,"buf","","",215,null],[12,"curarg","","",215,null],[12,"args","","",215,null],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",216,null],[12,"formatter","","",216,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[12,"pieces","","",217,null],[12,"fmt","","",217,null],[12,"args","","",217,null],[4,"Void","","",null,null],[4,"FlagV1","","",null,null],[13,"SignPlus","","",218,null],[13,"SignMinus","","",218,null],[13,"Alternate","","",218,null],[13,"SignAwareZeroPad","","",218,null],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[5,"float_to_decimal_common","","",null,{"inputs":[{"name":"formatter"},{"name":"t"},{"name":"bool"}],"output":{"name":"result"}}],[5,"float_to_exponential_common","","",null,{"inputs":[{"name":"formatter"},{"name":"t"},{"name":"bool"}],"output":{"name":"result"}}],[0,"num","","Integer and floating-point number formatting",null,null],[3,"Binary","core::fmt::num","A binary (base 2) radix",null,null],[3,"Octal","","An octal (base 8) radix",null,null],[3,"Decimal","","A decimal (base 10) radix",null,null],[3,"LowerHex","","A hexadecimal (base 16) radix, formatted with lower-case characters",null,null],[3,"UpperHex","","A hexadecimal (base 16) radix, formatted with upper-case characters",null,null],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[12,"base","","",209,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[17,"DEC_DIGITS_LUT","","",null,null],[8,"Int","","",null,null],[10,"from_u8","","",219,{"inputs":[{"name":"int"},{"name":"u8"}],"output":{"name":"self"}}],[10,"to_u8","","",219,{"inputs":[{"name":"int"}],"output":{"name":"u8"}}],[10,"to_u32","","",219,{"inputs":[{"name":"int"}],"output":{"name":"u32"}}],[10,"to_u64","","",219,{"inputs":[{"name":"int"}],"output":{"name":"u64"}}],[8,"GenericRadix","","A type that represents a specific radix",null,null],[10,"base","","The number of digits.",220,{"inputs":[{"name":"genericradix"}],"output":{"name":"u8"}}],[11,"prefix","","A radix-specific prefix string.",220,{"inputs":[{"name":"genericradix"}],"output":{"name":"str"}}],[10,"digit","","Converts an integer to corresponding radix digit.",220,{"inputs":[{"name":"genericradix"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"fmt_int","","Format an integer using the radix using a formatter.",220,{"inputs":[{"name":"genericradix"},{"name":"t"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",221,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",221,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",222,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",222,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",223,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",223,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",224,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",224,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",225,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",225,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"base","","",221,{"inputs":[{"name":"binary"}],"output":{"name":"u8"}}],[11,"prefix","","",221,{"inputs":[{"name":"binary"}],"output":{"name":"str"}}],[11,"digit","","",221,{"inputs":[{"name":"binary"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"base","","",222,{"inputs":[{"name":"octal"}],"output":{"name":"u8"}}],[11,"prefix","","",222,{"inputs":[{"name":"octal"}],"output":{"name":"str"}}],[11,"digit","","",222,{"inputs":[{"name":"octal"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"base","","",223,{"inputs":[{"name":"decimal"}],"output":{"name":"u8"}}],[11,"prefix","","",223,{"inputs":[{"name":"decimal"}],"output":{"name":"str"}}],[11,"digit","","",223,{"inputs":[{"name":"decimal"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"base","","",224,{"inputs":[{"name":"lowerhex"}],"output":{"name":"u8"}}],[11,"prefix","","",224,{"inputs":[{"name":"lowerhex"}],"output":{"name":"str"}}],[11,"digit","","",224,{"inputs":[{"name":"lowerhex"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"base","","",225,{"inputs":[{"name":"upperhex"}],"output":{"name":"u8"}}],[11,"prefix","","",225,{"inputs":[{"name":"upperhex"}],"output":{"name":"str"}}],[11,"digit","","",225,{"inputs":[{"name":"upperhex"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"eq","core::fmt","",209,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"new","","",209,{"inputs":[{"name":"radix"},{"name":"u8"}],"output":{"name":"radix"}}],[11,"base","","",209,{"inputs":[{"name":"radix"}],"output":{"name":"u8"}}],[11,"digit","","",209,{"inputs":[{"name":"radix"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"clone","","",226,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"builders","","",null,null],[3,"PadAdapter","core::fmt::builders","",null,null],[12,"fmt","","",227,null],[12,"on_newline","","",227,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",210,null],[12,"result","","",210,null],[12,"has_fields","","",210,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",211,null],[12,"result","","",211,null],[12,"has_fields","","",211,null],[3,"DebugInner","","",null,null],[12,"fmt","","",228,null],[12,"result","","",228,null],[12,"has_fields","","",228,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",212,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",213,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",214,null],[12,"result","","",214,null],[12,"has_fields","","",214,null],[5,"debug_struct_new","","",null,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[5,"debug_tuple_new","","",null,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[5,"debug_set_new","","",null,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[5,"debug_list_new","","",null,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[5,"debug_map_new","","",null,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"new","","",227,{"inputs":[{"name":"padadapter"},{"name":"formatter"}],"output":{"name":"padadapter"}}],[11,"write_str","","",227,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","core::fmt","Adds a new field to the generated struct output.",210,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",210,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"is_pretty","","",210,{"inputs":[{"name":"debugstruct"}],"output":{"name":"bool"}}],[11,"field","","Adds a new field to the generated tuple struct output.",211,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",211,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"is_pretty","","",211,{"inputs":[{"name":"debugtuple"}],"output":{"name":"bool"}}],[11,"formatter","","Returns the wrapped `Formatter`.",211,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"entry","core::fmt::builders","",228,{"inputs":[{"name":"debuginner"},{"name":"debug"}],"output":null}],[11,"finish","","",228,{"inputs":[{"name":"debuginner"}],"output":null}],[11,"is_pretty","","",228,{"inputs":[{"name":"debuginner"}],"output":{"name":"bool"}}],[11,"entry","core::fmt","Adds a new entry to the set output.",212,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",212,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",212,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",213,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",213,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",213,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",214,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",214,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",214,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"is_pretty","","",214,{"inputs":[{"name":"debugmap"}],"output":{"name":"bool"}}],[0,"rt","","",null,null],[0,"v1","core::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are\nemitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","core::fmt::rt::v1","",null,null],[12,"position","","",229,null],[12,"format","","",229,null],[3,"FormatSpec","","",null,null],[12,"fill","","",230,null],[12,"align","","",230,null],[12,"flags","","",230,null],[12,"precision","","",230,null],[12,"width","","",230,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",231,null],[13,"Right","","Indication that contents should be right-aligned.",231,null],[13,"Center","","Indication that contents should be center-aligned.",231,null],[13,"Unknown","","No alignment was requested.",231,null],[4,"Count","","",null,null],[13,"Is","","",232,null],[13,"Param","","",232,null],[13,"NextParam","","",232,null],[13,"Implied","","",232,null],[4,"Position","","",null,null],[13,"Next","","",233,null],[13,"At","","",233,null],[11,"clone","","",229,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",230,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",231,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",232,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",233,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[6,"Result","core::fmt","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",234,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",234,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",234,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",235,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",236,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",237,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",238,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",239,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",240,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",241,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",242,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",243,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",244,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",216,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"show_usize","","",216,{"inputs":[{"name":"argumentv1"},{"name":"usize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",216,null],[11,"from_usize","","",216,{"inputs":[{"name":"argumentv1"},{"name":"usize"}],"output":{"name":"argumentv1"}}],[11,"as_usize","","",216,{"inputs":[{"name":"argumentv1"}],"output":{"name":"option"}}],[11,"clone","","",218,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the\nArguments structure.",217,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters.\nThe `pieces` array must be at least as long as `fmt` to construct\na valid Arguments structure. Also, any `Count` within `fmt` that is\n`CountIsParam` or `CountIsNextParam` has to point to an argument\ncreated with `argumentusize`. However, failing to do so doesn't cause\nunsafety, but will ignore invalid .",217,null],[11,"clone","","",217,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",217,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"run","","",215,{"inputs":[{"name":"formatter"},{"name":"argument"}],"output":{"name":"result"}}],[11,"getcount","","",215,{"inputs":[{"name":"formatter"},{"name":"count"}],"output":{"name":"option"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",215,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",215,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_padding","","Runs a callback, emitting the correct padding either before or\nafterwards depending on whether right or left alignment is requested.",215,{"inputs":[{"name":"formatter"},{"name":"usize"},{"name":"alignment"},{"name":"f"}],"output":{"name":"result"}}],[11,"pad_formatted_parts","","Takes the formatted parts and applies the padding.\nAssumes that the caller already has rendered the parts with required precision,\nso that `self.precision` can be ignored.",215,{"inputs":[{"name":"formatter"},{"name":"formatted"}],"output":{"name":"result"}}],[11,"write_formatted_parts","","",215,{"inputs":[{"name":"formatter"},{"name":"formatted"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",215,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",215,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",215,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",215,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",215,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",215,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",215,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",215,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",215,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",215,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",215,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",215,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",215,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",244,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",29,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",90,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"tuple","core","A finite heterogeneous sequence, `(T, U, ..)`",null,null],[14,"panic!","","Entry point of thread panic, for details, see std::macros",null,null],[14,"assert!","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. Can only be used in\nfunctions that return `Result` because of the early return of `Err` that\nit provides.",null,null],[14,"write!","","Use the `format!` syntax to write data into a buffer.",null,null],[14,"writeln!","","Use the `format!` syntax to write data into a buffer, appending a newline.",null,null],[14,"unreachable!","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented!","","A standardized placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed.",null,null]],"paths":[[3,"ParseIntError"],[4,"FpCategory"],[4,"IntErrorKind"],[8,"OverflowingOps"],[3,"Wrapping"],[3,"Formatted"],[4,"Part"],[4,"Sign"],[3,"Decoded"],[4,"FullDecoded"],[8,"DecodableFloat"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Unpacked"],[8,"RawFloat"],[3,"Decimal"],[4,"Sign"],[4,"ParseResult"],[3,"Big32x40"],[3,"Big8x3"],[8,"FullOps"],[3,"Fp"],[8,"Zero"],[8,"One"],[8,"Float"],[8,"FromStrRadixHelper"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"RangeFull"],[4,"Ordering"],[8,"PartialEq"],[8,"Eq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"Borrow"],[8,"BorrowMut"],[3,"TypeId"],[8,"Any"],[8,"FixedSizeArray"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[4,"BorrowState"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[4,"EscapeUnicodeState"],[4,"EscapeDefaultState"],[8,"CharExt"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Once"],[4,"ChainState"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Step"],[3,"Empty"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"SplitIter"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"SplitInternal"],[3,"SplitNInternal"],[3,"CharRange"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"SearchStep"],[4,"StrSearcherImpl"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"CharEq"],[8,"TwoWayStrategy"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[8,"FromStr"],[8,"StrExt"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"HashState"],[3,"BuildHasherDefault"],[3,"Radix"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Formatter"],[3,"ArgumentV1"],[3,"Arguments"],[4,"FlagV1"],[8,"Int"],[8,"GenericRadix"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugInner"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"]]};
initSearch(searchIndex);
